using System.Data;
//using MySql.Data.MySqlClient;
using MySqlConnector;
using Microsoft.Extensions.Configuration;
using System.Net;
using RestSharp;
using System.Web;
using System.Text;
using System.Security.Cryptography;
using System.Data.Common;
 

using System.Globalization;
using System.IO;
using System.Linq;
 
using System.Net.Mail;
using System.Xml;
using Microsoft.Ajax.Utilities;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using OfficeOpenXml;
using RestSharp;
 
using System.Text;
using System.Security.Cryptography.Xml;
 
using System.Web.Helpers;
using Calyx_Solutions.Model;

namespace Calyx_Solutions.Service
{
    class srvSendMoney {
        HttpContext _srvTransactionContext;


        private string RandomString(int length, Random random)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        // Helper method to generate random number of specified length
        private string RandomNumber(int length, Random random)
        {
            const string digits = "0123456789";
            return new string(Enumerable.Repeat(digits, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        public string check_pep_sanction_benef(int benef_id, double amountgbp, string p_Transaction_Ref, HttpContext context)
        {
            int beneficiery_id = benef_id;
            double amount = amountgbp;
            string aml_result = "0";
            int flag1 = 0, flag2 = 0, flag4 = 0, flag5 = 0, flag6 = 0, flag7 = 0;
            int flag = 0;
            //Get Receiver Details
            //ICustomer c = FactoryCustomer.getCustomer();
            //c.Beneficiary_ID = beneficiery_id;
            //c.Is_Procedure = "QUERY";
            //c.Operation_Name = "Benf_Get_details_with_ID";
            //c.whereclause = "";
            //DataTable bt = (DataTable)c.ReadFromDatabase();
            MySqlCommand getbenef = new MySqlCommand("Get_beneficiery");
            getbenef.CommandType = CommandType.StoredProcedure;
            //string whereclause = "API_ID =" + 10;
            getbenef.Parameters.AddWithValue("beneficiaryID", beneficiery_id);

            DataTable bt = db_connection.ExecuteQueryDataTableProcedure(getbenef);

            try
            {
                //Insert Bank details
                if (bt.Rows.Count > 0)
                {
                    string Transaction_ID = "";//transactionID;
                    int BBank_ID = Convert.ToInt32(bt.Rows[0]["BBank_ID"]);
                    string Account_Number = Convert.ToString(bt.Rows[0]["Account_Number"]);
                    string AccountHolderName = Convert.ToString(bt.Rows[0]["AccountHolderName"]);
                    string Branch = Convert.ToString(bt.Rows[0]["Branch"]);
                    string BranchCode = Convert.ToString(bt.Rows[0]["BranchCode"]);
                    string Bank_code = Convert.ToString(bt.Rows[0]["BankCode"]);
                    string Ifsc_Code = Convert.ToString(bt.Rows[0]["Ifsc_Code"]);
                    int Country_ID = Convert.ToInt32(bt.Rows[0]["Beneficiary_Country_ID"]);
                    int City_ID = Convert.ToInt32(bt.Rows[0]["Beneficiary_City_ID"]);
                    string Benf_Iban = Convert.ToString(bt.Rows[0]["Iban_ID"]);
                    string BIC_Code = Convert.ToString(bt.Rows[0]["BIC_Code"]);
                    string formattedDateOfBirth = "";
                    //reset to previous value
                    //int Country_ID = 0;//Convert.ToInt32(dictObjMain["Country_ID"]);
                    string name = bt.Rows[0]["Beneficiary_Name"].ToString();


                    string bname = Convert.ToString(name).Trim(); string bfname = bname; string blname = " ";
                    if (bname.Contains(" "))
                    {
                        string[] spli = bname.Split(' ');
                        if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; }
                    }
                    try
                    {
                        DateTime dateOfBirth = Convert.ToDateTime(bt.Rows[0]["DateOf_Birth"]);
                        if (dateOfBirth != null)
                        {
                            formattedDateOfBirth = dateOfBirth.ToString("yyyy-MM-dd");

                        }
                    }
                    catch { }

                    string Beneficiary_Address = Convert.ToString(bt.Rows[0]["Beneficiary_Address"]);
                    string Beneficiary_Address1 = Convert.ToString(bt.Rows[0]["Beneficiary_Address1"]);
                    string City_Name = Convert.ToString(bt.Rows[0]["City_Name"]);
                    string Country_Name = Convert.ToString(bt.Rows[0]["Country_Name"]);
                    string Beneficiary_PostCode = Convert.ToString(bt.Rows[0]["Beneficiary_PostCode"]);
                    string Customer_ID = Convert.ToString(bt.Rows[0]["Customer_ID"]);
                    int Client_ID = Convert.ToInt32(bt.Rows[0]["Client_ID"]);


                    string Record_Insert_DateTime = CompanyInfo.gettime(Client_ID, context); //Convert.ToString(bt.Rows[0]["Beneficiary_PostCode"]);

                    int User_ID = Convert.ToInt32(bt.Rows[0]["Created_By_User_ID"]);
                    int Branch_ID = Convert.ToInt32(bt.Rows[0]["Branch_ID"]);

                    MySqlCommand cmdp_active = new MySqlCommand("active_thirdparti_aml_api");
                    cmdp_active.CommandType = CommandType.StoredProcedure;
                    string whereclause = "API_ID =" + 10;
                    cmdp_active.Parameters.AddWithValue("_whereclause", whereclause);

                    DataTable dtApi = db_connection.ExecuteQueryDataTableProcedure(cmdp_active);


                    if (dtApi.Rows.Count > 0)
                    {
                        string rooturl = "";
                        var _url = ""; //Convert.ToString(dtApi.Rows[0]["API_URL"]);
                        var UserName = "";//Convert.ToString(dtApi.Rows[0]["UserName"]);
                        var Password = "";// Convert.ToString(dtApi.Rows[0]["Password"]);
                                          //var ProfileID = Convert.ToString(dtApi.Rows[0]["ProfileID"]);
                        var _action = "http://www.id3global.com/ID3gWS/2013/04/IGlobalAuthenticate/AuthenticateSP";
                        var ProfileID = "";
                        var tokenurl = "";
                        var Encryption_Key = "";
                        var Request_Type_Code_Benef = "";
                        var Request_Type_Code_Cust = "";
                        var Request_Type_Code = "";
                        string bodyJson = "";
                        _url = Convert.ToString(dtApi.Rows[0]["API_URL"]);
                        UserName = Convert.ToString(dtApi.Rows[0]["UserName"]);
                        Password = Convert.ToString(dtApi.Rows[0]["Password"]);

                        ProfileID = Convert.ToString(dtApi.Rows[0]["ProfileID"]);
                        if (ProfileID != "" && ProfileID != null)
                        {
                            Newtonsoft.Json.Linq.JObject obj = Newtonsoft.Json.Linq.JObject.Parse(ProfileID);
                            tokenurl = Convert.ToString(obj["tokenurl"]);
                            Encryption_Key = Convert.ToString(obj["Encryption_Key"]);
                            Request_Type_Code_Benef = Convert.ToString(obj["Request_Type_Code_Benef"]);
                            Request_Type_Code_Cust = Convert.ToString(obj["Request_Type_Code_Cust"]);

                        }
                        Random random = new Random();
                        string referenceCode = RandomString(2, random) + RandomNumber(2, random) + beneficiery_id;
                        if (amount > 5000)
                        {
                            Request_Type_Code = Request_Type_Code_Cust;
                            bodyJson = @"
{
    ""requestType"": """ + Request_Type_Code + @""",
    ""subjectType"": ""INDIVIDUAL"",
  ""subjectReference"": """ + referenceCode + @""",
 ""requestReference"": ""Onboarding " + referenceCode + @""",
    ""subjectDetails"": {
        ""firstName"": """ + bfname + @""",
        ""surname"": """ + blname + @""",
        ""dateOfBirth"": """ + formattedDateOfBirth + @""",
        
        ""houseNumber"": """ + 0 + @""",
        ""addressLine1"":""" + Beneficiary_Address + @""",
        ""addressLine2"": """ + Beneficiary_Address1 + @""",
        ""city"":""" + City_Name + @""",
        ""postcode"": """ + Beneficiary_PostCode + @""",
        ""country"": """ + Country_Name + @"""
    },
    ""notes"": ""Onboarded under project Alpha."",
    ""monitorCommand"": ""ADD"",
    ""callbackUrl"": ""http://localhost:62372/api/v1/VeriffS/POST""
}
";
                        }
                        else
                        {
                            Request_Type_Code = Request_Type_Code_Benef;
                            bodyJson = @"
{
    ""requestType"": """ + Request_Type_Code + @""",
    ""subjectType"": ""INDIVIDUAL"",
  ""subjectReference"": """ + referenceCode + @""",
 ""requestReference"": ""Onboarding " + referenceCode + @""",
    ""subjectDetails"": {
        ""firstName"": """ + bfname + @""",
        ""surname"": """ + blname + @""",
        ""dateOfBirth"": """ + formattedDateOfBirth + @""",
        
        ""houseNumber"": """ + 0 + @""",
        ""addressLine1"":""" + Beneficiary_Address + @""",
        ""addressLine2"": """ + Beneficiary_Address1 + @""",
        ""city"":""" + City_Name + @""",
        ""postcode"": """ + Beneficiary_PostCode + @""",
        ""country"": """ + Country_Name + @"""
    },
    ""notes"": ""Onboarded under project Alpha."",

    ""callbackUrl"": ""http://localhost:62372/api/v1/VeriffS/POST""
}
";
                        }

                        try
                        {


                            string url = tokenurl;// "https://auth-u.complianceassist.co.uk";
                            string clientId = UserName;///"4i37l17880j149sin1gpqid8r2";
                            string clientSecret = Password; //"1lih0ev0bo7jvd2fl9emvl9k0b0dm2ulji7qe0naq9gf3g9mu3op";

                            string[] scopes = {
                                 "uat/requesttypes.read",
                                 "uat/requests.read",
                                 "uat/requests.write",
                                 "uat/subjects.read",
                                 "uat/subjects.write"
                                 };

                            string scope = string.Join(" ", scopes);





                            // Other code remains the same
                            var client = new RestClient(url + "/oauth2/token");
                            client.Timeout = -1;
                            var request = new RestRequest(Method.POST);
                            string authHeaderValue = Convert.ToBase64String(Encoding.UTF8.GetBytes(clientId + ":" + clientSecret));
                            request.AddHeader("Authorization", "Basic " + authHeaderValue);
                            request.AddHeader("Accept", "application/json");
                            request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
                            request.AddParameter("grant_type", "client_credentials");
                            request.AddParameter("scope", scope);

                            IRestResponse response1 = client.Execute(request);

                            JObject jsonResponse = JObject.Parse(response1.Content);



                            string accessToken = jsonResponse["access_token"].ToString();



                            // Assuming you have already obtained the accessToken variable from the previous step

                            url = _url;//"https://web-u.complianceassist.co.uk/api/v2_0/";

                            ///""WGMG001"",
                            ///  //""subjectReference"": """ + 0 + @""",
                            //""requestReference"": ""Onboarding " + 0 + @""",

                            // string gender = "MALE";



                            try
                            {

                                client = new RestClient(url + "requests");
                                client.Timeout = -1;
                                request = new RestRequest(Method.POST);
                                request.AddHeader("Authorization", "Bearer " + accessToken);
                                request.AddHeader("Accept", "application/json");
                                request.AddHeader("Content-Type", "application/json");
                                request.AddParameter("application/json", bodyJson, ParameterType.RequestBody);

                                response1 = client.Execute(request);

                                // Parse the JSON response
                                jsonResponse = JObject.Parse(response1.Content);



                                string status = (string)jsonResponse["status"];
                                int apiRequestId = (int)jsonResponse["apiRequestId"];
                                DateTime dateTime = (DateTime)jsonResponse["dateTime"];
                                long requestId = (long)jsonResponse["requestId"];
                                string requestReference = (string)jsonResponse["requestReference"];
                                long subjectId = (long)jsonResponse["subjectId"];
                                string subjectReference = (string)jsonResponse["subjectReference"];
                                string requestStatus = (string)jsonResponse["requestStatus"];



                                // Extract nested properties under "results"
                                JObject resultsObj = (JObject)jsonResponse["results"];
                                JObject watchlistsResultsObj = (JObject)resultsObj["watchlistsResults"];
                                int totalNumberOfMatches = (int)watchlistsResultsObj["totalNumberOfMatches"];

                                // Extract array values under "matchStatuses"
                                JArray matchStatusesArr = (JArray)watchlistsResultsObj["matchStatuses"];
                                if (matchStatusesArr != null)
                                {
                                    // Iterate through each item in the "matchStatuses" array
                                    foreach (JObject matchStatusObj in matchStatusesArr)
                                    {
                                        string matchStatus = (string)matchStatusObj["matchStatus"];
                                        int numberOfMatches = (int)matchStatusObj["numberOfMatches"];

                                        // Extract nested properties under "matchTypes"
                                        JObject matchTypesObj = (JObject)matchStatusObj["matchTypes"];
                                        bool isSan = (bool)matchTypesObj["san"];   // Indicates if there are sanction matches


                                        bool isAdv = (bool)matchTypesObj["adv"];   //Indicates if there are adverse media matches


                                        bool isPep = (bool)matchTypesObj["pep"];   //Indicates if there are PEP (politically exposed persons) matches


                                        bool isRca = (bool)matchTypesObj["rca"];   //Indicates if there are RCA (relatives or close associates) matches


                                        bool isSoc = (bool)matchTypesObj["soc"];   //Indicates if there are SOC (state owned companies) matches


                                        bool isOther = (bool)matchTypesObj["other"]; //Indicates if there are other types of matches





                                        if (isPep == true)
                                        {
                                            flag1 = 1; // set flag 1
                                            flag = 1;
                                        }
                                        else if (isSan == true)
                                        {
                                            flag2 = 2; // set flag 2
                                            flag = 2;
                                        }
                                        else if (isAdv == true)
                                        {
                                            flag4 = 4; // set flag 2
                                            flag = 4;
                                        }
                                        else if (isRca == true)
                                        {
                                            flag5 = 5; // set flag 2
                                            flag = 5;
                                        }
                                        else if (isSoc == true)
                                        {
                                            flag6 = 6; // set flag 2
                                            flag = 6;
                                        }
                                        else if (isOther == true)
                                        {
                                            flag7 = 7; // set flag 2
                                            flag = 7;
                                        }
                                        if (flag1 > 0 && flag2 > 0)
                                        {
                                            flag = 3; // Set flag 3
                                        }
                                        else
                                        {
                                            flag = 0;
                                        }






                                    }
                                }

                                int remark = 0;
                                if (requestStatus == "Complete")
                                {
                                    remark = 0;
                                }
                                else
                                {
                                    remark = 1;
                                }

                                string request3 = url + "requests" + bodyJson;
                                string CallFrom = "Complience_Request_benef";

                                try
                                {
                                    MySqlCommand _cmd = new MySqlCommand("SaveAPIRequestResponce");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_API_ID", 10);
                                    _cmd.Parameters.AddWithValue("_Client_ID", Client_ID);
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    _cmd.Parameters.AddWithValue("_status", 0);
                                    _cmd.Parameters.AddWithValue("_Function_name", CallFrom);
                                    _cmd.Parameters.AddWithValue("_Remark", remark.ToString());
                                    _cmd.Parameters.AddWithValue("_comments", request3);
                                    _cmd.Parameters.AddWithValue("_Record_Insert_DateTime", Record_Insert_DateTime);
                                    _cmd.Parameters.AddWithValue("_Branch_ID", Branch_ID);
                                    int msg1 = db_connection.ExecuteNonQueryProcedure(_cmd);
                                }
                                catch (Exception ex)
                                {
                                    string error = ex.ToString().Replace("\'", "\\'");
                                    MySqlCommand _cmd = new MySqlCommand("SaveException");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_Record_Insert_DateTime", Record_Insert_DateTime);
                                    _cmd.Parameters.AddWithValue("_error", error);
                                    _cmd.Parameters.AddWithValue("_Client_ID", Client_ID);
                                    int msg1 = db_connection.ExecuteNonQueryProcedure(_cmd);
                                }

                                // string request = url + "requests" + bodyJson;
                                CallFrom = "Complience_Response_benef";
                                try
                                {
                                    MySqlCommand _cmd = new MySqlCommand("SaveAPIRequestResponce");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_API_ID", 10);
                                    _cmd.Parameters.AddWithValue("_Client_ID", Client_ID);
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    _cmd.Parameters.AddWithValue("_status", 1);
                                    _cmd.Parameters.AddWithValue("_Function_name", CallFrom);
                                    _cmd.Parameters.AddWithValue("_Remark", remark);
                                    _cmd.Parameters.AddWithValue("_comments", jsonResponse);
                                    _cmd.Parameters.AddWithValue("_Record_Insert_DateTime", Record_Insert_DateTime);
                                    _cmd.Parameters.AddWithValue("_Branch_ID", Branch_ID);
                                    int msg1 = db_connection.ExecuteNonQueryProcedure(_cmd);
                                }
                                catch (Exception ex)
                                {
                                    string error = ex.ToString().Replace("\'", "\\'");

                                    MySqlCommand _cmd = new MySqlCommand("SaveException");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_Record_Insert_DateTime", Record_Insert_DateTime);
                                    _cmd.Parameters.AddWithValue("_error", error);
                                    _cmd.Parameters.AddWithValue("_Client_ID", Client_ID);
                                    int msg1 = db_connection.ExecuteNonQueryProcedure(_cmd);
                                }

                                DataTable dtb = CompanyInfo.get(Client_ID, context);
                                if (dtb.Rows.Count > 0)
                                {
                                    //CURL = Convert.ToString(dtb.Rows[0]["RootURL"]);
                                    //Company_Name = Convert.ToString(dtb.Rows[0]["Company_Name"]);

                                    rooturl = Convert.ToString(dtb.Rows[0]["RootURL"]);
                                }
                                try
                                {

                                    //ServicePointManager.Expect100Continue = true;
                                    //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                                    //       | SecurityProtocolType.Tls11
                                    //       | SecurityProtocolType.Tls12
                                    //       | SecurityProtocolType.Ssl3;
                                    client = new RestClient(url + "requests/" + requestId);
                                    client.Timeout = 3000; // Set a timeout of 3 seconds
                                    request = new RestRequest(Method.GET);
                                    request.AddHeader("Authorization", "Bearer " + accessToken);
                                    request.AddHeader("Accept", "application/pdf");
                                    request.AddHeader("Content-Type", "application/json"); // Add Content-Type header
                                    response1 = client.Execute(request);

                                    if (response1.StatusCode == HttpStatusCode.OK)
                                    {
                                        byte[] pdfData = response1.RawBytes;

                                        // Write the PDF data to a file


                                        if (pdfData != null && pdfData.Length > 0)
                                        {
                                            // Write the PDF data to a file
                                            string filePath = "assets/Other_Docs/" + "PDF-" + referenceCode + "-" + Record_Insert_DateTime.Replace(":", "") + ".pdf";
                                            string URL = rooturl + filePath;
                                            try
                                            {
                                                try
                                                {
                                                    File.WriteAllBytes(URL, pdfData);
                                                    Console.WriteLine("PDF saved successfully at: " + filePath);

                                                }
                                                catch (Exception ex)
                                                {

                                                }


                                                CallFrom = "Complience_Request_benef";

                                                string pdfdownload = "0";

                                                request3 = url + "requests" + bodyJson;

                                                MySqlCommand _cmd = new MySqlCommand("Insert_benef_aml_detail");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("p_Beneficiary_ID", beneficiery_id);
                                                _cmd.Parameters.AddWithValue("p_Beneficiary_Name", bfname + " " + blname);
                                                _cmd.Parameters.AddWithValue("p_PDFGenerate_Status", pdfdownload);
                                                _cmd.Parameters.AddWithValue("p_PDF_FileName", filePath);
                                                _cmd.Parameters.AddWithValue("p_Record_Insert_DateTime", Record_Insert_DateTime);
                                                _cmd.Parameters.AddWithValue("p_Beneficiary_AML_Status", requestStatus);
                                                _cmd.Parameters.AddWithValue("p_Beneficiary_Ref", referenceCode);
                                                _cmd.Parameters.AddWithValue("p_Client_ID", Client_ID);
                                                _cmd.Parameters.AddWithValue("p_Branch_Id", Branch_ID);
                                                _cmd.Parameters.AddWithValue("p_Delete_Status", 0);
                                                _cmd.Parameters.AddWithValue("p_Customer_ID", Customer_ID);
                                                _cmd.Parameters.AddWithValue("p_Parameter", request3);
                                                _cmd.Parameters.AddWithValue("p_APICall_From", CallFrom);
                                                _cmd.Parameters.AddWithValue("p_Response_Code", remark);
                                                _cmd.Parameters.AddWithValue("p_RequestResponse_Flag", 0);
                                                _cmd.Parameters.AddWithValue("p_API_ID", 10);
                                                _cmd.Parameters.AddWithValue("p_Transaction_Ref", p_Transaction_Ref);
                                                _cmd.Parameters.AddWithValue("p_AML_check_profile", Request_Type_Code);
                                                int msg1 = db_connection.ExecuteNonQueryProcedure(_cmd);


                                                CallFrom = "Complience_Response_benef";


                                                _cmd = new MySqlCommand("Insert_benef_aml_detail");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("p_Beneficiary_ID", beneficiery_id);
                                                _cmd.Parameters.AddWithValue("p_Beneficiary_Name", bfname + " " + blname);
                                                _cmd.Parameters.AddWithValue("p_PDFGenerate_Status", pdfdownload);
                                                _cmd.Parameters.AddWithValue("p_PDF_FileName", filePath);
                                                _cmd.Parameters.AddWithValue("p_Record_Insert_DateTime", Record_Insert_DateTime);
                                                _cmd.Parameters.AddWithValue("p_Beneficiary_AML_Status", requestStatus);
                                                _cmd.Parameters.AddWithValue("p_Beneficiary_Ref", referenceCode);
                                                _cmd.Parameters.AddWithValue("p_Client_ID", Client_ID);
                                                _cmd.Parameters.AddWithValue("p_Branch_Id", Branch_ID);
                                                _cmd.Parameters.AddWithValue("p_Delete_Status", 0);
                                                _cmd.Parameters.AddWithValue("p_Customer_ID", Customer_ID);
                                                _cmd.Parameters.AddWithValue("p_Parameter", jsonResponse);
                                                _cmd.Parameters.AddWithValue("p_APICall_From", CallFrom);
                                                _cmd.Parameters.AddWithValue("p_Response_Code", remark);
                                                _cmd.Parameters.AddWithValue("p_RequestResponse_Flag", 1);
                                                _cmd.Parameters.AddWithValue("p_API_ID", 10);
                                                _cmd.Parameters.AddWithValue("p_Transaction_Ref", p_Transaction_Ref);
                                                _cmd.Parameters.AddWithValue("p_AML_check_profile", Request_Type_Code);
                                                msg1 = db_connection.ExecuteNonQueryProcedure(_cmd);

                                            }
                                            catch (Exception ex)
                                            {
                                                Console.WriteLine("Error saving PDF: " + ex.Message);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        // Handle the case where the request fails or returns an error
                                        Console.WriteLine("Error: " + response1.StatusCode);
                                    }

                                }

                                catch (Exception ex)
                                {
                                    string stattus = (string)CompanyInfo.InsertErrorLogDetails(ex.Message.Replace("\'", "\\'"), User_ID, "Complience Assist AMl Check - 2st api call (PDF download)  ", Branch_ID, Client_ID);

                                }
                                if (flag > 0)
                                {
                                    CallFrom = "Complience_PEP_Sanction";

                                    try
                                    {
                                        MySqlCommand _cmd = new MySqlCommand("SaveAPIRequestResponce");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_API_ID", 10);
                                        _cmd.Parameters.AddWithValue("_Client_ID", Client_ID);
                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        _cmd.Parameters.AddWithValue("_status", 0);
                                        _cmd.Parameters.AddWithValue("_Function_name", CallFrom);
                                        _cmd.Parameters.AddWithValue("_Remark", 1);
                                        _cmd.Parameters.AddWithValue("_comments", Convert.ToString(jsonResponse));
                                        _cmd.Parameters.AddWithValue("_Record_Insert_DateTime", Record_Insert_DateTime);
                                        _cmd.Parameters.AddWithValue("_Branch_ID", Branch_ID);
                                        int msg1 = db_connection.ExecuteNonQueryProcedure(_cmd);
                                    }
                                    catch (Exception ex)
                                    {
                                        string error = ex.ToString().Replace("\'", "\\'");
                                        MySqlCommand _cmd = new MySqlCommand("SaveException");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_Record_Insert_DateTime", Record_Insert_DateTime);
                                        _cmd.Parameters.AddWithValue("_error", error);
                                        _cmd.Parameters.AddWithValue("_Client_ID", Client_ID);
                                        int msg1 = db_connection.ExecuteNonQueryProcedure(_cmd);
                                    }




                                    MySqlCommand cmd = new MySqlCommand("update_sanction_flag");
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    cmd.Parameters.AddWithValue("_record_date", Record_Insert_DateTime);
                                    cmd.Parameters.AddWithValue("_clientId", Client_ID);
                                    cmd.Parameters.AddWithValue("_branchId", Branch_ID);
                                    cmd.Parameters.AddWithValue("_sanction_flag", flag);
                                    int n = db_connection.ExecuteNonQueryProcedure(cmd);

                                    if (flag1 > 0 && flag2 > 0)
                                    {
                                        try
                                        {
                                            MySqlCommand cmd_update = new MySqlCommand("UPDATE beneficiary_master SET PEPAndSanctions = '3' WHERE Beneficiary_ID = @Bneficiary_ID");
                                            cmd_update.Parameters.AddWithValue("@Bneficiary_ID", benef_id);
                                            db_connection.ExecuteNonQueryProcedure(cmd_update);


                                            //alert fro pep and sanctions.
                                            string description1 = "Customer Found in Pep AND Sanctions";
                                            // string Record_DateTime = "0";
                                            string notification_icon = "pep-match-not-found.jpg";
                                            //notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> International Sanctions Alert  </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            string notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> International Pep and Sanctions Alert </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(Record_Insert_DateTime), Convert.ToInt32(Client_ID), 1, User_ID, Convert.ToInt32(Branch_ID), 0, 0, 1, 0, context);



                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                    }
                                    else if (flag1 > 0)
                                    {
                                        try
                                        {
                                            MySqlCommand cmd_update = new MySqlCommand("UPDATE beneficiary_master SET PEPAndSanctions = '1' WHERE Beneficiary_ID = @Bneficiary_ID");
                                            cmd_update.Parameters.AddWithValue("@Bneficiary_ID", benef_id);
                                            db_connection.ExecuteNonQueryProcedure(cmd_update);

                                            //alert for pep
                                            string description1 = "Customer Found In pep";
                                            string Record_DateTime = Record_Insert_DateTime;
                                            string notification_icon = "aml-referd.jpg";
                                            //string notification_message = "<span class='cls-admin'> International PEP Alert - <strong class='cls-cancel'></strong><br/>" + description1 + "</span><span class='cls-customer'></span>";
                                            string notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> International PEP Alert </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(Record_DateTime), Client_ID, 1, User_ID, Branch_ID, 0, 1, 1, 0, context);


                                        }
                                        catch { }
                                    }
                                    else if (flag2 > 0)
                                    {
                                        try
                                        {
                                            MySqlCommand cmd_update = new MySqlCommand("UPDATE beneficiary_master SET PEPAndSanctions = '2' WHERE Beneficiary_ID = @Bneficiary_ID");
                                            cmd_update.Parameters.AddWithValue("@Bneficiary_ID", benef_id);
                                            db_connection.ExecuteNonQueryProcedure(cmd_update);

                                            //alert for sanction.
                                            string description1 = "Customer Found in Sanctions";
                                            string Record_DateTime = Record_Insert_DateTime;
                                            string notification_icon = "pep-match-not-found.jpg";
                                            //notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> International Sanctions Alert  </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            string notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> International Sanctions Alert </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(Record_Insert_DateTime), Convert.ToInt32(Client_ID), 1, User_ID, Convert.ToInt32(Branch_ID), 0, 0, 1, 0, context);


                                        }
                                        catch { }
                                    }
                                    else if (flag4 > 0)
                                    {
                                        try
                                        {
                                            MySqlCommand cmd_update = new MySqlCommand("UPDATE beneficiary_master SET PEPAndSanctions = '4' WHERE Beneficiary_ID = @Bneficiary_ID");
                                            cmd_update.Parameters.AddWithValue("@Bneficiary_ID", benef_id);
                                            db_connection.ExecuteNonQueryProcedure(cmd_update);

                                            //alert for sanction.
                                            string description1 = "adverse media matches";
                                            string Record_DateTime = Record_Insert_DateTime;
                                            string notification_icon = "pep-match-not-found.jpg";
                                            //notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> International Sanctions Alert  </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            string notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> Beneficiery found in adverse media matches </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(Record_Insert_DateTime), Convert.ToInt32(Client_ID), 1, User_ID, Convert.ToInt32(Branch_ID), 0, 0, 1, 0, context);


                                        }
                                        catch { }
                                    }
                                    else if (flag5 > 0)
                                    {
                                        try
                                        {
                                            MySqlCommand cmd_update = new MySqlCommand("UPDATE beneficiary_master SET PEPAndSanctions = '4' WHERE Beneficiary_ID = @Bneficiary_ID");
                                            cmd_update.Parameters.AddWithValue("@Bneficiary_ID", benef_id);
                                            db_connection.ExecuteNonQueryProcedure(cmd_update);

                                            //alert for sanction.
                                            string description1 = "Customer Found in Sanctions";
                                            string Record_DateTime = Record_Insert_DateTime;
                                            string notification_icon = "pep-match-not-found.jpg";
                                            //notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> International Sanctions Alert  </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            string notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> Beneficiery found in (relatives or close associates) matches Alert </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(Record_Insert_DateTime), Convert.ToInt32(Client_ID), 1, User_ID, Convert.ToInt32(Branch_ID), 0, 0, 1, 0, context);


                                        }
                                        catch { }
                                    }
                                    else if (flag6 > 0)
                                    {
                                        try
                                        {
                                            MySqlCommand cmd_update = new MySqlCommand("UPDATE beneficiary_master SET PEPAndSanctions = '6' WHERE Beneficiary_ID = @Bneficiary_ID");
                                            cmd_update.Parameters.AddWithValue("@Bneficiary_ID", benef_id);
                                            db_connection.ExecuteNonQueryProcedure(cmd_update);

                                            //alert for sanction.
                                            string description1 = " Beneficiery found in SOC (state owned companies)";
                                            string Record_DateTime = Record_Insert_DateTime;
                                            string notification_icon = "pep-match-not-found.jpg";
                                            //notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> International Sanctions Alert  </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            string notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> Beneficiery found in SOC (state owned companies) matches Alert </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(Record_Insert_DateTime), Convert.ToInt32(Client_ID), 1, User_ID, Convert.ToInt32(Branch_ID), 0, 0, 1, 0, context);


                                        }
                                        catch { }
                                    }
                                    else if (flag7 > 0)
                                    {
                                        try
                                        {
                                            MySqlCommand cmd_update = new MySqlCommand("UPDATE beneficiary_master SET PEPAndSanctions = '7' WHERE Beneficiary_ID = @Bneficiary_ID");
                                            cmd_update.Parameters.AddWithValue("@Bneficiary_ID", benef_id);
                                            db_connection.ExecuteNonQueryProcedure(cmd_update);

                                            //alert for sanction.
                                            string description1 = "Beneficiery found in other types of matches";
                                            string Record_DateTime = Record_Insert_DateTime;
                                            string notification_icon = "pep-match-not-found.jpg";
                                            //notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> International Sanctions Alert  </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            string notification_message = "<span class='cls-admin'> - <span class='cls-cancel'><strong> Beneficiery found in other types of matches Alert </strong>- </span><span class='cls-addr-confirm'>" + description1 + " </span></span></span><span class='cls-customer'></span>";
                                            CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(Record_Insert_DateTime), Convert.ToInt32(Client_ID), 1, User_ID, Convert.ToInt32(Branch_ID), 0, 0, 1, 0, context);


                                        }
                                        catch { }
                                    }

                                }

                                else if (requestStatus == "Complete")
                                {
                                    //string Customer_ID = "0";
                                    //string Record_Insert_DateTime = "0";
                                    //int Client_ID = 0;
                                    //int User_ID = 0;
                                    //int Branch_ID = 0;
                                    string Record_DateTime = Record_Insert_DateTime;
                                    string notification_icon = "primary-id-upload.jpg";
                                    string notification_message = "<span class='cls-admin'>Complience AML check result is <strong class='cls-priamary'>" + requestStatus + ".</strong></span><span class='cls-customer'></span>";
                                    CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(Record_DateTime), Client_ID, 1, User_ID, Branch_ID, 0, 1, 1, 0, context);


                                    ////Auto verifiy ID document on perm 125
                                    //MySqlCommand cmdp1 = new MySqlCommand("AutoVerify_IDdoc");
                                    //cmdp1.CommandType = CommandType.StoredProcedure;
                                    //cmdp1.Parameters.AddWithValue("_UserName", "Auto Verified");
                                    //cmdp1.Parameters.AddWithValue("_status", 0);
                                    //cmdp1.Parameters.AddWithValue("_Record_Insert_DateTime", Record_Insert_DateTime);
                                    //cmdp1.Parameters.AddWithValue("_SenderID_ID", 0);
                                    //try
                                    //{
                                    //    int dr = dbconnection.ExecuteNonQueryProcedure(cmdp1);

                                    //}
                                    //catch { }

                                    MySqlCommand cmd_update = new MySqlCommand("UPDATE beneficiary_master SET PEPAndSanctions = '0' WHERE Beneficiary_ID = @Bneficiary_ID");
                                    cmd_update.Parameters.AddWithValue("@Bneficiary_ID", benef_id);
                                    db_connection.ExecuteNonQueryProcedure(cmd_update);

                                    MySqlCommand cmd = new MySqlCommand("update_sanction_flag");
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    cmd.Parameters.AddWithValue("_record_date", Record_Insert_DateTime);
                                    cmd.Parameters.AddWithValue("_clientId", Client_ID);
                                    cmd.Parameters.AddWithValue("_branchId", Branch_ID);
                                    cmd.Parameters.AddWithValue("_sanction_flag", 0);
                                    int n = db_connection.ExecuteNonQueryProcedure(cmd);
                                }

                            }
                            catch (Exception ex)
                            {
                                //string stattus = (string)mtsmethods.InsertErrorLogDetails(ex.Message.Replace("\'", "\\'"), user_id, "Complience Assist AMl Check - 1st api call ", i.Branch_ID, i.Client_ID);

                            }
                        }
                        catch (Exception ex)
                        {

                        }
                    }


                }

            }
            catch (Exception ex)
            {

            }
            aml_result = flag.ToString();

            return aml_result;
        }

        public bool checklasttransactiontime(int Customer_ID, int client_Id)
        {

            MySqlConnector.MySqlCommand _cmd = new MySqlConnector.MySqlCommand("Transaction_Search");
            _cmd.CommandType = CommandType.StoredProcedure;
            string _query = " ";
            _query += " and  aa.customer_Id='" + Customer_ID + "'";
            string _limit = " limit 1";
            _cmd.Parameters.AddWithValue("_whereclause", _query);
            _cmd.Parameters.AddWithValue("_limit", _limit);
            DataTable dt = db_connection.ExecuteQueryDataTableProcedure(_cmd);
            // Get Record_Insert_DateTime as a string
            string recordInsertDateTimeStr = CompanyInfo.gettime(client_Id, Customer_ID.ToString(), 0, _srvTransactionContext);

            // Convert Record_Insert_DateTime from string to DateTime
            if (!DateTime.TryParse(recordInsertDateTimeStr, out DateTime recordInsertDateTime))
            {
                // If conversion fails, return false
                return false;
            }

            if (dt.Rows.Count > 0)
            {
                // Get the last transaction timestamp from the database
                if (DateTime.TryParse(dt.Rows[0]["Record_Insert_DateTime"].ToString(), out DateTime lastTransactionTime))
                {
                    // Check if the difference is at least 1 minute (60 seconds)
                    if ((recordInsertDateTime - lastTransactionTime).TotalSeconds >= 60)
                    {
                        return true;
                    }
                }
            }
            if (dt.Rows.Count == 0)
            {
                return true;
            }
            return false;
        }

        public bool checkValidTransactionCase(Model.Transaction obj)
        {
            //return true;
            HttpContext context = null;
            try
            {                
                int customerID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                double amountgbp = Convert.ToDouble(obj.AmountInGBP);
                double sendamountInForeignCurrency = obj.AmountInPKR;
                int branchID = obj.CB_ID;
                int clientID = obj.Client_ID;
                
                int deliveryTypeID = obj.DeliveryType_Id;
                double exchangeRate = obj.Exchange_Rate;
                string baseCurrencyCode = obj.FromCurrency_Code;
                string foreignCurrencyCode = obj.Currency_Code;
                int paymentTypeID = obj.PaymentType_ID;
                int foreignCountryId = obj.Country_ID;
                int purposeID = obj.Purpose_ID;
                int offerRateFlag = obj.offer_rate_flag;
                int improved_rate_flag = obj.improved_rate_flag;
                double transferFees = Math.Round(obj.Transfer_Fees,4);
                double transferCost = obj.Transfer_Cost;
                if(paymentTypeID == 0)
                {
                    transferCost = obj.TotalAmount;
                }

                double calsendingAmount = sendamountInForeignCurrency / exchangeRate;
                if(Math.Round( calsendingAmount, 2) != Math.Round(amountgbp, 2))
                {
                    CompanyInfo.InsertrequestLogTracker("Unmatched calsendingAmount is: " + Math.Round(calsendingAmount, 2) + " and sendingAmount:" + Math.Round(amountgbp, 2), 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                    return false;
                }



                #region Discount Code Use
                // Discount Type Values
                int sendDiscountID = obj.Discount_ID;
                string sendDiscountCode = obj.Discount_Code;
                double sendDiscountAmount = obj.Discount_Amount;
                
                Service.srvDiscount srvdiscount = new Service.srvDiscount();
                DataTable li1_ = srvdiscount.getavailableDiscDetailsreferee(obj, context);
                string systemDiscountCode = "";
                int systemDiscountTypeID = 0, systemDiscountAmountType=0, systemDiscountId=0;
                double systemDiscountValue = 0.0, systemMinAmt=0.0, systemMaxAmt=0.0;                
                #endregion  Discount Code Use




                MySqlConnector.MySqlCommand cmd6 = new MySqlConnector.MySqlCommand("getbasecurrencyid");
                cmd6.CommandType = CommandType.StoredProcedure;
                cmd6.Parameters.AddWithValue("_Client_ID", clientID);
                cmd6.Parameters.AddWithValue("_BaseCurrency", baseCurrencyCode);
                int baseCurrency_id = Convert.ToInt32(db_connection.ExecuteScalarProcedure(cmd6));
                //obj.FromCurrency_Code = Convert.ToString(baseCurrency_id);
                obj.FromCurrency_CodeId = baseCurrency_id;

                DataTable dtForCurrencyId = new DataTable();
                MySqlConnector.MySqlCommand _cmdForCurrencyId = new MySqlConnector.MySqlCommand("Currency_Search");
                
                _cmdForCurrencyId.CommandType = CommandType.StoredProcedure;
                _cmdForCurrencyId.Parameters.AddWithValue("_Currency_Code", foreignCurrencyCode);
                dtForCurrencyId = db_connection.ExecuteQueryDataTableProcedure(_cmdForCurrencyId);
                int foreignCurrencyId = 0;
                if (dtForCurrencyId.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtForCurrencyId.Rows)
                    {
                         if(Convert.ToInt32(dr["Country_ID"]) == foreignCountryId)
                        {
                            foreignCurrencyId = Convert.ToInt32(dr["Currency_ID"] );
                            obj.Currency_ID = foreignCurrencyId;break;
                        }
                    }
                }

                    // Received Values From API
                    int walletID = obj.Wallet_ID;
                string walletUserCurrencyName = obj.Wallet_Currency;
                int walletPermission = obj.Wallet_Perm;
                double walletUsedAmount = obj.Wallet_Amount;
                int walletCurrencyID = 0; double walletBalance = 0;
                double rewardamount = 0.00;
                int walletCurrencyNameID = 0;
                double availablewalletBalance = 0.0;

                MySqlCommand _cmd = new MySqlCommand("GetWallets");
                _cmd.CommandType = CommandType.StoredProcedure;
                string whereclause = " and c.Client_ID=" + clientID + " and w.Client_ID=" + clientID + " and w.Customer_ID=" + customerID + " and w.Wallet_ID = " + walletID + "";
                _cmd.Parameters.AddWithValue("_whereclause", whereclause);
                DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                if (walletID > 0 && dtwallets.Rows.Count == 0)
                {
                    return false;
                }

                //System Records
                int systemWalletID = 0;
                string systemWalletCurrencyCode = "";
                if (dtwallets.Rows.Count > 0)
                {
                    systemWalletID = Convert.ToInt32(dtwallets.Rows[0]["Wallet_ID"]);
                    systemWalletCurrencyCode = Convert.ToString(dtwallets.Rows[0]["Currency_Code"]);
                    walletCurrencyNameID = Convert.ToInt32(dtwallets.Rows[0]["Currency_ID"]);
                    availablewalletBalance = Convert.ToDouble(dtwallets.Rows[0]["Wallet_Balance"]);
                }
                if (walletID > 0)
                {
                    if (systemWalletID != walletID)
                    {
                        CompanyInfo.InsertrequestLogTracker("Unmatched systemWalletID is: " + systemWalletID+ " and walletID:"+ walletID, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                        return false;
                    }
                    else if (systemWalletCurrencyCode != walletUserCurrencyName )
                    {
                        CompanyInfo.InsertrequestLogTracker("Unmatched systemWalletCurrencyCode is: " + systemWalletCurrencyCode + " and walletUserCurrencyName:" + walletUserCurrencyName, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                        //return false;
                    }
                }


                Offer obj_walletDetails = new Offer();
                obj_walletDetails.Client_ID = clientID;
                obj_walletDetails.Branch_ID = branchID;
                obj_walletDetails.Transaction_ID = 0;
                obj_walletDetails.Base_currency_code = baseCurrencyCode;
                obj_walletDetails.Base_currency_id = baseCurrency_id;
                obj_walletDetails.Foreign_currency_id = 0;

                int walletCurrencyId = 0;
                int currencyTypeId = 0;
                int amountType = 0;
                int walletApplyOn = 0;
                double walletUsageLimitPerTxn = 0.0;
                double perkValue = 0; int perkUsageLimit = 0; int deleteStatus = 0;
                Service.SrvOffers srvWallet = new Service.SrvOffers();
                DataTable dtWalletDetails = srvWallet.Get_wallet_configuration(obj_walletDetails, context);
                if (dtWalletDetails.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtWalletDetails.Rows)
                    {
                        Dictionary<string, object> transaction_history = new Dictionary<string, object>();
                        deleteStatus = Convert.ToInt32(dr["Delete_Status"]);
                        if (deleteStatus == 0)
                        {
                            walletCurrencyId = Convert.ToInt32(dr["Currency_Id"]);
                            currencyTypeId = Convert.ToInt32(dr["Currency_type"]);
                            walletUsageLimitPerTxn = Convert.ToDouble(dr["wallet_usage_lmt_per_txn"]);
                            amountType = Convert.ToInt32(dr["Amt_type"]);
                            walletApplyOn = Convert.ToInt32(dr["Wallet_apply"]);
                            perkValue = Convert.ToDouble(dr["Perk_value"]);
                            perkUsageLimit = Convert.ToInt32(dr["Perk_usage_limit"]);
                        }
                    }
                }

                obj.TransferAmount = Convert.ToString(amountgbp);

                if (paymentTypeID == 0)
                {
                    paymentTypeID = obj.PType_ID;                  
                }

                obj.PType_ID =  paymentTypeID;
                
                obj.TransferForeignAmount = Convert.ToString(sendamountInForeignCurrency);

                ///////////////////////////////////////////////
                if (obj.improved_rate_used_flag == 0)
                {
                    obj.improved_rate_flag = 0; // Assign value 0 because fetch improve rates 
                }

                Service.srvRates srv = new Service.srvRates(context);
                DataTable li1 = srv.GetRates(obj);
               
                if (obj.improved_rate_used_flag == 0)
                {
                    obj.improved_rate_flag = 1; // Re-vert here to 1 value 
                }

                ///////////////////////////////////////////////

                List<Dictionary<string, object>> rateList = new List<Dictionary<string, object>>();

                CompanyInfo.InsertrequestLogTracker("GetRates When Transaction Submit response : " + li1.Rows.Count, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                // Get system Rate and Fees Values
                if (li1 != null && li1.Rows.Count > 0)
                {
                    double systemTransferFees = Convert.ToDouble(li1.Rows[0]["Transfer_Fees"]);
                    int systemFeeType = Convert.ToInt32(li1.Rows[0]["Fee_Type"]);
                    double systemRate = Math.Round(Convert.ToDouble(li1.Rows[0]["Rate"]),4);
                    int systemofferRateFlag = Convert.ToInt32(li1.Rows[0]["offer_rate_flag"]);
                    int systemImprovedRateType = Convert.ToInt32(li1.Rows[0]["Improved_rate_type"]);

                    if (improved_rate_flag == 1 && obj.improved_rate_used_flag == 0)
                    {
                       string statusForImproveRate= Convert.ToString(li1.Rows[0]["status"]);
                        if(statusForImproveRate == "False")
                        {
                            CompanyInfo.InsertrequestLogTracker("improve rate status is : False", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            return false;
                        }
                        else
                        {
                            systemRate = Math.Round(Convert.ToDouble(li1.Rows[0]["Improved_rate"]), 4); 
                        }
                    }

                    CompanyInfo.InsertrequestLogTracker("Fetched systemTransferFees :" + systemTransferFees + " and systemFeeType: " + systemFeeType+ " and systemRate: "+ systemRate+ " and systemofferRateFlag:"+ systemofferRateFlag+ " and systemImprovedRateType: "+ systemImprovedRateType, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                    if (systemFeeType == 1)
                    {   // Amount
                        // No need to write any code. Its straight code
                    }
                    else
                    {   // Percentage
                        systemTransferFees = Math.Round((systemTransferFees / 100) * amountgbp , 4);
                    }

                    if (improved_rate_flag == 1 && obj.improved_rate_used_flag == 0)
                    {   // If improve Rates are used
                        if (systemImprovedRateType == 1)
                        {   // Amount
                            // No need to write any code. Its straight code
                            systemTransferFees = Math.Round( systemTransferFees  , 4);
                        }
                        else
                        {   // Percentage
                            systemTransferFees = Math.Round((systemTransferFees / 100) * amountgbp, 4);
                        }
                    }

                        if (Math.Round(systemTransferFees, 4) != Math.Round(transferFees, 4))
                    {
                        string str = transferFees.ToString("G17", System.Globalization.CultureInfo.InvariantCulture);

                        int decimalPlaces = 0;
                        if (str.Contains("."))
                        {                            
                            decimalPlaces = str.Split('.')[1].TrimEnd('0').Length;
                        }

                        if(decimalPlaces == 2) { decimalPlaces = 1; }
                        else if (decimalPlaces == 4 || decimalPlaces == 3) { decimalPlaces = 2; }
                        else if(  decimalPlaces > 4) { decimalPlaces = 1; }

                        CompanyInfo.InsertrequestLogTracker("decimalPlaces  :" + decimalPlaces, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                        CompanyInfo.InsertrequestLogTracker("Math.Round(systemTransferFees, decimalPlaces)  :" + Math.Round(systemTransferFees, decimalPlaces), 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                        CompanyInfo.InsertrequestLogTracker("Math.Round(transferFees, decimalPlaces)  :" + Math.Round(transferFees, decimalPlaces), 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                        if (Math.Round(systemTransferFees, decimalPlaces) != Math.Round(transferFees, decimalPlaces))
                        {
                            CompanyInfo.InsertrequestLogTracker("Unmatched transferFees :" + transferFees + " and systemTransferFees:" + systemTransferFees, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            return false;
                        }                       
                    }

                    CompanyInfo.InsertrequestLogTracker("System Fee Type:" + systemFeeType+ " and systemTransferFees:"+ systemTransferFees, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                    CompanyInfo.InsertrequestLogTracker("System systemRate:" + systemRate + " and systemofferRateFlag:" + systemofferRateFlag+ " and systemImprovedRateType:"+ systemImprovedRateType, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                    if (Math.Round(systemRate,4) != Math.Round(exchangeRate,4))
                    {
                        string str = exchangeRate.ToString("G17", System.Globalization.CultureInfo.InvariantCulture);

                        int decimalPlaces = 0;
                        if (str.Contains("."))
                        {
                            decimalPlaces = str.Split('.')[1].TrimEnd('0').Length;
                        }

                        if (decimalPlaces == 2) { decimalPlaces = 1; }
                        else  if (decimalPlaces == 4 || decimalPlaces == 3) { decimalPlaces = 2; }
                        else if (decimalPlaces > 4) { decimalPlaces = 1; }

                        if (Math.Round(systemRate, decimalPlaces) != Math.Round(exchangeRate, decimalPlaces))
                        {
                            CompanyInfo.InsertrequestLogTracker("Rate is not matched. systemRate:" + Math.Round(systemRate, 4), 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            return false;
                        }                           
                    }


                    double calculatedAmount = 0, calculatedPercentage = 0;
                    double totalForeignCurrencyAmount = 0;

                    amountgbp = Math.Round((sendamountInForeignCurrency / systemRate) , 4) ;

                    #region wallet used while transaction
                    if (walletID > 0)
                    {
                        CompanyInfo.InsertrequestLogTracker("walletUsageLimitPerTxn:" + walletUsageLimitPerTxn + " and amountgbp:"+ amountgbp, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                        if (walletApplyOn == 1)
                        {   // Apply on Amount
                            if (amountType == 1)
                            {   // Fixed Amount
                                calculatedAmount = amountgbp - walletUsageLimitPerTxn;
                                calculatedAmount = calculatedAmount + systemTransferFees;
                                CompanyInfo.InsertrequestLogTracker("Apply on Amount Fixed Amount calculatedAmount:" + calculatedAmount, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                            else
                            {   // Percentage
                                calculatedPercentage = (walletUsageLimitPerTxn / 100) * amountgbp;
                                calculatedAmount = amountgbp - calculatedPercentage;
                                calculatedAmount = calculatedAmount + systemTransferFees;
                                CompanyInfo.InsertrequestLogTracker("Apply on Amount Percentage Calculated walletUsageLimitPerTxn:" + walletUsageLimitPerTxn + " and amountgbp:" + amountgbp+ " and calculatedPercentage:"+ calculatedPercentage, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                CompanyInfo.InsertrequestLogTracker("Apply on Amount Percentage Calculated calculatedAmount:" + calculatedAmount + " and calculatedPercentage:"+ calculatedPercentage, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                        }
                        else if (walletApplyOn == 2)
                        {   // Apply on Fees
                            if (amountType == 1)
                            {   // Fixed Amount
                                calculatedAmount = systemTransferFees - walletUsageLimitPerTxn;
                                if(calculatedAmount <= 0) { calculatedAmount = 0; };
                                calculatedAmount = amountgbp + calculatedAmount;
                             
                                CompanyInfo.InsertrequestLogTracker("Apply on Fees Fixed Amount calculatedAmount:" + calculatedAmount, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                            else
                            {   // Percentage
                                calculatedPercentage = (walletUsageLimitPerTxn / 100) * systemTransferFees;
                                calculatedAmount = systemTransferFees - calculatedPercentage;
                                if (calculatedAmount <= 0) { calculatedAmount = 0; };
                                calculatedAmount = amountgbp + calculatedAmount;
                            
                                CompanyInfo.InsertrequestLogTracker("Apply on Fees Percentage calculatedAmount:" + calculatedAmount+ " and calculatedPercentage:"+ calculatedPercentage, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                        }
                        else if (walletApplyOn == 3)
                        {   // Apply on Amount + Fees
                            if (amountType == 1)
                            {   // Fixed Amount
                                calculatedAmount = (amountgbp + systemTransferFees) - walletUsageLimitPerTxn;
                                CompanyInfo.InsertrequestLogTracker("Apply on Amount + Fees Fixed Amount calculatedAmount:" + calculatedAmount, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                            else
                            {   // Percentage
                                calculatedPercentage = (walletUsageLimitPerTxn / 100) * (amountgbp + systemTransferFees);
                                calculatedAmount =  (amountgbp + systemTransferFees) - calculatedPercentage;
                                CompanyInfo.InsertrequestLogTracker("Apply on Amount + Fees Percentage calculatedAmount:" + calculatedAmount, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                        }
                        else if (walletApplyOn == 4)
                        {   // Apply on wallet
                            if (amountType == 1)
                            {   // Fixed Amount
                                calculatedAmount = (amountgbp + systemTransferFees) - walletUsageLimitPerTxn;
                                CompanyInfo.InsertrequestLogTracker("Wallet Apply on wallet Fixed Amount calculatedAmount:" + calculatedAmount, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                            else
                            {   // Percentage
                                MySqlConnector.MySqlCommand _cmd_forwallet = new MySqlConnector.MySqlCommand("GetWallets");
                                _cmd_forwallet.CommandType = CommandType.StoredProcedure;
                                string whereclause_forwallet = " and w.AgentFlag=1 and c.Client_ID=" + obj.Client_ID + " and w.Client_ID=" + obj.Client_ID + " and w.Customer_ID=" + customerID + " and Currency_Code like '%" + null + "%'";
                                _cmd_forwallet.Parameters.AddWithValue("_whereclause", whereclause_forwallet);
                                DataTable dt = db_connection.ExecuteQueryDataTableProcedure(_cmd_forwallet);
                                double systemCustomerWalletBalance = 0;
                                foreach (DataRow row in li1.Rows)
                                {
                                    if (row["Wallet_balance"] != DBNull.Value && Convert.ToInt32(row["Wallet_ID"]) == walletID) // Check for NULL values
                                    {
                                        systemCustomerWalletBalance = Math.Round(Convert.ToDouble(row["Wallet_balance"]), 4);
                                    }
                                }

                                CompanyInfo.InsertrequestLogTracker("Wallet Apply Customer wallet Available balance :" + systemCustomerWalletBalance, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                calculatedPercentage = (walletUsageLimitPerTxn / 100) * (systemCustomerWalletBalance);
                                calculatedAmount = (amountgbp + systemTransferFees) - calculatedPercentage;
                                CompanyInfo.InsertrequestLogTracker("Wallet Apply on Percentage calculatedAmount:" + calculatedAmount, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                        }

                        if (walletApplyOn == 4)
                        {
                            CompanyInfo.InsertrequestLogTracker(" Calculated Amt:" + Math.Round((calculatedAmount), 2) + "  and sendAmt:" + Math.Round(transferCost, 2), 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            if (Math.Round(calculatedAmount, 2) != Math.Round(transferCost, 2))
                            {
                                CompanyInfo.InsertrequestLogTracker("For wallet used Unmached both base currency Values ", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                return false;
                            }
                            else
                            {
                                CompanyInfo.InsertrequestLogTracker("For wallet used Mached both base currency Values ", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                            totalForeignCurrencyAmount = (Math.Round((amountgbp + systemTransferFees), 4) * systemRate);

                            CompanyInfo.InsertrequestLogTracker("Foreign currency  (int)totalForeignCurrencyAmount:" + (int)totalForeignCurrencyAmount + " and (int)sendamountInForeignCurrency " + (int)sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                            if ((int)totalForeignCurrencyAmount != (int)sendamountInForeignCurrency)
                            {
                                CompanyInfo.InsertrequestLogTracker("For wallet used Unmached both foreign currency Values totalForeignCurrencyAmount:" + totalForeignCurrencyAmount + " and amountInForeignCurrency:" + sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                return false;
                            }
                            else
                            {
                                CompanyInfo.InsertrequestLogTracker("For wallet used Matched both foreign currency Values totalForeignCurrencyAmount:" + totalForeignCurrencyAmount + " and amountInForeignCurrency:" + sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                        }

                        if (walletApplyOn != 4)
                        {
                            CompanyInfo.InsertrequestLogTracker(" Calculated Amt:" + Math.Round((calculatedAmount), 2) + "  and sendAmt:" + Math.Round(transferCost, 2), 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            if (Math.Round(calculatedAmount, 2) != Math.Round(transferCost, 2))
                            {
                                CompanyInfo.InsertrequestLogTracker("For wallet used Unmached both base currency Values ", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                return false;
                            }
                            else
                            {
                                CompanyInfo.InsertrequestLogTracker("For wallet used Mached both base currency Values ", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                            totalForeignCurrencyAmount = (amountgbp * systemRate);
                            CompanyInfo.InsertrequestLogTracker("Foreign currency  amountgbp:" + amountgbp  , 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            
                            CompanyInfo.InsertrequestLogTracker("Foreign currency  (int)totalForeignCurrencyAmount:" + (int)totalForeignCurrencyAmount + " and (int)sendamountInForeignCurrency " + (int)sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                            if ((int)totalForeignCurrencyAmount != (int)sendamountInForeignCurrency)
                            {
                                CompanyInfo.InsertrequestLogTracker("For wallet used Unmached both foreign currency Values totalForeignCurrencyAmount:" + totalForeignCurrencyAmount + " and amountInForeignCurrency:" + sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                return false;
                            }
                            else
                            {
                                CompanyInfo.InsertrequestLogTracker("For wallet used Matched both foreign currency Values totalForeignCurrencyAmount:" + totalForeignCurrencyAmount + " and amountInForeignCurrency:" + sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            }
                        }

                    }
                    #endregion wallet used while transaction

                    #region used discount coupoun code 
                    if (sendDiscountID > 0)
                    {
                        if (li1_ != null && li1_.Rows.Count > 0)
                        {
                            foreach (DataRow dr in li1_.Rows)
                            {
                                systemDiscountId = Convert.ToInt32(dr["ID"]);
                                if (sendDiscountID == systemDiscountId)
                                {
                                    systemDiscountTypeID = Convert.ToInt32(dr["Discounttype_ID"]);
                                    systemDiscountAmountType = Convert.ToInt32(dr["Amounttype_ID"]);
                                    systemDiscountCode = Convert.ToString(dr["Discount_Code"]);
                                    systemDiscountValue = Convert.ToDouble(dr["Discount_Value"]);
                                    systemMinAmt = Convert.ToDouble(dr["Min_TrnAmount"]);
                                    systemMaxAmt = Convert.ToDouble(dr["Max_TrnAmount"]);
                                    break;
                                }
                            }
                        }

                        string vv = "systemDiscountId=" + systemDiscountId+ " & systemDiscountTypeID="+ systemDiscountTypeID;
                        vv += " & systemDiscountAmountType=" + systemDiscountAmountType + " & systemDiscountCode=" + systemDiscountCode + " & systemDiscountValue=" + systemDiscountValue;
                        CompanyInfo.InsertrequestLogTracker("Discount Code All Values " + vv, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                        if (sendDiscountCode != systemDiscountCode)
                        {
                            CompanyInfo.InsertrequestLogTracker("Discount Code Invalid : " + sendDiscountCode, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            return false;
                        }
                        else if (systemDiscountId != sendDiscountID)
                        {
                            CompanyInfo.InsertrequestLogTracker("Discount Id Invalid : " + sendDiscountID, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            return false;
                        }
                        if (amountgbp >= systemMinAmt && amountgbp <= systemMaxAmt)
                        { }
                        else
                        {
                            CompanyInfo.InsertrequestLogTracker(amountgbp + " sending amount not between  : " + systemMinAmt + " and systemMaxAmt:" + systemMaxAmt, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            return false;
                        }

                        if ( systemDiscountTypeID == 1)
                        {   //Fee Against
                            if (systemDiscountAmountType == 1)
                            {   // Percentage
                                CompanyInfo.InsertrequestLogTracker("Control inside Fee Against Percentage", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                double calculatePercent = (systemDiscountValue / 100) * systemTransferFees;
                                systemTransferFees = Math.Round((calculatePercent), 2); // Total Fees Applied here

                                if(systemDiscountValue >= 100) { systemTransferFees = 0.00;  }

                                double calculateSendAmt = transferCost - systemTransferFees;
                                if((int)calculateSendAmt != (int)amountgbp)
                                {
                                    CompanyInfo.InsertrequestLogTracker("Fee Against Percentage DiscountCode Used Unmached calculateSendAmt:" + amountgbp + " and amountgbp" + amountgbp, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                    return false;
                                }

                                double calculateReceivingAmt = (amountgbp + systemTransferFees) * systemRate;
                                totalForeignCurrencyAmount = calculateReceivingAmt;
                                if ((int)calculateReceivingAmt != (int)sendamountInForeignCurrency)
                                {
                                    CompanyInfo.InsertrequestLogTracker("Fee Against Percentage  Unmached calculateReceivingAmt3:" + calculateReceivingAmt + " and sendamountInForeignCurrency" + sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                    return false;
                                }

                            }
                            else if (systemDiscountAmountType == 2)
                            {   // Fixed Amount

                                CompanyInfo.InsertrequestLogTracker("Control inside Fee Against Fixed Amount", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                systemTransferFees =  systemTransferFees - systemDiscountValue  ;
                                if(systemTransferFees <= 0) { systemTransferFees = 0; }

                                double calculateReceivingAmt = (amountgbp + systemTransferFees) * systemRate;
                                totalForeignCurrencyAmount = calculateReceivingAmt;
                                if ((int)calculateReceivingAmt != (int)sendamountInForeignCurrency)
                                {
                                    CompanyInfo.InsertrequestLogTracker(" Unmached calculateReceivingAmt4:" + calculateReceivingAmt + " and sendamountInForeignCurrency" + sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                    return false;
                                }
                            }
                        }
                        else if (systemDiscountTypeID == 2)
                        {   //Amount Against
                            if (  systemDiscountAmountType == 1)
                            {   // Percentage
                                CompanyInfo.InsertrequestLogTracker("Control inside Amount Against Percentage", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                double calculatePercentAmt = (systemDiscountValue / 100) * amountgbp;
                                double amountgbpCalculate = Math.Round((amountgbp - calculatePercentAmt), 2) + systemTransferFees;

                                if(Math.Round(amountgbpCalculate,2) != Math.Round(transferCost, 2))
                                {
                                    CompanyInfo.InsertrequestLogTracker("Amount Against Percentage Unmached amountgbpCalculate:" + amountgbpCalculate + " and amountgbp" + amountgbp, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                    return false;
                                }
                                double calculateReceivingAmt = (amountgbp ) * systemRate;
                                totalForeignCurrencyAmount = calculateReceivingAmt;
                                if ((int)calculateReceivingAmt != (int)sendamountInForeignCurrency)
                                {
                                    CompanyInfo.InsertrequestLogTracker("Amount Against Percentage Unmached calculateReceivingAmt:" + calculateReceivingAmt + " and sendamountInForeignCurrency" + sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                    return false;
                                }

                            }
                            else if ( systemDiscountAmountType == 2)
                            {   // Fixed Amount
                                CompanyInfo.InsertrequestLogTracker("Control inside Amount Against Fixed Amount", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                double calculateAmounttoPay = Math.Round(((amountgbp - systemDiscountValue) + systemTransferFees),2);
                                if(calculateAmounttoPay != Math.Round(transferCost, 2))
                                {
                                    CompanyInfo.InsertrequestLogTracker("Amount Against Fixed Amt calculateAmounttoPay:" + calculateAmounttoPay + " and transferCost" + transferCost, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                }

                                double calculateReceivingAmt = amountgbp * systemRate;
                                totalForeignCurrencyAmount = calculateReceivingAmt;

                                CompanyInfo.InsertrequestLogTracker("Control inside Amount Against Fixed Amount totalForeignCurrencyAmount : "+ totalForeignCurrencyAmount, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                if ((int)calculateReceivingAmt != (int)sendamountInForeignCurrency)
                                {
                                    CompanyInfo.InsertrequestLogTracker("Amount Against Fixed Amt Unmached calculateReceivingAmt2:" + calculateReceivingAmt + " and sendamountInForeignCurrency" + sendamountInForeignCurrency, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                    return false;
                                }
                            }
                        }

                    }
                    #endregion used discount coupoun code 

                    #region if not wallet and not discount code used
                    if (walletID == 0 && sendDiscountID == 0)
                    {
                        amountgbp = Math.Round( (sendamountInForeignCurrency / exchangeRate ), 4);
                        totalForeignCurrencyAmount = amountgbp * systemRate;
                    }
                    #endregion if not wallet and not discount code used

                    string logValud = "systemRate=" + systemRate + " and systemofferRateFlag=" + systemofferRateFlag + " and totalForeignCurrencyAmount=" + totalForeignCurrencyAmount;
                    logValud += " and transferFees=" + transferFees + " and systemTransferFees=" + systemTransferFees;
                    CompanyInfo.InsertrequestLogTracker(logValud, 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                    CompanyInfo.InsertrequestLogTracker(" Sending foreign curr amt: "+ Math.Round(sendamountInForeignCurrency, 2) +" and calculated foreign current amt:  "+ Math.Round(totalForeignCurrencyAmount, 2), 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                    if (systemofferRateFlag == obj.offer_rate_flag && (int)totalForeignCurrencyAmount  == (int)sendamountInForeignCurrency  )
                    {
                        CompanyInfo.InsertrequestLogTracker("Mached Record", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                    }
                    else
                    {
                        if (Math.Abs(((int)totalForeignCurrencyAmount - (int)sendamountInForeignCurrency)) > 1)
                        {
                            CompanyInfo.InsertrequestLogTracker("Unmached Record", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            return false;
                        }
                        else if (Math.Abs(((int)totalForeignCurrencyAmount - (int)sendamountInForeignCurrency)) < -1)
                        {
                            CompanyInfo.InsertrequestLogTracker("Unmached Record", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            return false;
                        }
                        else
                        {
                            CompanyInfo.InsertrequestLogTracker("Mached Record", 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                        }
                    }


                }
                else
                {
                    return false;
                }


                return true;
            }
            catch (Exception egx)
            {
                CompanyInfo.InsertrequestLogTracker("checkValidTransactionCase Error: " + egx.ToString(), 0, 0, 0, 0, "checkValidTransactionCase", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                return false;
            }
        }

            public DataTable InsertTransaction_new(Model.Transaction obj, HttpContext context)
        {
            _srvTransactionContext = context;
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));

            bool lasttransactiontimeresult = checklasttransactiontime(Customer_ID, obj.Client_ID);
            bool validTransaction = checkValidTransactionCase(obj);

            if (!validTransaction)
            {
                string webstring = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build().GetSection("ConnectionStrings")["APIName"];
                webstring = webstring.ToLower();
                if (webstring.IndexOf("csremitmtapp", 0, StringComparison.OrdinalIgnoreCase) != -1  )
                {
                    /*DataTable dt_ = new DataTable();
                    return dt_;*/
                }
            }

            if (!lasttransactiontimeresult  && Customer_ID > 0)
            {
                string webstring = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build().GetSection("ConnectionStrings")["WEB_DB_CONN"];
                webstring = webstring.ToLower();
                if (webstring.IndexOf("csremit", 0, StringComparison.OrdinalIgnoreCase) != -1)
                {
                    DataTable dt_ = new DataTable();
                    return dt_;
                }               
            }

            string token = "";
            double totalBalance = 0.0;
            string SendMoneyToken = "";
            string RewardToken = "";
            DateTime sendhashexpire = DateTime.Now;
            string SOFdocupload = "";
            string check_validity = null;
            string returnPaysafecashBarcode = "";
            DateTime TransactionStartdate = Convert.ToDateTime("0001-01-01");
            MySqlCommand _cmdSession = new MySqlCommand("SetTransactionJourney");
            DataTable dt = new DataTable();
            string activitybeneflink = string.Empty;
            int cnt = 0;
            string tempComment = "";
            string linkActivity = "";
            DataTable Benef_limit = new DataTable();
            try
            {
                token = obj.tokenValue; //(context.Request.Headers["Authorization"]).Substring("Bearer ".Length);
                _cmdSession = new MySqlCommand("SetTransactionJourney");
                _cmdSession.CommandType = CommandType.StoredProcedure;
                _cmdSession.Parameters.AddWithValue("_Token", token);
                _cmdSession.Parameters.AddWithValue("_SendMoneyToken", SendMoneyToken);
                _cmdSession.Parameters.AddWithValue("_RewardToken", RewardToken);
                _cmdSession.Parameters.AddWithValue("_SOFdocupload", SOFdocupload);
                _cmdSession.Parameters.AddWithValue("_sendmoneyhashexpire", sendhashexpire);
                _cmdSession.Parameters.AddWithValue("_TransactionStartdate", TransactionStartdate);
                _cmdSession.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                DataTable journerydata = db_connection.ExecuteQueryDataTableProcedure(_cmdSession);
                if (journerydata.Rows.Count > 0)
                {
                    if (journerydata.Rows[0]["SendMoneyToken"] != DBNull.Value)
                    {
                        SendMoneyToken = Convert.ToString(journerydata.Rows[0]["SendMoneyToken"]);
                    }
                    if (journerydata.Rows[0]["RewardToken"] != DBNull.Value)
                    {
                        RewardToken = Convert.ToString(journerydata.Rows[0]["RewardToken"]);
                    }
                    if (journerydata.Rows[0]["SOFdocupload"] != DBNull.Value)
                    {
                        SOFdocupload = Convert.ToString(journerydata.Rows[0]["SOFdocupload"]);
                    }
                    if (journerydata.Rows[0]["sendmoneyhashexpire"] != DBNull.Value)
                    {
                        sendhashexpire = Convert.ToDateTime(journerydata.Rows[0]["sendmoneyhashexpire"]);
                    }
                    if (journerydata.Rows[0]["TransactionStartdate"] != DBNull.Value)
                    {
                        TransactionStartdate = Convert.ToDateTime(journerydata.Rows[0]["TransactionStartdate"]);
                    }
                    if (journerydata.Rows[0]["chk_validity"] != DBNull.Value)
                    {
                        check_validity = Convert.ToString(journerydata.Rows[0]["chk_validity"]);
                    }

                }
            }
            catch (Exception ex) { }
            try
            {
                int pid_avg = 2;
                string Cust_ReferanceNo = "";

                dt.Columns.Add("Status", typeof(int));
                dt.Columns.Add("Refno", typeof(string));
                dt.Columns.Add("CustRefno", typeof(string)); dt.Columns.Add("Transaction_ID", typeof(string)); dt.Columns.Add("gcc_pinnumber", typeof(string));
                int chk_transaction_status = 1;

                MySqlCommand _cmd_comment = new MySqlCommand("AddCustomerComments");
                string cust_Comment = "";
                string bbd = "";
                if (obj.PaymentType_ID != null && obj.PaymentType_ID != 0)
                {
                    obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID, _srvTransactionContext);

                    /*string stringtohash = "myMTSHashingStarts" + obj.Beneficiary_ID + obj.Customer_ID + obj.AmountInGBP + obj.AmountInPKR + obj.Transfer_Fees +
                        obj.Exchange_Rate + obj.PaymentDepositType_ID + obj.PaymentType_ID + obj.DeliveryType_Id + "myMTSHashingEnds";
                    string chkhash = CompanyInfo.GetHash(stringtohash);
                    chkhash = chkhash + "sendmoneystep2.5passedsendmoneystep3passed";//check if send money details and review step passed
                    string sendmoneyhash = Convert.ToString(SendMoneyToken);
                    if (sendmoneyhash != chkhash)//sendmoneyhash != null && sendmoneyhash != "" && 
                    {
                        CompanyInfo.InsertActivityLogDetails("App - Invalid Data or Bad Request.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                        dt.Rows.Add(7, "Invalid Data or Bad Request. Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                        //return invalid or mismatched request
                    }
                    DateTime sendmoneyhashexpire = (DateTime)(sendhashexpire);
                    if (sendmoneyhash == chkhash && sendmoneyhashexpire < Convert.ToDateTime(obj.Record_Insert_DateTime))// && sendmoneyhashexpire != null
                    {
                        CompanyInfo.InsertActivityLogDetails("App - Transaction Timeout.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                        dt.Rows.Add(7, "Transaction Timeout. Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                        //return - link expired
                    }
                    string rewardtoken = Convert.ToString(RewardToken);
                    if ((obj.Wallet_Currency_type == 1 && obj.Wallet_Perm == 0 && rewardtoken != (obj.Wallet_Amount.ToString("N2") + "" + obj.Transfer_Cost.ToString("N2")))
                        || obj.Discount_Perm == 0 && rewardtoken != (obj.Discount_Amount.ToString("N2") + "" + obj.Transfer_Cost.ToString("N2")))
                    {
                        CompanyInfo.InsertActivityLogDetails("App - Invalid Reward Data or Bad Request.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTemp", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                        dt.Rows.Add(7, "Invalid Data or Bad Request.  Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    }
                    if ((obj.Wallet_Currency_type == 2 && obj.Wallet_Perm == 0 && rewardtoken != (obj.Wallet_Amount.ToString("N2") + "" + obj.transfer_cost_foreign.ToString("N2"))))
                    {
                        CompanyInfo.InsertActivityLogDetails("App - Invalid Reward Data or Bad Request.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTemp", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                        dt.Rows.Add(7, "Invalid Data or Bad Request.  Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    }*/

                    using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                    {
                        if (con.State != ConnectionState.Open)
                            con.Open();


                        #region checklimits
                        DateTime dateTime = Convert.ToDateTime(obj.Record_Insert_DateTime);
                        MySqlCommand _cmdl = new MySqlCommand("GetPermissions");
                        _cmdl.CommandType = CommandType.StoredProcedure;
                        _cmdl.Parameters.AddWithValue("_whereclause", "");
                        _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        DataTable dttp = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                        //Check Daily Transfer Count perm
                        int chkdailycount = 1;
                        DataRow[] dr = dttp.Select("PID=59");
                        if (dr.Count() > 0)
                        {
                            foreach (DataRow drr in dr)
                            {
                                chkdailycount = Convert.ToInt32(drr["Status_ForCustomer"]);
                            }
                        }
                        //int CheckAMlForEveryTransaction = Convert.ToInt32(permissiondb.Rows[0]["Status"]);
                        int CheckAMlForEveryTransaction = 1;
                        DataRow[] dr1 = dttp.Select("PID=190");
                        if (dr1.Count() > 0)
                        {
                            foreach (DataRow drr in dr1)
                            {
                                CheckAMlForEveryTransaction = Convert.ToInt32(drr["Status_ForCustomer"]);
                            }
                        }


                        //Check daily limit perm
                        int chkdailylimit = 1;
                        dr = dttp.Select("PID=26");
                        if (dr.Count() > 0)
                        {
                            foreach (DataRow drr in dr)
                            {
                                chkdailylimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                            }
                        }
                        DataTable dds = null;
                        if (chkdailylimit == 0 || chkdailycount == 0)
                        {
                            _cmdl = new MySqlCommand("customer_transferamount_minmax");
                            _cmdl.CommandType = CommandType.StoredProcedure;
                            _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                            dds = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                        }
                        //Check Daily Transfer Count
                        if (chkdailycount == 0)
                        {
                            if (dds.Rows.Count > 0)
                            {
                                int TotalDailyTransfer_count = Convert.ToInt32(dds.Rows[0]["Daily_Transfer_Count"]);
                                _cmdl = new MySqlCommand("CustTotal_Amount");
                                _cmdl.CommandType = CommandType.StoredProcedure;
                                _cmdl.Parameters.AddWithValue("_From_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                                _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                _cmdl.Parameters.AddWithValue("_To_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                                _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                                DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                                if ((sd.Rows.Count + 1) > TotalDailyTransfer_count)
                                {
                                    string notification_icon = "tranfer-limit-exceeded.jpg";
                                    string notification_message = "<span class='cls-admin'>Daily transfer count <strong class='cls-cancel'>reached. Customer is on confirmation page.</strong></span><span class='cls-customer'></span>";
                                    _ = Task.Run(() => CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0, _srvTransactionContext));
                                    //daily_transfer_count = 1;// count exceeded
                                    //daily_transfer_msg = "We are unable to process your transfer request at the moment. Please contact Support Team with your transfer request.";
                                    //transaction.Commit();
                                    dt.Rows.Add(4, "Transaction Failed. Your daily transfer count limit reached.", Cust_ReferanceNo, "");
                                    return dt;
                                }
                            }
                        }
                        ////Check daily limit 
                        //if (chkdailylimit == 0)
                        //{
                        //    if (dds.Rows.Count > 0)
                        //    {
                        //        double Daily_Transfer_Limit = Convert.ToDouble(dds.Rows[0]["Daily_Transfer_Limit"]);
                        //        //get todays total transaction amount
                        //        DateTime From_Date = dateTime.Date;
                        //        DateTime To_Date = dateTime.Date;
                        //        _cmdl = new MySqlCommand("CustTotal_Amount");
                        //        _cmdl.CommandType = CommandType.StoredProcedure;
                        //        _cmdl.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                        //        _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        //        _cmdl.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                        //        _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        //        _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                        //        DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);

                        //        double total = 0;
                        //        if (sd.Rows.Count > 0)
                        //        {
                        //            for (int j = 0; j < sd.Rows.Count; j++)
                        //            {
                        //                double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                        //                double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                        //                total = total + AmountInGBP + fees;
                        //            }
                        //        }

                        //        if ((total + obj.AmountInGBP) > Daily_Transfer_Limit)
                        //        {
                        //            string notification_icon = "tranfer-limit-exceeded.jpg";
                        //            string notification_message = "<span class='cls-admin'>Daily transfer limit<strong class='cls-cancel'> reached. Customer is on confirmation page.</strong></span><span class='cls-customer'></span>";
                        //            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0);                                
                        //            dt.Rows.Add(4, "Transaction Failed. Your daily Limit is exceeded.", Cust_ReferanceNo, "");
                        //            return dt;
                        //        }
                        //    }
                        //}
                        #endregion checklimits

                        MySqlCommand cmd3 = new MySqlCommand("customer_details_by_param");//Customer_getallcustdetails
                        cmd3.CommandType = CommandType.StoredProcedure;
                        cmd3.Connection = con;
                        string _whereclause = " and cr.Client_ID=" + obj.Client_ID;
                        //if (Customer_ID > 0)
                        //{
                        _whereclause = " and cr.Customer_ID=" + Customer_ID;
                        //}
                        cmd3.Parameters.AddWithValue("_whereclause", _whereclause);
                        cmd3.Parameters.AddWithValue("_SecurityKey", CompanyInfo.SecurityKey());
                        DataTable ct = db_connection.ExecuteQueryDataTableProcedure(cmd3);

                        //Get Receiver Details
                        MySqlCommand cmd2 = new MySqlCommand("Beneficiary_Search");//SP_Save_Beneificiary_BankDetails
                        cmd2.CommandType = CommandType.StoredProcedure;
                        cmd2.Connection = con;
                        string _where = " and bb.Beneficiary_ID=" + obj.Beneficiary_ID + " and bb.Client_ID=" + obj.Client_ID + "";
                        if (obj.Benf_BankDetails_ID != 0) //vyankatesh 11-12-24
                        {
                            _where = _where + " and ee.BBDetails_ID = " + obj.Benf_BankDetails_ID;
                        }
                        cmd2.Parameters.AddWithValue("_whereclause", _where);
                        DataTable bt = db_connection.ExecuteQueryDataTableProcedure(cmd2);

                        string Customer_name = Convert.ToString(ct.Rows[0]["fullname1"]);

                        obj.Beneficiary_Name = Convert.ToString(bt.Rows[0]["Beneficiary_Name"]);

                        obj.TransactionStatus_ID = 1;
                        try
                        {
                            MySqlCommand _cmd = new MySqlCommand("GetIDScanResultOnPerm");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_whereclause", " and dd.Customer_ID=" + Customer_ID);
                            _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                            _cmd.Parameters.AddWithValue("_Branch_ID", obj.Branch_ID);
                            DataTable ids = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                            if (ids.Rows.Count > 0)
                            {
                                if (Convert.ToInt32(ids.Rows[0]["FrontResult"]) > 0 || Convert.ToInt32(ids.Rows[0]["LivenessResult"]) > 0 || Convert.ToInt32(ids.Rows[0]["FaceMatchResult"]) > 0)
                                {
                                    cnt++;
                                    obj.TransactionStatus_ID = 6;// Transaction should be on Hold for Invalid IDs
                                    #region transfercomment
                                    cust_Comment += "Hold Reason: Invalid ID Scan <br/>";
                                    int TransferPerk_Flag = 1; //remind me flag
                                    obj.Delete_Status = 0;
                                    int status = 0;

                                    //_cmd_comment.CommandType = CommandType.StoredProcedure;
                                    //_cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                    //_cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                    //_cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                    //_cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_Status", 0);

                                    //_cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                    //_cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                    chk_transaction_status = 0;
                                    #endregion
                                }
                            }
                            #region check_sanction
                            int chk_reponse_benef = 10; int chk_reponse_cust = 10;
                            string Activity1 = "start Aml and Kyc";
                            // if (obj.TransactionStatus_ID != 6)
                            {
                                Activity1 += " BA:" + Convert.ToInt32(obj.sanction_responce_bene_aml) + "," + obj.sanction_responce_bene_aml +
                                " BK :" + Convert.ToInt32(obj.sanction_responce_bene_kyc) + "," + obj.sanction_responce_bene_kyc +
                               " CA :" + Convert.ToInt32(obj.sanction_responce_cust_aml) + "," + obj.sanction_responce_cust_aml +
                               " CK :" + Convert.ToInt32(obj.sanction_responce_cust_kyc) + "," + obj.sanction_responce_cust_kyc;
                                if (obj.sanction_responce_bene_aml != 10 && obj.sanction_responce_bene_aml != 4 && obj.sanction_responce_bene_aml != 0)
                                {
                                    chk_reponse_benef = obj.sanction_responce_bene_aml;
                                }
                                else if (obj.sanction_responce_bene_kyc != 10 && obj.sanction_responce_bene_kyc != 4 && obj.sanction_responce_bene_kyc != 0)
                                {
                                    chk_reponse_benef = obj.sanction_responce_bene_kyc;
                                }
                                else if (obj.sanction_responce_cust_aml != 10 && obj.sanction_responce_cust_aml != 4 && obj.sanction_responce_cust_aml != 0)
                                {
                                    chk_reponse_cust = obj.sanction_responce_cust_aml;
                                }
                                else if (obj.sanction_responce_cust_kyc != 10 && obj.sanction_responce_cust_kyc != 4 && obj.sanction_responce_cust_kyc != 0)
                                {
                                    chk_reponse_cust = obj.sanction_responce_cust_kyc;
                                }
                                Activity1 += " chk_reponse_cust " + chk_reponse_cust;
                                Activity1 += " chk_reponse_benef " + chk_reponse_benef;

                                if (chk_reponse_cust != 10 && chk_reponse_cust != 4 && chk_reponse_cust != 0)
                                {
                                    tempComment = cust_Comment;
                                    #region transfercomment
                                    obj.TransactionStatus_ID = 6;
                                    if (chk_reponse_cust == 1)
                                    {
                                        cnt++;
                                        cust_Comment = "Hold Reason: Customer found in PEP Sanctions list";
                                    }
                                    if (chk_reponse_cust == 2)
                                    {
                                        cnt++;
                                        cust_Comment = "Hold Reason: Customer found in International Sanctions list";
                                    }
                                    if (chk_reponse_cust == 3)
                                    {
                                        cnt++;
                                        cust_Comment = "Hold Reason: Customer found in PEP and International Sanctions list";
                                    }
                                    Activity1 += " cust_Comment " + cust_Comment;
                                    int TransferPerk_Flag = 1; //remind me flag
                                    obj.Delete_Status = 0;
                                    int status = 0;

                                    //_cmd_comment.CommandType = CommandType.StoredProcedure;
                                    //_cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                    //_cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                    //_cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                    //_cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_Status", 2);

                                    //_cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                    //_cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                    chk_transaction_status = 0;
                                    cust_Comment = tempComment + cust_Comment + " <br/>";
                                    #endregion
                                }

                                else if (chk_reponse_benef != 10 && chk_reponse_benef != 4 && chk_reponse_benef != 0)
                                {
                                    tempComment = cust_Comment;

                                    #region transfercomment
                                    obj.TransactionStatus_ID = 6;
                                    if (chk_reponse_benef == 1)
                                    {
                                        cnt++;
                                        cust_Comment = "Hold Reason: Beneficiary found in PEP Sanctions list";
                                    }
                                    if (chk_reponse_benef == 2)
                                    {
                                        cnt++;
                                        cust_Comment = "Hold Reason: Beneficiary found in International Sanctions list";
                                    }
                                    if (chk_reponse_benef == 3)
                                    {
                                        cnt++;
                                        cust_Comment = "Hold Reason: Beneficiary found in PEP and International Sanctions list";
                                    }
                                    Activity1 += " cust_Comment benf " + cust_Comment;

                                    int TransferPerk_Flag = 1; //remind me flag
                                    obj.Delete_Status = 0;
                                    int status = 0;

                                    //_cmd_comment.CommandType = CommandType.StoredProcedure;
                                    //_cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                    //_cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                    //_cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                    //_cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                    //_cmd_comment.Parameters.AddWithValue("_Status", 2);

                                    //_cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                    //_cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                    chk_transaction_status = 0;
                                    cust_Comment = tempComment + cust_Comment + " <br/>";

                                    #endregion
                                }
                            }
                            _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(Activity1 + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Transfer-check sanctions", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext));

                            #endregion

                            // if (obj.TransactionStatus_ID != 6)
                            {
                                obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID,_srvTransactionContext);
                                _cmd = new MySqlCommand("GetPermissions");
                                _cmd.CommandType = CommandType.StoredProcedure;

                                _cmd.Parameters.AddWithValue("_whereclause", " and PID in (79 , 81 , 82 , 83, 94, 128, 154, 157, 223,183,184,206,213);");
                                _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                //_cmd.Parameters.AddWithValue("_Branch_ID", t.CB_ID);
                                DataTable ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                if (ids1.Rows.Count > 0)
                                {
                                    int hold_sanc_customer = 1;
                                    int hold_sanc_beneficiary = 1;
                                    int hold_beneflink_mob_bankDetails = 1;
                                    int hold_beneflinkedtrnsaction_limitexce = 1;
                                    dr = ids1.Select("PID=183");
                                    if (dr.Count() > 0)
                                    {
                                        foreach (DataRow drr in dr)
                                        {
                                            hold_sanc_customer = Convert.ToInt32(drr["Status_ForCustomer"]);// Hold transaction of customer found in sanction list
                                        }
                                    }
                                    dr = ids1.Select("PID=184");
                                    if (dr.Count() > 0)
                                    {
                                        foreach (DataRow drr in dr)
                                        {
                                            hold_sanc_beneficiary = Convert.ToInt32(drr["Status_ForCustomer"]);// Hold transaction of beneficiary found in sanction list
                                        }
                                    }
                                    dr = ids1.Select("PID=213");
                                    if (dr.Count() > 0)
                                    {
                                        foreach (DataRow drr in dr)
                                        {
                                            hold_beneflinkedtrnsaction_limitexce = Convert.ToInt32(drr["Status_ForCustomer"]);// Hold transaction of beneficiary if limit exceed in 90 days
                                        }
                                    }
                                    pid_avg = Convert.ToInt32(ids1.Rows[5]["Status_ForCustomer"]);
                                    //if (Convert.ToInt32(ids1.Rows[0]["Status_ForCustomer"]) == 0)
                                    //{
                                    //MySqlTransaction transaction;
                                    if (con.State != ConnectionState.Open)
                                        con.Open();
                                    //transaction = cn.BeginTransaction(IsolationLevel.ReadCommitted);

                                    String Record_Insert_Date = obj.Record_Insert_DateTime.Substring(0, 10);
                                    _cmd = new MySqlCommand("GetTransactions", con);
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_pid80", ids1.Rows[0]["Status_ForCustomer"]);
                                    _cmd.Parameters.AddWithValue("_pid81", ids1.Rows[1]["Status_ForCustomer"]);
                                    _cmd.Parameters.AddWithValue("_pid82", ids1.Rows[2]["Status_ForCustomer"]);
                                    _cmd.Parameters.AddWithValue("_pid94", ids1.Rows[4]["Status_ForCustomer"]); _cmd.Parameters.AddWithValue("_ptype_id", obj.PaymentType_ID); //191222
                                    _cmd.Parameters.AddWithValue("_pid154", ids1.Rows[6]["Status_ForCustomer"]);//vyank
                                    _cmd.Parameters.AddWithValue("_pid157", ids1.Rows[7]["Status_ForCustomer"]);//vyank
                                    _cmd.Parameters.AddWithValue("_pid183", hold_sanc_customer);// Hold transaction of customer found in sanction list
                                    _cmd.Parameters.AddWithValue("_pid184", hold_sanc_beneficiary);// Hold transaction of beneficiary found in sanction list

                                    _cmd.Parameters.AddWithValue("_Beneficiary_ID", Convert.ToInt32(obj.Beneficiary_ID));

                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    _cmd.Parameters.AddWithValue("_date", Record_Insert_Date);
                                    _cmd.Parameters.Add(new MySqlParameter("_existTran1", MySqlDbType.Int32));
                                    _cmd.Parameters["_existTran1"].Direction = ParameterDirection.Output;
                                    _cmd.Parameters.Add(new MySqlParameter("_existTran2", MySqlDbType.Int32));
                                    _cmd.Parameters["_existTran2"].Direction = ParameterDirection.Output;
                                    _cmd.Parameters.Add(new MySqlParameter("_existTran3", MySqlDbType.Int32));
                                    _cmd.Parameters["_existTran3"].Direction = ParameterDirection.Output;

                                    _cmd.Parameters.Add(new MySqlParameter("_newalert", MySqlDbType.Int32));
                                    _cmd.Parameters["_newalert"].Direction = ParameterDirection.Output;
                                    _cmd.Parameters.Add(new MySqlParameter("_alertmsg", MySqlDbType.String));
                                    _cmd.Parameters["_alertmsg"].Direction = ParameterDirection.Output;

                                    _cmd.ExecuteNonQuery();
                                    int Existtran1 = Convert.ToInt32(_cmd.Parameters["_existTran1"].Value);
                                    int Existtran2 = Convert.ToInt32(_cmd.Parameters["_existTran2"].Value);
                                    int Existtran3 = Convert.ToInt32(_cmd.Parameters["_existTran3"].Value);

                                    int newalert = Convert.ToInt32(_cmd.Parameters["_newalert"].Value);//new id upload alert
                                    string alertmsg = Convert.ToString(_cmd.Parameters["_alertmsg"].Value);

                                    //t.CustomerName = Convert.ToString(dictObjMain["cust_name"]);
                                    //t.Beneficiary_Name = Convert.ToString(dictObjMain["benf_name"]);
                                    string whereclause_new = "";
                                    string phone = ""; string bank_details = "";

                                    whereclause_new = " and date(aa.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "'";
                                    whereclause_new = whereclause_new + " and (concat(cc.First_Name,' ',case when (cc.Middle_Name is not null and cc.Middle_Name!='') then concat(cc.Middle_Name,' ') else '' end,'',cc.Last_Name) like '%" + Customer_name + "%'";

                                    //whereclause_new = whereclause_new + " and   (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' )";
                                    //+ " OR   (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' ))";
                                    dr = ids1.Select("PID=206");//check beneficiary mobile number and bank details in link transaction.
                                    if (dr.Count() > 0)
                                    {
                                        foreach (DataRow drr in dr)
                                        {
                                            hold_beneflink_mob_bankDetails = Convert.ToInt32(drr["Status_ForCustomer"]);
                                        }
                                    }
                                    linkActivity += " Permission beneflink_mob_bankDetails Status :" + hold_beneflink_mob_bankDetails;
                                    if (hold_beneflink_mob_bankDetails == 0)
                                    {
                                        //Get Receiver Details
                                        MySqlCommand _cmdbenf = new MySqlCommand("Beneficiary_Search");
                                        _cmdbenf.CommandType = CommandType.StoredProcedure;
                                        string whereclause = " ";
                                        if (obj.Beneficiary_ID > 0)
                                        {
                                            whereclause = whereclause + " and bb.Beneficiary_ID=" + obj.Beneficiary_ID + "";
                                        }
                                        _cmdbenf.Parameters.AddWithValue("_whereclause", whereclause);
                                        DataTable bt1 = db_connection.ExecuteQueryDataTableProcedure(_cmdbenf);

                                        if (bt1.Rows.Count >= 0)
                                        {
                                            if (bt1.Rows[0]["Beneficiary_Mobile"] != "" && bt1.Rows[0]["Beneficiary_Mobile"] != null)
                                            {
                                                linkActivity += ", Beneficiary_Mobile :" + bt1.Rows[0]["Beneficiary_Mobile"];
                                                phone = phone + " OR (Beneficiary_Mobile ='" + bt1.Rows[0]["Beneficiary_Mobile"] + "' )";
                                            }
                                            if ((bt1.Rows[0]["BBank_ID"] != "" && bt1.Rows[0]["BBank_ID"] != null && Convert.ToString(bt1.Rows[0]["BBank_ID"]) != "0") || (bt1.Rows[0]["Account_Number"] != null && bt1.Rows[0]["Account_Number"] != ""))
                                            {
                                                linkActivity += ", Beneficiary Bank ID : " + bt1.Rows[0]["BBank_ID"] + ", Beneficiary Bank Account Number : " + bt1.Rows[0]["Account_Number"];
                                                bank_details = " OR (";
                                                int o = 0;
                                                if ((bt1.Rows[0]["BBank_ID"] != "" && bt1.Rows[0]["BBank_ID"] != null && bt1.Rows[0]["BBank_ID"] != "0"))
                                                {

                                                    bank_details = bank_details + "  (BBank_ID ='" + bt1.Rows[0]["BBank_ID"] + "' )";
                                                }
                                                if ((bt1.Rows[0]["Account_Number"] != "" && bt1.Rows[0]["Account_Number"] != null))
                                                {
                                                    if (o != 0)
                                                    {
                                                        bank_details = bank_details + " (Account_Number ='" + bt1.Rows[0]["Account_Number"] + "' )";
                                                    }
                                                    else
                                                    {
                                                        bank_details = bank_details + " and (Account_Number ='" + bt1.Rows[0]["Account_Number"] + "' )";
                                                    }
                                                }
                                                bank_details = bank_details + " )";
                                            }
                                        }
                                        whereclause_new = whereclause_new + "  OR ((Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%')" + phone + bank_details + "))";
                                    }
                                    else
                                    {
                                        whereclause_new = whereclause_new + "  OR   (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' ))";
                                    }
                                    linkActivity += ", whereclause_new " + whereclause_new;
                                    //int cnt = 0;
                                    var benfwcnt = 0;
                                    try
                                    {
                                        int hold_link_transaction = 1;
                                        dr = ids1.Select("PID=83"); //hold linked transaction
                                        if (dr.Count() > 0)
                                        {
                                            foreach (DataRow drr in dr)
                                            {
                                                hold_link_transaction = Convert.ToInt32(drr["Status_ForCustomer"]);
                                            }
                                        }

                                        linkActivity += ", Link transaction Perm Status :" + hold_link_transaction;
                                        if (hold_link_transaction == 0)
                                        {
                                            MySqlCommand _cmd1 = new MySqlCommand("sp_select_linked_txn_rpt");
                                            _cmd1.CommandType = CommandType.StoredProcedure;
                                            _cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                            _cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                            _cmd1.Parameters.AddWithValue("_whereclause", whereclause_new);
                                            _cmd1.Parameters.AddWithValue("_conditionclause", "inner join user_master um on um.User_ID=aa.User_ID");
                                            _cmd1.Parameters.AddWithValue("_selectclause", "concat('') as pocname,");
                                            //_cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)<> 1 and Count(cr1.Last_Name)<>1 and Count(ifnull(cr1.Middle_Name,0))<>1) AS a)");
                                            _cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)>= 1 and Count(cr1.Last_Name)>=1 and Count(ifnull(cr1.Middle_Name,0))>=1) AS a)");
                                            _cmd1.Parameters.AddWithValue("_cust_clause", "and cc.Customer_ID=aa.Customer_ID");
                                            _cmd1.Parameters.AddWithValue("_benf_clause", "");
                                            _cmd1.Parameters.AddWithValue("_order_by_value", "Sender,aa.Customer_ID ");
                                            ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd1);

                                            if (ids1.Rows.Count > 0 /*&& cnt == 0*/)
                                            {
                                                linkActivity += ", Link transaction Match found count :" + ids1.Rows.Count;
                                                obj.TransactionStatus_ID = 6;
                                                cnt++;
                                                var custwcnt = 0; var benfphonewcnt = 0; var benfbankwcnt = 0;
                                                try
                                                {
                                                    var custwhere = "Sender like '%" + Customer_name.Trim() + "%'";
                                                    var benfwhere = "Reciever like '%" + obj.Beneficiary_Name.Trim() + "' or Reciever like '" + obj.Beneficiary_Name.Trim() + "%'";

                                                    var phonewhere = phone;
                                                    var bankewhere = bank_details;

                                                    DataRow[] drs = ids1.Select(custwhere);
                                                    if (drs.Count() > 0)
                                                    {
                                                        custwcnt++;
                                                    }
                                                    drs = ids1.Select(benfwhere);
                                                    if (drs.Count() > 0)
                                                    {
                                                        benfwcnt++;
                                                    }
                                                    if (phonewhere != "")
                                                    {
                                                        phonewhere = phonewhere.Replace("OR", "");
                                                        drs = ids1.Select(phonewhere);
                                                        if (drs.Count() > 0)
                                                        {
                                                            benfphonewcnt++;
                                                        }
                                                    }
                                                    if (bankewhere != "")
                                                    {
                                                        bankewhere = bankewhere.Replace("OR", "");

                                                        drs = ids1.Select(bankewhere);
                                                        if (drs.Count() > 0)
                                                        {
                                                            benfbankwcnt++;
                                                        }
                                                    }
                                                }
                                                catch (Exception _ex) { }

                                                linkActivity += ", Link transaction details match status : cust match :" + custwcnt + ", benf match :" + benfwcnt + ",benf mob match :" + benfphonewcnt + ",benf bankdetails match :" + benfbankwcnt;

                                                if (custwcnt > 0 && benfwcnt > 0 && benfphonewcnt > 0 && benfbankwcnt > 0)
                                                {
                                                    cnt++;
                                                    cust_Comment += "Hold Reason: Customer And Beneficiary Linked transaction should be on hold <br/>";
                                                }
                                                else if (custwcnt > 0)
                                                {
                                                    cnt++;
                                                    cust_Comment += "Hold Reason: Customer Linked transaction should be on hold <br/>";
                                                }
                                                else if (benfwcnt > 0)
                                                {
                                                    cnt++;
                                                    cust_Comment += "Hold Reason: Beneficiary Linked transaction should be on hold <br/>";
                                                }
                                                else if (benfphonewcnt > 0)
                                                {
                                                    cnt++;
                                                    cust_Comment += "Hold Reason: Beneficiary Linked transaction should be on hold due to an exact match of mobile number <br/>";
                                                }
                                                else if (benfbankwcnt > 0)
                                                {
                                                    cnt++;
                                                    cust_Comment += "Hold Reason: Beneficiary Linked transaction should be on hold due to an exact match of bank name and bank account number <br/>";
                                                }
                                                else
                                                {
                                                    cnt++;
                                                    cust_Comment += "Hold Reason: Linked transaction should be on hold <br/>";
                                                }

                                                linkActivity += ", Link transaction Hold Reason :" + cust_Comment;

                                            }
                                        }
                                    }
                                    catch { }

                                    #region Beneficiary limit wise linkedTransaction Teeparam

                                    try
                                    {
                                        if (hold_beneflinkedtrnsaction_limitexce == 0)
                                        {
                                            //Get Beneficiary limit details

                                            string Whereclause_beneflink = "";
                                            DateTime dt1 = DateTime.Now.Date;
                                            DateTime From_Date = new DateTime(); DateTime To_Date = new DateTime();
                                            string From_Date1 = ""; string To_Date1 = "";

                                            using (MySqlCommand _cmdBenfl = new MySqlCommand("chk_Beneficiary_limit"))
                                            {
                                                _cmdBenfl.CommandType = CommandType.StoredProcedure;
                                                _cmdBenfl.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                                _cmdBenfl.Parameters.AddWithValue("_BeneficiaryId", obj.Beneficiary_ID);
                                                Benef_limit = db_connection.ExecuteQueryDataTableProcedure(_cmdBenfl);
                                            }
                                            activitybeneflink = "Beneficiary limit :- " + Benef_limit.Rows.Count;
                                            if (ids1.Rows.Count > 0 && benfwcnt > 0)
                                            {
                                                if (Benef_limit.Rows.Count != 0)
                                                {
                                                    int month = Convert.ToInt32(Benef_limit.Rows[0]["Days"]);
                                                    int transaction_Hold = Convert.ToInt32(Benef_limit.Rows[0]["Transhold_flag"]);
                                                    double amount = Convert.ToDouble(Benef_limit.Rows[0]["Amount"]);
                                                    int chk_last_90days_benef = Convert.ToInt32(Benef_limit.Rows[0]["Chk_last_days_lmt_benef"]);
                                                    //DateTime regdate_benef = Convert.ToDateTime(Benef_limit.Rows[0]["Start_Date"]);
                                                    DateTime regdate = Convert.ToDateTime(Benef_limit.Rows[0]["Start_Date"]);
                                                    //DateTime dt_benef = regdate_benef.Date.AddDays(month);
                                                    DateTime dt11 = regdate.Date.AddDays(month);
                                                    DateTime ddt_poa = regdate.Date.AddDays(month);
                                                    double totalbeneftxn = 0.0;
                                                    DateTime today = DateTime.Today;
                                                    DateTime last_90_days_dt = today.AddDays(-month);
                                                    if (transaction_Hold == 0)
                                                    {
                                                        if (chk_last_90days_benef == 0)
                                                        {
                                                            From_Date1 = last_90_days_dt.ToString("yyyy-MM-dd");
                                                            To_Date1 = today.ToString("yyyy-MM-dd");
                                                        }
                                                        else
                                                        {
                                                            if (dateTime.Date > dt11.Date)
                                                            {
                                                                string newstartdate = ""; string newenddate = "";
                                                                //Update Date to the Customer AML Limit
                                                                for (DateTime dd = dt11; dd <= dateTime.AddDays(month); dd = dd.AddDays(month))
                                                                {
                                                                    if (newstartdate == null || newstartdate == "")
                                                                    {
                                                                        if (dd.AddDays(month) >= DateTime.Now)
                                                                        {
                                                                            newstartdate = dd.ToString();
                                                                            From_Date = Convert.ToDateTime(newstartdate);
                                                                            To_Date = dd.AddDays(month);

                                                                            From_Date1 = From_Date.ToString("yyyy-MM-dd");
                                                                            To_Date1 = To_Date.ToString("yyyy-MM-dd");

                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                From_Date = regdate;
                                                                To_Date = dt11;

                                                                From_Date1 = From_Date.ToString("yyyy-MM-dd");
                                                                To_Date1 = To_Date.ToString("yyyy-MM-dd");
                                                            }
                                                        }
                                                        Whereclause_beneflink = " date(aa.Record_Insert_DateTime) between " + From_Date1 + " and " + To_Date1 + "";

                                                        if (hold_beneflink_mob_bankDetails == 0)
                                                        {
                                                            Whereclause_beneflink = Whereclause_beneflink + "  OR ((Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%')" + phone + bank_details + ")";
                                                        }
                                                        else
                                                        {
                                                            Whereclause_beneflink = Whereclause_beneflink + " OR (Beneficiary_Name  like '%" + obj.Beneficiary_Name.Trim() + "' or Beneficiary_Name  like '" + obj.Beneficiary_Name.Trim() + "%')";
                                                        }

                                                        MySqlCommand _cmd1_benflink = new MySqlCommand("Benef_linkedtrans_total");
                                                        _cmd1_benflink.CommandType = CommandType.StoredProcedure;
                                                        _cmd1_benflink.Parameters.AddWithValue("_whereclause", Whereclause_beneflink);
                                                        DataTable dt_beneflink = db_connection.ExecuteQueryDataTableProcedure(_cmd1_benflink);
                                                        activitybeneflink = activitybeneflink.Replace("'", "");
                                                        activitybeneflink = activitybeneflink + " Beneficiary linked transaction total :- " + Whereclause_beneflink + "Table COunt :- " + dt_beneflink.Rows.Count;

                                                        if (dt_beneflink.Rows.Count > 0)
                                                        {

                                                            totalbeneftxn = Convert.ToDouble(dt_beneflink.Rows[0]["AmountInGBP_Benef"]) + Convert.ToDouble(obj.AmountInGBP);
                                                            activitybeneflink = activitybeneflink + "Amount in GBP for linked transaction beneficiary :- " + totalbeneftxn;
                                                        }
                                                        //else
                                                        //{
                                                        //    totalbeneftxn = Convert.ToDouble(obj.AmountInGBP);
                                                        //    activitybeneflink = activitybeneflink + "Amount in GBP for linked transaction beneficiary :- " + totalbeneftxn;
                                                        //}

                                                        if (totalbeneftxn > amount)
                                                        {
                                                            cust_Comment += "Hold Reason: £" + amount + " limit exceeded within " + month + " days.</br>";
                                                        }
                                                    }
                                                    //CompanyInfo.InsertActivityLogDetails(activitybeneflink + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "");
                                                }
                                            }

                                        }


                                    }
                                    catch (Exception ex)
                                    {
                                        string stattus = (string)CompanyInfo.InsertErrorLogDetails(ex.Message.Replace("\'", "\\'"), obj.User_ID, "linked transaction beneficiary cl - Insert function  ", obj.Branch_ID, obj.Client_ID);

                                    }
                                    finally
                                    {
                                        activitybeneflink = activitybeneflink.Replace("'", "");
                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(activitybeneflink + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext));
                                    }


                                    #endregion



                                    //AML Check for Every Single transaction.
                                    double amountgbp = Convert.ToDouble(obj.AmountInGBP);
                                    if (CheckAMlForEveryTransaction == 0)
                                    {
                                        whereclause_new = " and date(aa.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "'";
                                        whereclause_new = whereclause_new + " and (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' )";

                                        using (MySqlCommand _cmd1 = new MySqlCommand("sp_select_linked_txn_rpt", con))
                                        {
                                            _cmd1.CommandType = CommandType.StoredProcedure;
                                            _cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                            _cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                            _cmd1.Parameters.AddWithValue("_whereclause", whereclause_new);
                                            _cmd1.Parameters.AddWithValue("_conditionclause", "inner join user_master um on um.User_ID=aa.User_ID");
                                            _cmd1.Parameters.AddWithValue("_selectclause", "concat('') as pocname,");
                                            //_cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + c2.Record_Insert_DateTime + "' and '" + c2.Record_Insert_DateTime + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)<> 1 and Count(cr1.Last_Name)<>1 and Count(ifnull(cr1.Middle_Name,0))<>1) AS a)");
                                            _cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)>= 1 and Count(cr1.Last_Name)>=1 and Count(ifnull(cr1.Middle_Name,0))>=1) AS a)");
                                            _cmd1.Parameters.AddWithValue("_cust_clause", "and cc.Customer_ID=aa.Customer_ID");
                                            _cmd1.Parameters.AddWithValue("_benf_clause", "");
                                            _cmd1.Parameters.AddWithValue("_order_by_value", "Sender,aa.Customer_ID ");
                                            ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd1);
                                        }
                                        if (amountgbp <= 5000)
                                        {
                                            if (ids1.Rows.Count > 0)
                                            {
                                                foreach (DataRow row in ids1.Rows)
                                                {

                                                    if (row["AmountInGBP"] != DBNull.Value)
                                                    {

                                                        totalBalance += Convert.ToDouble(row["AmountInGBP"]);
                                                    }
                                                }
                                                totalBalance = totalBalance + amountgbp;
                                            }
                                            else
                                            {
                                                totalBalance = Convert.ToDouble(obj.AmountInGBP);
                                            }
                                        }
                                        else
                                        {
                                            totalBalance = Convert.ToDouble(obj.AmountInGBP);
                                        }




                                        string p_Transaction_Ref = obj.ReferenceNo;

                                        obj.Beneficiary_ID = Convert.ToInt32(obj.Beneficiary_ID);
                                        if (totalBalance >= 5000)
                                        {
                                            string benef_aml_flag = check_pep_sanction_benef(obj.Beneficiary_ID, totalBalance, p_Transaction_Ref, _srvTransactionContext);



                                            chk_reponse_benef = Convert.ToInt32(benef_aml_flag);



                                        }
                                        else
                                        {
                                            string benef_aml_flag = check_pep_sanction_benef(obj.Beneficiary_ID, totalBalance, p_Transaction_Ref, _srvTransactionContext);



                                            chk_reponse_benef = Convert.ToInt32(benef_aml_flag);


                                        }




                                        if (chk_reponse_cust != 10 && chk_reponse_cust != 4 && chk_reponse_cust != 0)
                                        {
                                            #region transfercomment
                                            obj.TransactionStatus_ID = 6;
                                            if (chk_reponse_benef == 1)
                                            {
                                                cust_Comment = "Hold Reason: Potential Match Found For Beneficiary.";
                                            }
                                            Activity1 += " cust_Comment " + cust_Comment;
                                            int TransferPerk_Flag = 1; //remind me flag
                                            obj.Delete_Status = 0;
                                            int status = 0;

                                            _cmd_comment.CommandType = CommandType.StoredProcedure;
                                            _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                            _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                            _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                            _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                            _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                            _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                            _cmd_comment.Parameters.AddWithValue("_Status", 2);

                                            _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                            _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                            chk_transaction_status = 0;
                                            #endregion
                                        }

                                        else if (chk_reponse_benef != 10 && chk_reponse_benef != 4 && chk_reponse_benef != 0)
                                        {

                                            #region transfercomment
                                            obj.TransactionStatus_ID = 6;
                                            if (chk_reponse_benef == 1)
                                            {
                                                cust_Comment = "Hold Reason: Potential Match Found For Beneficiary.";
                                            }
                                            Activity1 += " cust_Comment benf " + cust_Comment;

                                            int TransferPerk_Flag = 1; //remind me flag
                                            obj.Delete_Status = 0;
                                            int status = 0;

                                            _cmd_comment.CommandType = CommandType.StoredProcedure;
                                            _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                            _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                            _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                            _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                            _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                            _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                            _cmd_comment.Parameters.AddWithValue("_Status", 2);

                                            _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                            _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                            chk_transaction_status = 0;
                                            #endregion
                                        }


                                    }
                                    if (Existtran1 == 0 /*&& cnt == 0*/)
                                    {
                                        obj.TransactionStatus_ID = 6;

                                        cust_Comment += "Hold Reason: First Transaction should be on hold <br/>";
                                        cnt++;
                                    }
                                    if (obj.PaymentType_ID == 3)
                                    {
                                        if (Existtran2 == 0/* && cnt == 0*/)
                                        {
                                            obj.TransactionStatus_ID = 6;
                                            cnt++;
                                            cust_Comment += "Hold Reason: First pay by card transaction should be on hold <br/>";
                                        }
                                        if (Existtran3 == 0/* && cnt == 0*/)
                                        {
                                            obj.TransactionStatus_ID = 6;
                                            cnt++;
                                            cust_Comment += "Hold Reason: First daily pay by card transaction should be on hold <br/>";
                                        }
                                    }


                                    bbd = Convert.ToString( Existtran3);
                                   
                                    if (newalert == 0 /*&& cnt == 0*/)
                                    {
                                        obj.TransactionStatus_ID = 6;
                                        cnt++;
                                        cust_Comment += alertmsg;
                                    }
                                    //if (/*cnt == 0 &&*/ Convert.ToInt32(ids1.Rows[6]["Status_ForCustomer"]) == 0)
                                    //{
                                    //    MySqlCommand _cmd1 = new MySqlCommand("CheckAddressDetailsCustomers");
                                    //    _cmd1.CommandType = CommandType.StoredProcedure;
                                    //    _cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                    //    _cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    //    DataTable chk_add = db_connection.ExecuteQueryDataTableProcedure(_cmd1);
                                    //    if (chk_add.Rows.Count > 0)
                                    //    {
                                    //        string postCode = Convert.ToString(chk_add.Rows[0]["Post_Code"]).Trim();
                                    //        string houseNumber = Convert.ToString(chk_add.Rows[0]["House_Number"]).Trim();
                                    //        string street = Convert.ToString(chk_add.Rows[0]["Street"]).Trim();
                                    //        int cityID = Convert.ToInt32(chk_add.Rows[0]["City_ID"]);
                                    //        if (String.IsNullOrEmpty(postCode) || String.IsNullOrEmpty(houseNumber) || String.IsNullOrEmpty(street)) // || cityID <= 0
                                    //        {
                                    //            //if (Convert.ToInt32(chk_add.Rows[0]["Active_Status"]) != 2 && Convert.ToInt32(ids1.Rows[6]["Status_ForCustomer"]) == 0)
                                    //            //{
                                    //            obj.TransactionStatus_ID = 6;
                                    //            cnt++;
                                    //            cust_Comment += "Hold Reason: Address Information Missing.";
                                    //            //}
                                    //            //if (Convert.ToInt32(ids1.Rows[6]["Status_ForCustomer"]) == 1) {
                                    //            //    obj.TransactionStatus_ID = 6;
                                    //            //    cnt++;
                                    //            //    cust_Comment = "Hold Reason: Address Information Missing.";
                                    //            //}
                                    //            //errorMessage = "Address Information Missing.";
                                    //        }
                                    //    }
                                    //    //if (errorMessage != "")
                                    //    //    ds.Rows.Add(0, errorMessage);
                                    //}

                                    //}

                                }
                                //if (errorMessage != "")
                                //    ds.Rows.Add(0, errorMessage);
                            }
                            if (cnt > 0)
                            {
                                #region transfercomment

                                _cmd_comment.CommandType = CommandType.StoredProcedure;
                                _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", 1);
                                _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                _cmd_comment.Parameters.AddWithValue("_Status", 0);

                                _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                chk_transaction_status = 0;
                                #endregion
                            }
                        }
                        catch { }
                        string watchlist_reason = "";
                        try
                        {
                            if (pid_avg == 0)
                            {
                                watchlist_reason = check_avg_txn(obj, 1, 0.00);
                            }

                        }
                        catch { }

                        MySqlTransaction transaction;
                        transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
                        try
                        {
                            obj.ReferenceNo = GenerateReferenceNo(obj.Client_ID, obj.CB_ID);
                            if (obj.ReferenceNo != null && obj.ReferenceNo != "")
                            {

                                obj.TransactionType_ID = 1;
                                obj.Delete_Status = 0;
                                obj.PaymentReceived_ID = 2;
                                if (obj.PaymentType_ID == 7)
                                {
                                    obj.PaymentReceived_ID = 1;
                                }
                                else if (obj.PaymentType_ID == 8)
                                {
                                    dt.Columns.Clear();

                                    dt.Columns.Add("Status", typeof(int));
                                    dt.Columns.Add("Transaction_Ref", typeof(string));
                                    dt.Columns.Add("Cust_ReferanceNo", typeof(string));
                                    dt.Columns.Add("Barcode_Details", typeof(string));

                                    obj.Customer_Reference = Cust_ReferanceNo;

                                    MySqlCommand cmdactive_instantbnkapi = new MySqlCommand("Get_activeinstantBankAPIDetails");
                                    cmdactive_instantbnkapi.CommandType = CommandType.StoredProcedure;
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_status", 0);

                                    int payWithBankGatewayId = 6;
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_payWithBankGatewayId", payWithBankGatewayId);

                                    DataTable dttcmdactive_instantbnkapi = db_connection.ExecuteQueryDataTableProcedure(cmdactive_instantbnkapi);
                                    int api_id_active_bnk_id = 0;
                                    if (dttcmdactive_instantbnkapi.Rows.Count > 0)
                                    {
                                        api_id_active_bnk_id = Convert.ToInt32(dttcmdactive_instantbnkapi.Rows[0]["bank_api_id"]);
                                    }

                                    if (api_id_active_bnk_id == 6)
                                    {

                                        returnPaysafecashBarcode = GetPaysafecashBarcode(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id, obj.Transaction_ID);
                                        if (returnPaysafecashBarcode == "FAILED")
                                        {
                                            dt.Clear();
                                            dt.Rows.Add(2, obj.ReferenceNo, Cust_ReferanceNo, returnPaysafecashBarcode);
                                            return dt;
                                        }
                                    }
                                }








                                obj.PartPay_Flag = 1;
                                if (obj.auth_code == "undefined")
                                {
                                    obj.auth_code = "";
                                }
                                obj.ManualRateChangedFlag = 1;
                                if (Convert.ToString(obj.Purpose_ID) == "10")
                                {
                                    obj.Other_Purpose = Convert.ToString(obj.Purpose);
                                }
                                else
                                {
                                    obj.Other_Purpose = "";
                                }

                               
                                using (MySqlCommand cmd = new MySqlCommand("Insert_Transfer", con))
                                //using(MySqlCommand cmd = new MySqlCommand())
                                {
                                    //                            cmd.CommandText = "insert into Transaction_Table(Customer_ID,Beneficiary_ID,TransactionType_ID,PaymentType_ID,TransactionStatus_ID,AmountInGBP,"
                                    //+ "Exchange_Rate,AmountInPKR,Purpose_ID,Transfer_Fees,Record_Insert_DateTime,Delete_Status,PaymentDepositType_ID,paymentReceived_ID,"
                                    //+ "ReferenceNo,User_ID,CB_ID,Country_ID,Currency_Code,Transaction_From_Flag,auth_code,DeliveryType_Id,Actual_ExchangeRate,ManualRateChangedFlag,"
                                    //+ "RateUpdateReason_ID,MsgToAgent,PartPay_Flag,SourceComment_Flag,SourceComment,Other_Purpose,Client_ID,HDelivery_Flag,"
                                    //+ "HDelivery_Address,CollectionPoint_ID,FromCurrency_Code,Wallet_ID,Wallet_Amount,Discount_ID,Discount_Amount) "
                                    //+ "values(_Customer_ID,_Beneficiary_ID,_TransactionType_ID,_PType_ID,_TransactionStatus_ID,_AmountInBase,_Rate,_AmountInForeign,"
                                    //+ "_Purpose_ID,_Transfer_Fees,_Record_Insert_DateTime,_Delete_Status,_PaymentDepositType_ID,_paymentReceived_ID,_ReferenceNo"
                                    //+ ",_User_ID,_CB_ID,_Country_ID,_Currency_Code,_Transaction_From_Flag,_auth_code,_DeliveryType_ID,_Actual_ExchangeRate,"
                                    //+ "_ManualRateChangedFlag,_RateUpdateReason_ID,_MsgToAgent,_PartPay_Flag,_SourceComment_Flag,_SourceComment,_Other_Purpose,"
                                    //+ "_Client_ID,_HomeDeliveryflag,_HomeDeliveryAddress,_CollectionPoint_ID,_BaseCurrency,_wallet_id,_Wallet_Amount,"
                                    //+ "Discount_ID,_Discount_Amount);select LAST_INSERT_ID();";
                                    //cmd.Connection = con;
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Transaction = transaction;
                                    cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    cmd.Parameters.AddWithValue("_Beneficiary_ID", obj.Beneficiary_ID);
                                    cmd.Parameters.AddWithValue("_TransactionType_ID", obj.TransactionType_ID);
                                    cmd.Parameters.AddWithValue("_PType_ID", obj.PaymentType_ID);
                                    cmd.Parameters.AddWithValue("_TransactionStatus_ID", obj.TransactionStatus_ID);

                                    cmd.Parameters.AddWithValue("_AmountInBase", obj.AmountInGBP.ToString("0.00"));

                                    cmd.Parameters.AddWithValue("_Rate", obj.Exchange_Rate.ToString("0.0000"));
                                    cmd.Parameters.AddWithValue("_AmountInForeign", obj.AmountInPKR.ToString("0.00"));

                                    cmd.Parameters.AddWithValue("_Purpose_ID", obj.Purpose_ID);
                                    cmd.Parameters.AddWithValue("_Transfer_Fees", obj.Transfer_Fees.ToString("0.00"));

                                    cmd.Parameters.AddWithValue("_ExtraTransfer_Fees", obj.ExtraTransfer_Fees.ToString("0.00"));
                                    cmd.Parameters.AddWithValue("_offer_rate_flag", obj.offer_rate_flag);

                                    cmd.Parameters.AddWithValue("_improved_rate_flag", obj.improved_rate_flag); //vyankatesh 02-09

                                    cmd.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                    cmd.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                    cmd.Parameters.AddWithValue("_PaymentDepositType_ID", obj.PaymentDepositType_ID);
                                    cmd.Parameters.AddWithValue("_paymentReceived_ID", obj.PaymentReceived_ID);
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);

                                    cmd.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                    cmd.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                    if (obj.Country_ID == 0)
                                    {
                                        try { obj.Country_ID = Convert.ToInt32(bt.Rows[0]["Beneficiary_Country_ID"]); } catch { }
                                    }
                                    cmd.Parameters.AddWithValue("_Country_ID", obj.Country_ID);
                                    cmd.Parameters.AddWithValue("_Currency_Code", obj.Currency_Code);
                                    cmd.Parameters.AddWithValue("_Transaction_From_Flag", obj.Transaction_From_Flag);
                                    cmd.Parameters.AddWithValue("_auth_code", obj.auth_code);
                                    cmd.Parameters.AddWithValue("_DeliveryType_ID", obj.DeliveryType_Id);

                                    cmd.Parameters.AddWithValue("_Actual_ExchangeRate", obj.Actual_ExchangeRate);

                                    cmd.Parameters.AddWithValue("_ManualRateChangedFlag", obj.ManualRateChangedFlag);
                                    cmd.Parameters.AddWithValue("_RateUpdateReason_ID", obj.RateUpdateReason_ID);

                                    cmd.Parameters.AddWithValue("_MsgToAgent", obj.MsgToAgent);
                                    cmd.Parameters.AddWithValue("_PartPay_Flag", obj.PartPay_Flag);

                                    cmd.Parameters.AddWithValue("_SourceComment_Flag", obj.SourceComment_Flag);
                                    string sofstr = obj.SourceComment;
                                    if (obj.SourceComment != "" && obj.SourceComment != null)
                                        sofstr = obj.SourceComment.Replace("null", "");

                                    cmd.Parameters.AddWithValue("_SourceComment", sofstr);
                                    cmd.Parameters.AddWithValue("_Other_Purpose", obj.Other_Purpose);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_HomeDeliveryflag", obj.HDelivery_Flag);
                                    cmd.Parameters.AddWithValue("_HomeDeliveryAddress", obj.HDelivery_Address);

                                    cmd.Parameters.AddWithValue("_CollectionPoint_ID", obj.CollectionPoint_ID);
                                    cmd.Parameters.AddWithValue("_BaseCurrency", obj.FromCurrency_Code);
                                    cmd.Parameters.AddWithValue("_PayByCard_ID", obj.PayByCard_ID);
                                    cmd.Parameters.AddWithValue("_PaymentGateway_Flag", obj.PaymentGateway_ID);
                                    if (obj.Wallet_Perm == 0)
                                    {
                                        cmd.Parameters.AddWithValue("_wallet_id", obj.Wallet_ID);
                                        cmd.Parameters.AddWithValue("_Wallet_Amount", obj.Wallet_Amount);
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("_wallet_id", 0);
                                        cmd.Parameters.AddWithValue("_Wallet_Amount", 0);
                                    }
                                    if (obj.Discount_Perm == 0)
                                    {
                                        cmd.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                        cmd.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("_Discount_ID", 0);
                                        cmd.Parameters.AddWithValue("_Discount_Amount", 0);
                                    }
                                    //cmd.Parameters.Add(new MySqlParameter("_Transaction_ID", MySqlDbType.Int32));
                                    //cmd.Parameters["_Transaction_ID"].Direction = ParameterDirection.Output;

                                    cmd.Parameters.AddWithValue("_Comment", obj.Comment);

                                    if (obj.Till_ID <= 0 || obj.Till_ID == null) { obj.Till_ID = 1; }
                                    cmd.Parameters.AddWithValue("_Till_ID", obj.Till_ID);
                                    obj.Transaction_ID = Convert.ToInt32(cmd.ExecuteScalar());


                                    if (obj.PaymentType_ID == 8)
                                    {
                                        if (returnPaysafecashBarcode != "FAILED")
                                        {
                                            string paysafe_server_to_server = paysafecashservertoserver(returnPaysafecashBarcode, obj, obj.Transaction_ID, obj.ReferenceNo);
                                        }
                                    }










                                    cmd.Dispose();
                                    if (obj.Transaction_ID > 0)
                                    {
                                        #region Pay with wallet
                                        //Pay with wallet
                                        if (obj.PaymentType_ID == 7)
                                        {
                                            obj.transfer_type = 2; obj.paytype = 5;
                                            obj.exchangerate = 1; obj.fee = 0;
                                            MySqlCommand _cmd = new MySqlCommand("SP_GetWalletDetails");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                            _cmd.Parameters.AddWithValue("_where", " and wallet_table.AgentFlag=1 and currency_master.Currency_Code='" + obj.FromCurrency_Code + "'");
                                            DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                            if (dtwallets.Rows.Count == 1)
                                            {
                                                double balance = Convert.ToDouble(dtwallets.Rows[0]["Wallet_balance"]);

                                                double rewardamount = 0;
                                                if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                                                {
                                                    if (Convert.ToString(obj.Discount_Perm) == "0")
                                                    {
                                                        if (Convert.ToString(obj.Discount_Amount) != "" && Convert.ToString(obj.Discount_Amount) != null)
                                                        {
                                                            rewardamount = Convert.ToDouble(obj.Discount_Amount);
                                                        }
                                                    }
                                                }
                                                double transcost = (obj.AmountInGBP + obj.Transfer_Fees + obj.ExtraTransfer_Fees) - rewardamount;
                                                if (balance < transcost)
                                                {
                                                    transaction.Rollback();
                                                    dt.Rows.Add(4, "Insufficient Funds", Cust_ReferanceNo, obj.Transaction_ID);
                                                    return dt;//Insufficient Balance
                                                }
                                                else
                                                {
                                                    int Currency_ID = Convert.ToInt32(dtwallets.Rows[0]["Currency_ID"]);
                                                    int Wallet_ID = Convert.ToInt32(dtwallets.Rows[0]["Wallet_ID"]);
                                                    Double newwalletbalance = balance - transcost;

                                                    MySqlCommand cmd1 = new MySqlCommand("Update_WalletBalance");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Connection = con;
                                                    cmd1.Transaction = transaction;
                                                    cmd1.Parameters.AddWithValue("_newwalletbalance", newwalletbalance);
                                                    cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    cmd1.Parameters.AddWithValue("_Wallet_ID", Wallet_ID);
                                                    int msg = cmd1.ExecuteNonQuery();
                                                    cmd1.Dispose();
                                                    if (msg > 0)
                                                    {
                                                        cmd1 = new MySqlCommand("insert_wallet_transaction");
                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                        cmd1.Connection = con;
                                                        cmd1.Transaction = transaction;
                                                        cmd1.Parameters.AddWithValue("_Wallet_ID", Wallet_ID);
                                                        cmd1.Parameters.AddWithValue("_transfer_type", obj.transfer_type);
                                                        cmd1.Parameters.AddWithValue("_Currency_ID", Currency_ID);
                                                        cmd1.Parameters.AddWithValue("_transfer_amount", transcost);
                                                        cmd1.Parameters.AddWithValue("_oldwalletbalance", balance);
                                                        cmd1.Parameters.AddWithValue("_newwalletbalance", newwalletbalance);
                                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                        cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                                        cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                        cmd1.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                        cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                        cmd1.Parameters.AddWithValue("_paytype", obj.paytype);
                                                        cmd1.Parameters.AddWithValue("_exchangerate", obj.exchangerate);
                                                        cmd1.Parameters.AddWithValue("_fee", obj.fee);
                                                        cmd1.Parameters.AddWithValue("_Wallet_Description", "Amount " + transcost + " used for transaction " + obj.ReferenceNo + ".");
                                                        cmd1.Parameters.AddWithValue("_User_ID", 0);
                                                        cmd1.Parameters.AddWithValue("_AgentFlag", 1);
                                                        cmd1.Parameters.AddWithValue("_referee_id", 0);
                                                        cmd1.Parameters.AddWithValue("_Referral_Flag", 1);

                                                        msg = cmd1.ExecuteNonQuery();
                                                        if (msg > 0)
                                                        {
                                                            string act = "App - " + Convert.ToString(obj.FromCurrency_Code) + " Wallet Balance used for transaction " + obj.ReferenceNo + ". Wallet Amount: " + transcost + " New Wallet Balance: " + newwalletbalance + " Old Wallet Balance: " + balance + " ";
                                                            _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext));
                                                        }
                                                    }
                                                    else
                                                    {
                                                        transaction.Rollback();
                                                        dt.Rows.Add(5, "Failed to Update Wallet Balance", Cust_ReferanceNo, obj.Transaction_ID);
                                                        return dt;
                                                    }
                                                }
                                            }
                                        }

                                        #endregion Pay with wallet

                                        if (chk_transaction_status == 0)
                                        {
                                            _cmd_comment.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                            _cmd_comment.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                            int chk_comment = db_connection.ExecuteNonQueryProcedure(_cmd_comment);
                                        }
                                        DataTable dtc = (DataTable)CompanyInfo.GetBaseCurrencywisebankdetails(obj.Client_ID, obj.FromCurrency_Code, obj.PaymentDepositType_ID, obj.DeliveryType_Id);

                                        Cust_ReferanceNo = Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]);
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, obj.Transaction_ID);
                                        CompanyInfo.InsertTrackingLogDetails(1, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                        if (obj.PaymentType_ID == 7)
                                        {
                                            _ = Task.Run(() => CompanyInfo.InsertTrackingLogDetails(3, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext));
                                        }
                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App - Money Transfer Request Submitted Successfully. Transaction Reference - " + obj.ReferenceNo + ".", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "Send Money",_srvTransactionContext));
                                        string notification_icon = "request-money.jpg";
                                        string notification_message = "<span class='cls-admin'>transfer <strong class='cls-transferinitiate'>request</strong> sent successfully. <strong>Transfer Ref.- " + obj.ReferenceNo + "</strong></span><span class='cls-customer'><strong>Money transfer request submited</strong><span>Your request for the money transfer has been submitted successfully.</span></span>";
                                        CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, obj.User_ID, Convert.ToInt32(obj.CB_ID), 0, 0, 1, obj.Transaction_ID, _srvTransactionContext);
                                        if (watchlist_reason != "")
                                        {
                                            update_to_watchlist(obj, watchlist_reason);
                                        }
                                        try
                                        {
                                            string browserinfo = "";
                                            string IPAddress1 = context.Connection.RemoteIpAddress.ToString();
                                            browserinfo = "IP Address: " + IPAddress1;
                                            try
                                            {
                                                ServicePointManager.Expect100Continue = true;
                                                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls13;
                                                var client = new RestClient("https://tools.keycdn.com/geo.json?host=" + IPAddress1);
                                                client.Timeout = -1;
                                                var request = new RestRequest(Method.GET);
                                                client.UserAgent = "keycdn-tools:" + Convert.ToString(dtc.Rows[0]["company_website"]); //dtc.Rows[0]["Company_URL_Customer"] 
                                                                                                                                       //keycdn-tools:https://www.calyx-solutions.com
                                                request.AddHeader("Accept-Encoding", "gzip, deflate, br");

                                                IRestResponse response = client.Execute(request);

                                                GeoLocation GeoLocationList = Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(response.Content);
                                                browserinfo = Newtonsoft.Json.JsonConvert.SerializeObject(GeoLocationList.data.geo);
                                            }
                                            catch (Exception ex)
                                            {
                                                browserinfo = "IP Address: " + IPAddress1;
                                            }
                                            int chk_validity = 1;
                                            try
                                            {
                                                if (check_validity != null)
                                                {
                                                    chk_validity = 0;
                                                }
                                            }
                                            catch (Exception ex_validity)
                                            {

                                            }
                                            _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("Record saved in transaction mapping step11" + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer11", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext));

                                            MySqlCommand cmd1 = new MySqlCommand("Insert_TransactionDetails");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Connection = con;
                                            cmd1.Transaction = transaction;
                                            cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                            cmd1.Parameters.AddWithValue("_chk_validity_poa", chk_validity);
                                            cmd1.Parameters.AddWithValue("_APITransaction_ID", "0");
                                            cmd1.Parameters.AddWithValue("_BranchListAPI_ID", obj.BranchListAPI_ID);
                                            cmd1.Parameters.AddWithValue("_APIBranch_Details", obj.APIBranch_Details);
                                            cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd1.Parameters.AddWithValue("_NameOnCard", obj.NameOnCard);
                                            cmd1.Parameters.AddWithValue("_Location_Details", browserinfo);
                                            cmd1.Parameters.AddWithValue("_Benf_BankDetails_ID", obj.Benf_BankDetails_ID); //vyankatesh 11-12-24
                                            // cmd1.Parameters.AddWithValue("_offer_rate_flag", obj.offer_rate_flag);
                                            try
                                            {
                                                int msg = cmd1.ExecuteNonQuery(); cmd1.Dispose();

                                                if (msg > 0)
                                                {
                                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(msg + "Record saved in transaction mapping" + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer11", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext));

                                                }
                                                else
                                                {
                                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(msg + "Record not saved in transaction mapping" + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer11", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext));


                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer11", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext));

                                            }
                                            #region check location
                                            string act = "";
                                            try
                                            {
                                                obj.userAgent = (context.Request.Headers["User-Agent"]).ToString();
                                                DataTable chkLocation1 = CompanyInfo.check_location(obj.Client_ID, obj.userAgent, _srvTransactionContext);
                                                //DataTable chkLocation1 = CompanyInfo.check_location(obj.Client_ID, _srvTransactionContext);
                                                Boolean chkLocation = true;
                                                string country_log = "";
                                                string device_ty = "";

                                                try
                                                {
                                                    chkLocation = Convert.ToBoolean(chkLocation1.Rows[0]["is_valid"]);
                                                    country_log = Convert.ToString(chkLocation1.Rows[0]["Country"]);
                                                    device_ty = Convert.ToString(chkLocation1.Rows[0]["device_ty"]);

                                                }
                                                catch
                                                {

                                                }
                                                if (!chkLocation)
                                                {
                                                    //Notification
                                                    act = act + " | location is invalid";
                                                    string notification_icon1 = "money-recive.jpg";
                                                    string notification_message1 = "<span class='cls-admin'>Transaction <strong class='cls-new-benf'>Submitted from New Location</strong></span>";
                                                    CompanyInfo.save_notification_compliance(notification_message1, notification_icon1, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), obj.Client_ID, 1, 0, obj.Branch_ID, 0, 1, 1, obj.Transaction_ID, _srvTransactionContext);
                                                    act = act + " |notification sent for new location";

                                                    //email
                                                    string subject1 = string.Empty;
                                                    string body1 = string.Empty;
                                                    HttpWebRequest httpRequest = null, httpRequest1 = null;
                                                    DataTable d2 = (DataTable)CompanyInfo.getCustomerDetails(obj.Client_ID, Customer_ID);
                                                    string sendmsg = "Transaction Submitted from New Location";
                                                    string company_name = Convert.ToString(dtc.Rows[0]["Company_Name"]);
                                                    string URL = Convert.ToString(dtc.Rows[0]["Company_URL_Admin"]);
                                                    string cust_url = Convert.ToString(dtc.Rows[0]["Company_URL_Customer"]);
                                                    httpRequest = (HttpWebRequest)WebRequest.Create(URL + "Email/new-login.html");
                                                    httpRequest.UserAgent = "Code Sample Web Client";
                                                    HttpWebResponse webResponse = (HttpWebResponse)httpRequest.GetResponse();
                                                    using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                                                    {
                                                        body1 = reader.ReadToEnd();
                                                    }
                                                    body1 = body1.Replace("[name]", Convert.ToString(ct.Rows[0]["First_Name"]));
                                                    string enc_ref = CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]), true);
                                                    string link = cust_url + "/secure-account-verfiy?reference=" + enc_ref;
                                                    body1 = body1.Replace("[link]", link);
                                                    body1 = body1.Replace("[New_Login_Detected]", "Transaction Submitted from New Location");
                                                    body1 = body1.Replace("[country]", country_log);
                                                    body1 = body1.Replace("[time]", (Convert.ToDateTime(CompanyInfo.gettime(obj.Client_ID, _srvTransactionContext))).ToString("dddd, dd MMMM yyyy HH:mm:ss"));
                                                    body1 = body1.Replace("[location_msg]", "We noticed a transaction from your account from a location that you have not used before. If this wasn't you, we'll help you secure your account.");
                                                    body1 = body1.Replace("[device]", device_ty);


                                                    string EmailID = Convert.ToString(ct.Rows[0]["Email_ID"]);
                                                    httpRequest1 = (HttpWebRequest)WebRequest.Create(URL + "Email/TransactionLocation.txt");
                                                    httpRequest1.UserAgent = "Code Sample Web Client";
                                                    HttpWebResponse webResponse1 = (HttpWebResponse)httpRequest1.GetResponse();
                                                    using (StreamReader reader = new StreamReader(webResponse1.GetResponseStream()))
                                                    {
                                                        subject1 = reader.ReadLine();
                                                    }
                                                    subject1 += ct.Rows[0]["WireTransfer_ReferanceNo"];

                                                    string send_mail = (string)CompanyInfo.Send_Mail(dtc, EmailID, body1, subject1, obj.Client_ID, obj.Branch_ID, "", "", "", _srvTransactionContext);
                                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext));

                                                    //Notification
                                                    act = act + "| Email sent for New Transaction Location";

                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                act = act + Convert.ToString(ex);
                                                _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("check location " + Convert.ToString(obj.Discount_Code) + ". transaction " + obj.ReferenceNo + ". Error: " + Convert.ToString(ex) + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Location", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                            }
                                            _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext));

                                            #endregion
                                            MySqlCommand _cmd = new MySqlCommand("Update_MonthlyLimit");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Parameters.AddWithValue("_From_Date", obj.Record_Insert_DateTime);
                                            _cmd.Parameters.AddWithValue("_Transfer_ID", 0);// Primary ID of customer transfer limit
                                            _cmd.Parameters.AddWithValue("_Amount", obj.AmountInGBP.ToString("0.00"));
                                            _cmd.Parameters.AddWithValue("_Queryflag", 2);
                                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                            _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            string success1 = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                        }
                                        catch { }
                                        try
                                        {
                                            //Insert Wallet Transaction
                                            if (obj.Wallet_Perm == 0 && obj.Wallet_ID > 0)
                                            {
                                                obj.transfer_type = 2; obj.paytype = 5;
                                                obj.exchangerate = 1; obj.fee = 0;
                                                MySqlCommand _cmd = new MySqlCommand("GetWallets");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                string whereclause = " and c.Client_ID=" + obj.Client_ID + " and w.Client_ID=" + obj.Client_ID + " and w.Customer_ID=" + Customer_ID + " and w.Wallet_ID = " + obj.Wallet_ID + "";
                                                _cmd.Parameters.AddWithValue("_whereclause", whereclause);
                                                DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                if (dtwallets.Rows.Count > 0)
                                                {
                                                    obj.Currency_ID = Convert.ToInt32(dtwallets.Rows[0]["Currency_ID"]);
                                                    obj.oldwalletbalance = Convert.ToDouble(dtwallets.Rows[0]["Wallet_Balance"]);
                                                    obj.newwalletbalance = obj.oldwalletbalance - obj.Wallet_Amount;
                                                }
                                                MySqlCommand cmd1 = new MySqlCommand("Update_WalletBalance");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Connection = con;
                                                cmd1.Transaction = transaction;
                                                cmd1.Parameters.AddWithValue("_newwalletbalance", obj.newwalletbalance);
                                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd1.Parameters.AddWithValue("_Wallet_ID", obj.Wallet_ID);
                                                double Transfer_Cost = Convert.ToDouble(obj.Transfer_Cost);
                                                double transfer_cost_foreign = Convert.ToDouble(obj.transfer_cost_foreign);

                                                int msg = cmd1.ExecuteNonQuery();
                                                cmd1.Dispose();
                                                //if (msg > 0)
                                                //{
                                                cmd1 = new MySqlCommand("insert_wallet_transaction");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Connection = con;
                                                cmd1.Transaction = transaction;
                                                cmd1.Parameters.AddWithValue("_Wallet_ID", obj.Wallet_ID);
                                                cmd1.Parameters.AddWithValue("_transfer_type", obj.transfer_type);
                                                cmd1.Parameters.AddWithValue("_Currency_ID", obj.Currency_ID);
                                                cmd1.Parameters.AddWithValue("_transfer_amount", obj.Wallet_Amount);
                                                cmd1.Parameters.AddWithValue("_oldwalletbalance", obj.oldwalletbalance);
                                                cmd1.Parameters.AddWithValue("_newwalletbalance", obj.newwalletbalance);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd1.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                cmd1.Parameters.AddWithValue("_paytype", obj.paytype);
                                                cmd1.Parameters.AddWithValue("_exchangerate", obj.exchangerate);
                                                cmd1.Parameters.AddWithValue("_fee", obj.fee);
                                                cmd1.Parameters.AddWithValue("_Wallet_Description", obj.Wallet_Description);

                                                cmd1.Parameters.AddWithValue("_User_ID", 0);
                                                cmd1.Parameters.AddWithValue("_AgentFlag", 1);
                                                cmd1.Parameters.AddWithValue("_referee_id", 0);
                                                cmd1.Parameters.AddWithValue("_Referral_Flag", 1);
                                                obj.Wallet_Description = "Wallet Amount " + obj.Wallet_Amount + " used for transaction " + obj.ReferenceNo + ".";

                                                msg = cmd1.ExecuteNonQuery();
                                                if (msg > 0)
                                                {
                                                    string act = "App - " + Convert.ToString(obj.Wallet_Currency) + " Wallet Balance used for transaction " + obj.ReferenceNo + ". Wallet Amount: " + obj.Wallet_Amount + " New Wallet Balance: " + obj.newwalletbalance + " Old Wallet Balance: " + obj.oldwalletbalance + " ";
                                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "",_srvTransactionContext));
                                                }
                                                //}
                                            }

                                            try
                                            {
                                                //Insert Discount Transaction
                                                if (obj.Discount_Perm == 0 && obj.Discount_ID > 0)
                                                {
                                                    MySqlCommand cmd1 = new MySqlCommand("Insert_DiscountDetails");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Connection = con;
                                                    cmd1.Transaction = transaction;
                                                    cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                    cmd1.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                                                    cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                    cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    cmd1.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                    cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);

                                                    int msg = cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                                    //Get Usage limit
                                                    if (msg > 0)
                                                    {
                                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(" Discount Code " + Convert.ToString(obj.Discount_Code) + " applied for transaction " + obj.ReferenceNo + ". Discount " + Convert.ToString(obj.DiscountType) + ": " + obj.Discount_Amount + ". ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                                        cmd1 = new MySqlCommand("GetDiscountUsage");
                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                        cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                        cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                        DataTable dtuse = db_connection.ExecuteQueryDataTableProcedure(cmd1); cmd1.Dispose();
                                                        if (dtuse.Rows.Count > 0)
                                                        {
                                                            int usage_limit = Convert.ToInt32(dtuse.Rows[0]["Usage_Limit"]);
                                                            int used_count = Convert.ToInt32(dtuse.Rows[0]["used_count"]);
                                                            if ((used_count + 1) >= usage_limit)
                                                            {
                                                                //update discount available status
                                                                cmd1 = new MySqlCommand("Update_DiscountAvailable");
                                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                                cmd1.Connection = con;
                                                                cmd1.Transaction = transaction;
                                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                                cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                                cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                                cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                                            }
                                                        }
                                                    }
                                                }

                                            }
                                            catch (Exception ex) { _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(" Discount Code " + Convert.ToString(obj.Discount_Code) + ". transaction " + obj.ReferenceNo + ". Error: " + Convert.ToString(ex) + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext)); }

                                        }
                                        catch (Exception ex) { _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(" Discount Code " + Convert.ToString(obj.Discount_Code) + ". transaction " + obj.ReferenceNo + ". Error: " + Convert.ToString(ex) + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext)); }



                                        cmd2.Dispose();

                                        //Insert Bank details
                                        if (obj.PaymentDepositType_ID == 1)
                                        {
                                            if (bt.Rows.Count > 0)
                                            {
                                                cmd2 = new MySqlCommand("Insert_BankDepositDetails");//SP_Save_Beneificiary_BankDetails
                                                cmd2.CommandType = CommandType.StoredProcedure;
                                                cmd2.Connection = con;
                                                cmd2.Transaction = transaction;
                                                cmd2.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                                cmd2.Parameters.AddWithValue("_BBank_ID", Convert.ToInt32(bt.Rows[0]["BBank_ID"]));
                                                cmd2.Parameters.AddWithValue("_Account_Number", Convert.ToString(bt.Rows[0]["Account_Number"]));
                                                cmd2.Parameters.AddWithValue("_AccountHolderName", Convert.ToString(bt.Rows[0]["AccountHolderName"]));
                                                cmd2.Parameters.AddWithValue("_Branch", Convert.ToString(bt.Rows[0]["Branch"]));
                                                cmd2.Parameters.AddWithValue("_BranchCode", Convert.ToString(bt.Rows[0]["BranchCode"]));
                                                cmd2.Parameters.AddWithValue("_BankCode", Convert.ToString(bt.Rows[0]["BankCode"]));
                                                cmd2.Parameters.AddWithValue("_Ifsc_Code", Convert.ToString(bt.Rows[0]["Ifsc_Code"]));
                                                cmd2.Parameters.AddWithValue("_Beneficiary_Country_ID", Convert.ToInt32(bt.Rows[0]["Beneficiary_Country_ID"]));
                                                cmd2.Parameters.AddWithValue("_Beneficiary_City_ID", Convert.ToInt32(bt.Rows[0]["Beneficiary_City_ID"]));
                                                cmd2.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd2.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                cmd2.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                cmd2.Parameters.AddWithValue("_Benf_Iban", Convert.ToString(bt.Rows[0]["Iban_ID"]));
                                                cmd2.Parameters.AddWithValue("_Benf_BIC", Convert.ToString(bt.Rows[0]["BIC_Code"]));

                                                int bankmsg = cmd2.ExecuteNonQuery(); cmd2.Dispose();
                                                //reset to previous value                                    
                                            }
                                        }

                                        if (obj.SOFID > 0 && Convert.ToString(obj.SourceComment_Flag) == "1")
                                        {
                                            cmd2 = new MySqlCommand("Update_TxnIDSof");
                                            cmd2.CommandType = CommandType.StoredProcedure;
                                            cmd2.Connection = con;
                                            cmd2.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                            cmd2.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd2.Parameters.AddWithValue("_SourceId", obj.SOFID);
                                            int sourcesuccess = cmd2.ExecuteNonQuery(); cmd2.Dispose();
                                        }

                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App - Transaction Details : Reference: " + obj.ReferenceNo + ", Sender Name: " + Convert.ToString(ct.Rows[0]["First_Name"]) + ", Receiver Name: " + Convert.ToString(bt.Rows[0]["Beneficiary_Address"]) + "," +
                                            " Amount: " + obj.AmountInGBP + " " + obj.FromCurrency_Code + ", <br />Exchange Rate: " + obj.Exchange_Rate + ", Amount in Foreign Currency: " + obj.AmountInPKR + " " + obj.Currency_Code + ", Transfer Fees:" + obj.Transfer_Fees + ", Extra Transfer Fees:" + obj.ExtraTransfer_Fees + " Collection Point ID: " + obj.CollectionPoint_ID + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Insert Transaction", _srvTransactionContext));
                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App - Email sending initiated on send money success.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send-Money", _srvTransactionContext));
                                        string subject = string.Empty;
                                        string body = string.Empty;

                                        if (dtc.Rows.Count > 0)
                                        {
                                            try
                                            {
                                                string URL = Convert.ToString(dtc.Rows[0]["Company_URL_Admin"]);
                                                string cust_url = Convert.ToString(dtc.Rows[0]["Company_URL_Customer"]);
                                                string templatename = "NewSendmoney-SuccessMailforCash.htm";
                                                if (obj.PaymentType_ID == 7)
                                                {
                                                    templatename = "PaybyCardSuccess.htm";
                                                }

                                                _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(" Email Path For send Money: "+ URL + "Email/" + templatename, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send-Money", _srvTransactionContext));

                                                HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(URL + "Email/" + templatename);
                                                httpRequest.UserAgent = "Code Sample Web Client";
                                                HttpWebResponse webResponse = (HttpWebResponse)httpRequest.GetResponse();
                                                using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                                                {
                                                    body = reader.ReadToEnd();
                                                }
                                                string First_Name = Convert.ToString(ct.Rows[0]["First_Name"]);
                                                string Email_ID = Convert.ToString(ct.Rows[0]["Email_ID"]);
                                                string email = Email_ID.Trim();

                                                body = body.Replace("[name]", First_Name);
                                                body = body.Replace("[receivername]", Convert.ToString(bt.Rows[0]["Beneficiary_Name"]));

                                                //----sender Details
                                                body = body.Replace("[senderadd]", Convert.ToString(ct.Rows[0]["Address"]));
                                                body = body.Replace("[senderphoneno]", Convert.ToString(ct.Rows[0]["Phone_Number"]));
                                                body = body.Replace("[sendermobno]", Convert.ToString(ct.Rows[0]["Mobile_Number"]));
                                                body = body.Replace("[senderemailid]", Email_ID);
												 body = body.Replace("[amtingbp]", obj.AmountInGBP.ToString("N2"));
                                                body = body.Replace("[amtinforeign]", obj.AmountInPKR.ToString("N2"));
                                                body = body.Replace("[transferfees]", obj.Transfer_Fees.ToString("N2"));
                                                //Changes commented by Parth 120525
                                                //body = body.Replace("[amtingbp]", obj.AmountInGBP.ToString("F2"));
                                                //body = body.Replace("[amtinforeign]", obj.AmountInPKR.ToString("F2"));
                                                //body = body.Replace("[transferfees]", obj.Transfer_Fees.ToString("F2"));
                                                body = body.Replace("[Currency]", obj.Currency_Code);
                                                body = body.Replace("[Customerrefno]", Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]));
                                                body = body.Replace("[Hours]", Convert.ToString(dtc.Rows[0]["Cancel_Transaction_Hours"]));
                                                double newtotamount = Convert.ToDouble(obj.AmountInGBP) + Convert.ToDouble(obj.Transfer_Fees) + Convert.ToDouble(obj.ExtraTransfer_Fees);
                                                //body = body.Replace("[totAmt]", newtotamount.ToString("0.00"));

                                                body = body.Replace("[exchangerate]", obj.Exchange_Rate.ToString("N2"));

                                                //----sender Details

                                                body = body.Replace("[RefNo]", obj.ReferenceNo);
                                                body = body.Replace("[receiveradd]", Convert.ToString(bt.Rows[0]["Beneficiary_Address"]));
                                                body = body.Replace("[receiverphoneno]", Convert.ToString(bt.Rows[0]["Beneficiary_Telephone"]));
                                                body = body.Replace("[receivermobno]", Convert.ToString(bt.Rows[0]["Beneficiary_Mobile"]));
                                                body = body.Replace("[receiverbankname]", Convert.ToString(bt.Rows[0]["Bank_Name"]));
                                                body = body.Replace("[receiveraccountno]", Convert.ToString(bt.Rows[0]["Account_Number"]));
                                                body = body.Replace("[ttype]", obj.PaymentDepositType_ID.ToString());
                                                body = body.Replace("[countrymsg]", Convert.ToString(""));
                                                body = body.Replace("[CashCollectionMsg]", Convert.ToString(""));
                                                body = body.Replace("[BaseCurrency]", Convert.ToString(obj.FromCurrency_Code));
                                                string timezone = Convert.ToString(ct.Rows[0]["Base_Timezone"]);
                                                string insert_date = ""; //Digvijay changes for date format change on email
                                                if (timezone != "" && timezone != null)
                                                {
                                                    var britishZone = TimeZoneInfo.FindSystemTimeZoneById("" + timezone + "");
                                                    var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                                    insert_date = d.ToString("dd/MM/yyyy");
                                                }
                                                else
                                                {
                                                    insert_date = DateTime.Now.ToString("dd/MM/yyyy");
                                                }
                                                DataTable proceed_date_table = CompanyInfo.ConvertDateToCompanyConfiguredFormat(insert_date, Convert.ToInt32(obj.Client_ID));
                                                //string proceed_date = proceed_date_table.Rows[0]["FormattedDate"].ToString();
                                                //body = body.Replace("[TransDate]", proceed_date);//Digvijay changes for date format change on email
                                                body = body.Replace("[TransDate]", insert_date);//Digvijay changes for date format change on email
                                                body = body.Replace("[PaymentType]", obj.PaymentType);
                                                body = body.Replace("[TransferType]", obj.TransferType);
                                                double rewardamount = 0; string lbl = "";
                                                var wallet_lbl = ""; string wallet_currency = "";
                                                double newtotamount1 = newtotamount;
                                                double wallet_amt = 0;
                                                if (obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                                                {
                                                    if (Convert.ToString(obj.Wallet_Perm) == "0")
                                                    {
                                                        if (Convert.ToString(obj.Wallet_Amount) != "" && Convert.ToString(obj.Wallet_Amount) != null)
                                                        {
                                                            obj.Wallet_Amount = Convert.ToDouble(obj.Wallet_Amount);
                                                            rewardamount = obj.Wallet_Amount;
                                                            lbl = "Wallet";
                                                            //wallet_type added by siddhi
                                                            if (Convert.ToInt32(obj.Wallet_Currency_type) == 1)
                                                            {
                                                                newtotamount1 = newtotamount - rewardamount;
                                                                wallet_amt = newtotamount - rewardamount;
                                                                wallet_currency = obj.FromCurrency_Code;
                                                                wallet_lbl = "Total Base Amount: <span style='color:#000;font-weight: bold; '> " + wallet_currency + " " + wallet_amt.ToString("N2") + "</span>";
                                                            }
                                                            else if (Convert.ToInt32(obj.Wallet_Currency_type) == 2)
                                                            {
                                                                wallet_currency = obj.Currency_Code;
                                                                wallet_amt = Convert.ToDouble(obj.AmountInPKR) + rewardamount;
                                                                wallet_lbl = "Total Foreign Amount: <span style='color:#000;font-weight: bold; '> " + wallet_currency + " " + wallet_amt.ToString("N2") + "</span>";
                                                            }
                                                        }
                                                    }
                                                }

                                                if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                                                {
                                                    if (Convert.ToString(obj.Discount_Perm) == "0")
                                                    {
                                                        if (Convert.ToString(obj.Discount_Amount) != "" && Convert.ToString(obj.Discount_Amount) != null)
                                                        {
                                                            obj.Discount_Amount = Convert.ToDouble(obj.Discount_Amount);
                                                            rewardamount = obj.Discount_Amount;
                                                            lbl = "Discount";
                                                            wallet_currency = obj.FromCurrency_Code;
                                                            wallet_amt = newtotamount - rewardamount;
                                                            wallet_lbl = "Total Base Amount: <span style='color:#000;font-weight: bold; '> " + wallet_currency + " " + wallet_amt.ToString("N2") + "</span>";
                                                        }
                                                    }
                                                }
                                                //double newtotamount1 = newtotamount - rewardamount; //siddhi
                                                body = body.Replace("[totAmt]", newtotamount1.ToString("N2"));
                                                //Start Added by Parth on 17/05/2025 for showing extra fees in email for user (also added in email template)
                                                try
                                                {
                                                    DataTable dtsplitperm = new DataTable();
                                                    MySqlConnector.MySqlCommand cmd_splitperm = new MySqlConnector.MySqlCommand("GetPermissions");
                                                    cmd_splitperm.CommandType = CommandType.StoredProcedure;
                                                    int per168 = 1;
                                                    cmd_splitperm.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    cmd_splitperm.Parameters.AddWithValue("_whereclause", " and PID = 168");
                                                    dtsplitperm = db_connection.ExecuteQueryDataTableProcedure(cmd_splitperm);
                                                    per168 = Convert.ToInt32(dtsplitperm.Rows[0]["Status_ForCustomer"]);
                                                    if (obj.ExtraTransfer_Fees > 0 && per168 == 0)
                                                    {
                                                        body = body.Replace("[ExtraFees]", obj.ExtraTransfer_Fees.ToString("N2"));
                                                    }
                                                    else
                                                    {
                                                        // Remove the ExtraFees row if condition is not met
                                                        body = Regex.Replace(body, @"<tr id=""extraFeesCell"">.*?</tr>", string.Empty, RegexOptions.Singleline);
                                                        body = body.Replace("[ExtraFees]", string.Empty);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    _ = Task.Run(() => CompanyInfo.InsertErrorLogTracker("Insert Transaction New mail Errror full   body: " + ex.ToString(), 0, 0, 0, 0, "added extra fees for showing to user", Convert.ToInt32(0), Convert.ToInt32(0), "", _srvTransactionContext));
                                                }
                                                //End Added by Parth on 17/05/2025 for showing extra fees in email for user (also added in email template)
                                                if (rewardamount > 0)
                                                {
                                                    //body = body.Replace("[transaction_amount]", "<h3>Total Transaction Amount:&nbsp;<label class='orange'>" + obj.FromCurrency_Code + " " + newtotamount.ToString("0.00") + "</label></h3>");
                                                    //body = body.Replace("[discountwallet_amount]", "<h3>" + lbl + " Amount:&nbsp;<label class='orange'>" + obj.FromCurrency_Code + " " + rewardamount.ToString("0.00") + "</label></h3>");
                                                    body = body.Replace("[transaction_amount]", wallet_lbl);
                                                    body = body.Replace("[discountwallet_amount]", "" + lbl + " Amount: <span style='color:#000;font-weight: bold; '>" + wallet_currency + " " + rewardamount.ToString("N2") + "</span>");
                                                }
                                                else
                                                {
                                                    body = body.Replace("[transaction_amount]", "");
                                                    body = body.Replace("[discountwallet_amount]", "<br/>");
                                                }

                                                string paybtn = "";
                                                body = body.Replace("[link]", paybtn);
                                                //Subject                        
                                                subject = "[company_name] - Money Transfer Request Submitted Successfully - " + Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]) + " ";
                                                if (obj.PaymentType_ID == 2)
                                                {
                                                    body = body.Replace("[divwirestyle]", "display:block;");
                                                    MySqlCommand _cmd = new MySqlCommand("GetPaymentTypes");
                                                    _cmd.CommandType = CommandType.StoredProcedure;
                                                    _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    _cmd.Parameters.AddWithValue("_Source_ID", 1);
                                                    _cmd.Parameters.AddWithValue("_whereclause", " and p.PType_ID=" + obj.PaymentType_ID + "");
                                                    DataTable dtp = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                    if (dtp.Rows.Count > 0)
                                                    {
                                                        body = body.Replace("[Note3]", Convert.ToString(dtp.Rows[0]["Review_Transfer_Message"]));
                                                    }
                                                    else { body = body.Replace("[Note3]", Convert.ToString("")); }
                                                }
                                                else
                                                {
                                                    body = body.Replace("[divwirestyle]", "display:none;");
                                                    body = body.Replace("[Note3]", Convert.ToString(""));
                                                }
                                                body = body.Replace("[wire6]", Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]));

                                                DataTable dtfe = (DataTable)CompanyInfo.getEmailPermission(obj.Client_ID, 106);
                                                if (dtfe.Rows.Count == 1)
                                                {
                                                    string feeperm = Convert.ToString(dtfe.Rows[0]["Status_ForCustomer"]);
                                                    if (feeperm == "0") { body = body.Replace("[divfeesstyle]", "display:none;"); }
                                                }
                                                string mail_send = (string)CompanyInfo.Send_Mail(dtc, email, body, subject, obj.Client_ID, obj.CB_ID, "Insert Transaction", "", "", Convert.ToString(dtc.Rows[0]["BaseCurrency_Code"]),_srvTransactionContext);

                                                if (mail_send == "Success")
                                                {
                                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App - Email sent successfully on send money success.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                                }
                                                else
                                                {
                                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App Email Send Status - " + mail_send, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                                }
                                            }
                                            catch(Exception eg) {
                                                CompanyInfo.InsertrequestLogTracker("Insert Transaction New mail Errror full   body: "+eg.ToString()    , 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", _srvTransactionContext);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        dt.Rows.Add(1, obj.ReferenceNo, Cust_ReferanceNo, obj.Transaction_ID);
                                    }
                                }
                            }
                            transaction.Commit();
                            try
                            {
                                DataTable dt_notif = CompanyInfo.set_notification_data(6);//temporary removed
                                if (dt_notif.Rows.Count > 0)
                                {
                                    int SMS = Convert.ToInt32(dt_notif.Rows[0]["SMS"]);
                                    int Email = Convert.ToInt32(dt_notif.Rows[0]["Email"]);
                                    int Notif_status = Convert.ToInt32(dt_notif.Rows[0]["Notification"]);
                                    string notification_msg = Convert.ToString(dt_notif.Rows[0]["notification_msg"]);
                                    if (notification_msg.Contains("[Txn_Ref]") == true)
                                    {
                                        notification_msg = notification_msg.Replace("[Txn_Ref]", Convert.ToString(dt.Rows[0]["Refno"]));
                                    }

                                    int i = CompanyInfo.check_notification_perm(Convert.ToString(Customer_ID), obj.Client_ID, obj.Branch_ID, 3, 12, Convert.ToDateTime(obj.Record_Insert_DateTime), 1, SMS, Email, Notif_status, "App -Transaction Submit Notification - 6", notification_msg, Convert.ToInt32(dt.Rows[0]["Transaction_ID"]));
                                }
                            }
                            catch (Exception ex) { }
                            if (obj.Transaction_ID > 0)
                            {
                                SendMoneyToken = "";
                                sendhashexpire = Convert.ToDateTime("0001-01-01");
                            }
                            // GCC Transaction generate PIN number
                            string resultTransactionNum = "";
                            #region GCCRemit_Send_Transfer
                            if (obj.BranchListAPI_ID == 2 && obj.PaymentDepositType_ID == 2)
                            {
                                _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App - GCC Transaction.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                int api_id = 0; string apibankname = "", apiurl = "", apiuser = "", apipass = "", accesscode = "", apicompany_id = "",
                                    api_fields = "", webAccountNumber = "", debtAcct = "";

                                MySqlCommand cmd_select = new MySqlCommand("select a.ID,a.Bank_Name,a.api_Fields,cast(AES_DECRYPT(UNHEX(API_URL), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as API_URL,cast(AES_DECRYPT(UNHEX(APIUser_ID), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as APIUser_ID,cast(AES_DECRYPT(UNHEX(APIAccess_Code),'" + CompanyInfo.SecurityKey() + "') as  char(500)) as APIAccess_Code,APICompany_ID,cast(AES_DECRYPT(UNHEX(Password), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as Password from api_master a where ID = " + obj.BranchListAPI_ID); //api_id);
ySqlCommand cmd_select = new MySqlCommand("select * from api_master where ID = " + obj.BranchListAPI_ID);
                                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                                if (dtt.Rows.Count > 0)
                                {
                                    api_id = Convert.ToInt32(dtt.Rows[0]["ID"]);
                                    apibankname = Convert.ToString(dtt.Rows[0]["Bank_Name"]);
                                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                                    apiuser = Convert.ToString(dtt.Rows[0]["APIUser_ID"]);
                                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                                    accesscode = Convert.ToString(dtt.Rows[0]["APIAccess_Code"]);
                                    apicompany_id = Convert.ToString(dtt.Rows[0]["APICompany_ID"]);
                                    api_fields = Convert.ToString(dtt.Rows[0]["api_Fields"]);
                                    if (api_fields != "" && api_fields != null)
                                    {
                                        Newtonsoft.Json.Linq.JObject objf = Newtonsoft.Json.Linq.JObject.Parse(api_fields);
                                        webAccountNumber = Convert.ToString(objf["webAccountNumber"]);
                                        debtAcct = Convert.ToString(objf["debtAcct"]);
                                    }
                                }

                                if (api_id == 2)
                                {
                                    try
                                    {
                                        string Queryt = "select   Street as sender_street,Middle_Name ,House_Number as sender_house_number,ifnull(date_format(dd.SenderID_ExpiryDate,'%Y-%m-%d'),'') as SenderID_ExpiryDateymd,ifnull(date_format(b.DateOf_Birth,'%Y-%m-%d'),'') as benef_DOB_ymd,ifnull(date_format(dd1.SenderID_ExpiryDate,'%Y-%m-%d'),'') as benef_ExpiryDate_ymd,ifnull(date_format(c.DateOf_Birth,'%Y-%m-%d'),'') as Sender_DOB_ymd,rm.Relation,t.Comment,tm.APITransaction_ID,ifnull(date_format(dd.SenderID_ExpiryDate,'%d/%m/%Y'),'') as SenderID_ExpiryDatedmy,ifnull(date_format(dd.Issue_Date,'%d/%m/%Y'),'') as Issue_Datedmy,Beneficiary_Name, pt.Provider_name,bm.BankCode,from_curr.ISO_Code_Numeric as from_curr_ISO_code,to_curr.ISO_Code_Numeric as to_curr_ISO_code,cm.RDA_code,ifnull((t.Record_Insert_DateTime),'') as transaction_date_time,cm2.ISO_Code as benf_ISO_Code,tb.Iban_ID,abc.bank_code,abc.bank_name as abc_bank_name,ifnull(cait.Customer_API_ID,0) as Customer_API_ID,PaymentType_ID,Email_ID,ifnull(tm.Transaction_ID,0) as TransMap_ID,WireTransfer_ReferanceNo,Purpose,ReferenceNo,AmountInGBP,AmountInPKR,Exchange_Rate,Transfer_Fees,c.*,b.*, concat(First_Name,' ',ifnull(Middle_Name,''),' ',Last_Name) as Customer_Name, ci.City_Name as Beneficiary_City, cm2.Country_Name as Beneficiary_Country, " +
                         "Beneficiary_Mobile,Email_ID,IFNULL(cm1.Country_Name, '') AS Nationality_Country    ,Phone_Number,Mobile_Number,REPLACE(REPLACE( Concat(House_Number,' ',Street,' ',Post_Code), '\r', ''), '\n', '') as sender_address,Post_Code,jj.City_Name,cm.Country_Name, cm.ISO_Code,cm2.ISO_Code as BISO_Code,cm.Country_Code, cm2.Country_Code as BCountry_Code, cm.ISO_Code_Three, cm.ISO_Code_Three as NISO_Code_Three, cm2.ISO_Code_Three as BISO_Code_Three, " +
                         "ifnull(date_format(dd.SenderID_ExpiryDate,'%m/%d/%Y'),'') as SenderID_ExpiryDate,ifnull(date_format(c.DateOf_Birth,'%d/%m/%Y'),'') as Sender_DOB,ifnull(date_format(c.DateOf_Birth,'%m/%d/%Y'),'') as Sender_DateOfBirth,dd.SenderID_Number,ifnull(date_format(dd.Issue_Date,'%m/%d/%Y'),'') as Issue_Date, id.ID_Name, FromCurrency_Code,t.Currency_Code " +
                         ",dd1.SenderID_Number as BID_Number,bm.Bank_Name,tb.AccountHolderName, tb.Account_Number,tb.Ifsc_Code,tb.BranchCode,tb.Branch,PaymentDepositType_ID,rat.Relation_Code, pmt.Purpose_Code, idm.IDName_Code, idmt.Benf_IDName_Code as BIDName_Code, t.Deliverytype_Id, prm.Profession," +
                         "bbdt.Branch,ifnull(date_format(t.Record_Insert_DateTime,'%d/%m/%Y'),'') as transaction_date ,ifnull(date_format(t.Record_Insert_DateTime,'%T'),'') as transaction_time " +
                         " From Transaction_Table t inner join Customer_Registration c on t.Customer_ID=c.Customer_ID inner join Beneficiary_Master b on c.Customer_ID=b.Customer_ID and t.Beneficiary_ID=b.Beneficiary_ID left join transwise_benfbankdetails tb on t.Transaction_ID=tb.Transaction_ID left join bank_master bm on bm.Bank_ID=tb.BBank_ID " +
                         "left join Country_Master cm on c.Country_ID=cm.Country_ID left join Country_Master cm1 on c.Nationality_ID=cm1.Country_ID AND cm1.Client_ID = c.Client_ID left join Country_Master cm2 on b.Beneficiary_Country_ID=cm2.Country_ID " +
                         "left join city_master jj on c.city_id=jj.City_ID left join city_master ci on ci.City_ID=b.Beneficiary_City_ID " +
                         "left join documents_details dd on c.Customer_ID=dd.Customer_ID and dd.documents_details_id=1 AND (dd.Beneficiary_ID IS NULL OR dd.Beneficiary_ID <= 0) left join IDName_Master id on dd.IDName_ID=id.IDName_ID left join idnames_api_mapping_table idm on id.IDName_ID=idm.IDName_ID and idm.API_ID=" + api_id + " " +
                         "left join documents_details dd1 on t.Beneficiary_ID=dd1.Beneficiary_ID and dd1.documents_details_id=1 left join idnames_api_mapping_table idmt on dd1.IDName_ID=idmt.IDName_ID and idmt.API_ID=" + api_id + " " +
                         "left join relation_master rm on b.Relation_ID=rm.Relation_ID left join relation_api_table rat on rm.Relation_ID=rat.Relation_ID and rat.API_ID=" + api_id + " " +
                         "left join purpose_master pm on t.Purpose_ID=pm.Purpose_ID left join purpose_mapping_table pmt on pm.Purpose_ID=pmt.Purpose_ID and pmt.API_ID=" + api_id + " left join transaction_mapping_table tm on tm.Transaction_ID=t.Transaction_ID " +
                         "left join profession_master prm on c.Profession_ID=prm.ID " +
                         "left join beneficiarybankdetails_table bbdt on bbdt.Beneficiary_ID=b.Beneficiary_ID " +
                         "left join api_bank_codes abc on abc.bank_id=tb.BBank_ID and abc.API_ID=" + api_id + " " +
                         "left join customer_api_id_table cait on (cait.Customer_ID=c.Customer_ID and cait.api_id=" + api_id + ") " +
                         "left JOIN Currency_master from_curr ON from_curr.Currency_Code=t.FromCurrency_Code " +
                         "left JOIN Currency_master to_curr ON to_curr.Currency_Code=t.Currency_Code " +
                         "left Join provider_table pt on b.Mobile_provider=pt.Provider_Id " +
                         "where t.Client_ID=" + obj.Client_ID + " and t.Transaction_ID='" + obj.Transaction_ID + "' order by dd.SenderID_ID desc limit 1";
                                        cmd_select = new MySqlCommand(Queryt);
                                        DataTable dtgccapi = db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                                        string bname = Convert.ToString(dtgccapi.Rows[0]["Beneficiary_Name"]); string bfname = bname; string blname = ".";
                                        if (bname.Contains(" "))
                                        {
                                            string[] spli = bname.Split(' ');
                                            if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; } //if (spli.Length > 1) { bfname = spli[0]; blname = spli[1]; }
                                        }
                                        string ph_no = "";
                                        if (dtgccapi.Rows[0]["Mobile_Number"].ToString() != "")
                                        {
                                            ph_no = dtgccapi.Rows[0]["Mobile_Number"].ToString();
                                        }
                                        else if (dtgccapi.Rows[0]["Phone_Number"].ToString() != "")
                                        {
                                            ph_no = dtgccapi.Rows[0]["Phone_Number"].ToString();
                                        }
                                        string Bph_no = "";
                                        if (dtgccapi.Rows[0]["Beneficiary_Mobile"].ToString() != "")
                                        {
                                            Bph_no = dtgccapi.Rows[0]["Beneficiary_Mobile"].ToString();
                                        }

                                        int senderidtype = 1;
                                        if (Convert.ToString(dtgccapi.Rows[0]["ID_Name"]) == "Passport")
                                            senderidtype = 2;
                                        else if (Convert.ToString(dtgccapi.Rows[0]["ID_Name"]) == "Work Permit")
                                            senderidtype = 3;
                                        else if (Convert.ToString(dtgccapi.Rows[0]["ID_Name"]) == "Driving License")
                                            senderidtype = 4;
                                        else if (Convert.ToString(dtgccapi.Rows[0]["ID_Name"]) == "EU Nationality Card")
                                            senderidtype = 7;

                                        // Purpose of Transfer money...
                                        int sendTransferPurpose = 1;
                                        if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "medical")
                                            sendTransferPurpose = 2;
                                        else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Other purposes" || Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Holiday")
                                            sendTransferPurpose = 3;
                                        else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Education loan repayment")
                                            sendTransferPurpose = 4;
                                        else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "saving")
                                            sendTransferPurpose = 6;
                                        else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Investment")
                                            sendTransferPurpose = 8;
                                        else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Other loan repayment")
                                            sendTransferPurpose = 9;

                                        // Get BranchCode 
                                        string branchcodeData = Convert.ToString(obj.APIBranch_Details);
                                        string[] words = branchcodeData.Split('-');
                                        string branchcode = "", branchcodeValue = "", payoutbranchCode = "";
                                        int io = 0;
                                        foreach (var word in words)
                                        {
                                            branchcode = word;
                                            branchcodeValue = branchcode.Substring(0, 5);
                                            break;
                                        }

                                        foreach (var word in words)
                                        {
                                            payoutbranchCode = words[0] + "-" + words[1].Trim();
                                            break; ;
                                        }

                                        string costRate = "";

                                        var client = new RestClient(apiurl);
                                        client.Timeout = -1;
                                        // This request for Get Rates******************                                
                                        var request_ = new RestRequest(Method.POST);
                                        request_.AddHeader("Content-Type", "text/xml; charset=utf-8");
                                        request_.AddHeader("SOAPAction", "http://tempuri.org/ISendAPI/GetExchangeRate");
                                        var body_ = @"<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:tem=""http://tempuri.org/"" xmlns:grem=""http://schemas.datacontract.org/2004/07/GRemitWCFService.Send"">" + "\n" +
                                        @"   <soapenv:Header/>" + "\n" +
                                        @"   <soapenv:Body>" + "\n" +
                                        @"      <tem:GetExchangeRate>" + "\n" +
                                        @"         <!--Optional:-->" + "\n" +
                                        @"         <tem:req>" + "\n" +
                                        @"            <!--Optional:-->" + "\n" +
                                        @"            <grem:Password>" + apipass + "</grem:Password>" + "\n" +
                                        @"            <!--Optional:-->" + "\n" +
                                        @"            <grem:PayoutBranchCode>" + payoutbranchCode + "</grem:PayoutBranchCode>" + "\n" +
                                        @"            <!--Optional:-->" + "\n" +
                                        @"            <grem:SecurityKey>" + accesscode + "</grem:SecurityKey>" + "\n" +
                                        @"            <!--Optional:-->" + "\n" +
                                        @"            <grem:UniqueID>" + apiuser + "</grem:UniqueID>" + "\n" +
                                        @"         </tem:req>" + "\n" +
                                        @"      </tem:GetExchangeRate>" + "\n" +
                                        @"   </soapenv:Body>" + "\n" +
                                        @"</soapenv:Envelope>";
                                        request_.AddParameter("text/xml; charset=utf-8", body_, ParameterType.RequestBody);
                                        IRestResponse response_rate = client.Execute(request_);
                                        //mtsmethods.InsertActivityLogDetails("Get GCC Exchange Rate List request parameter <br/>" + body_ + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                        // mtsmethods.InsertActivityLogDetails("Get GCC Exchange Rate List response parameter <br/>" + response_rate.Content + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);


                                        System.Xml.XmlDocument xmlDoc_ = new System.Xml.XmlDocument();

                                        xmlDoc_.LoadXml(response_rate.Content);
                                        System.Xml.XmlNodeList nodeList_ = xmlDoc_.GetElementsByTagName("GetExchangeRateResult");
                                        foreach (System.Xml.XmlNode node12 in nodeList_)
                                        {
                                            string json2 = Newtonsoft.Json.JsonConvert.SerializeXmlNode(node12);
                                            var obj12 = Newtonsoft.Json.Linq.JObject.Parse(json2);
                                            costRate = Convert.ToString(obj12["GetExchangeRateResult"]["a:CostRate"]);
                                            break;
                                        }
                                        int PaymentDepositType_ID = obj.PaymentDepositType_ID;
                                        string payMethod_type = "";
                                        if (PaymentDepositType_ID == 1)
                                        {
                                            payMethod_type = "Bank";
                                        }
                                        else if (PaymentDepositType_ID == 2)
                                        {
                                            payMethod_type = "Pickup";
                                        }
                                        else if (PaymentDepositType_ID == 3)
                                        {
                                            payMethod_type = "Wallet";
                                        }
                                        client = new RestClient(apiurl);
                                        string Bankdetails = "";

                                        client.Timeout = -1;
                                        var request = new RestRequest(Method.POST);
                                        request.AddHeader("Content-Type", "text/xml; charset=utf-8");
                                        request.AddHeader("SOAPAction", "http://tempuri.org/ISendAPI/SendTransfer");
                                        var body2 = @"<?xml version=""1.0"" encoding=""utf-8""?>" + "\n" +
                                        @"<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:tem=""http://tempuri.org/"" xmlns:grem=""http://schemas.datacontract.org/2004/07/GRemitWCFService.Send"">" + "\n" +
                                        @"   <soapenv:Header/>" + "\n" +
                                        @"" + "\n" +
                                        @"<soapenv:Body>" + "\n" +
                                        @"<tem:SendTransfer>" + "\n" +
                                        @"<tem:req>" + "\n" +

                                        @"<grem:CostRate> " + costRate + " </grem:CostRate>" + "\n" +
                                        @"<grem:Password>" + apipass + "</grem:Password>" + "\n" +

                                        @"<grem:PayinAmount>" + String.Format("{0:0.##}", (Convert.ToDouble(dtgccapi.Rows[0]["AmountInPKR"]) / Convert.ToDouble(costRate))) + "</grem:PayinAmount>" + "\n" +
                                        @"<grem:PayoutAmount>" + Convert.ToString(dtgccapi.Rows[0]["AmountInPKR"]) + "</grem:PayoutAmount>" + "\n" +
                                        @"<grem:PayoutBranchCode>" + payoutbranchCode + "</grem:PayoutBranchCode>" + "\n" +
                                        @"<grem:PayoutCurrencyCode>" + Convert.ToString(dtgccapi.Rows[0]["Currency_Code"]) + "</grem:PayoutCurrencyCode>" + "\n" +
                                        @"<grem:PurposeCode>" + sendTransferPurpose + "</grem:PurposeCode>" + "\n" +

                                        @"<grem:ReceiverAddress> " + Convert.ToString(dtgccapi.Rows[0]["Beneficiary_Address"]) + "</grem:ReceiverAddress>" + "\n" +
                                        @"<grem:ReceiverDOB>" + Convert.ToString(dtgccapi.Rows[0]["benef_DOB_ymd"]) + "</grem:ReceiverDOB>" + "\n" +
                                        @"<grem:ReceiverFirstName>" + bfname + "</grem:ReceiverFirstName>" + "\n" +
                                        @"<grem:ReceiverFourthName></grem:ReceiverFourthName>" + "\n" +
                                        @"<grem:ReceiverLastName>" + blname + "</grem:ReceiverLastName>" + "\n" +
                                        @"<grem:ReceiverMessage></grem:ReceiverMessage>" + "\n" +
                                        @"<grem:ReceiverMiddleName></grem:ReceiverMiddleName>" + "\n" +
                                        @"<grem:ReceiverMobileNo>" + Bph_no + "</grem:ReceiverMobileNo>" + "\n" +
                                        @"<grem:ReceiverNationality>" + Convert.ToString(dtgccapi.Rows[0]["benf_ISO_Code"]) + "</grem:ReceiverNationality>" + "\n" +
                                        @"<grem:ReceiverRelationship>" + Convert.ToString(dtgccapi.Rows[0]["Relation"]) + "</grem:ReceiverRelationship>" + "\n" +
                                        @"<grem:ReceiverTelephoneNo></grem:ReceiverTelephoneNo>" + "\n" +
                                        @"<grem:ReceiverZipCode></grem:ReceiverZipCode>" + "\n" +

                                        @"<grem:ReferenceNo>" + Convert.ToString(dtgccapi.Rows[0]["ReferenceNo"]) + "</grem:ReferenceNo>" + "\n" +
                                        @"<grem:SecurityKey>" + accesscode + "</grem:SecurityKey>" + "\n" +
                                        @"<grem:SenderAddress>" + Convert.ToString(dtgccapi.Rows[0]["sender_address"]) + "</grem:SenderAddress>" + "\n" +
                                        @"<grem:SenderDOB>" + Convert.ToString(dtgccapi.Rows[0]["Sender_DateOfBirth"]) + "</grem:SenderDOB>" + "\n" +
                                        @"<grem:SenderEmail>" + Convert.ToString(dtgccapi.Rows[0]["Email_ID"]) + "</grem:SenderEmail>" + "\n" +
                                        @"<grem:SenderFirstName>" + Convert.ToString(dtgccapi.Rows[0]["First_Name"]) + "</grem:SenderFirstName>" + "\n" +
                                        @"<grem:SenderFourthName></grem:SenderFourthName>" + "\n" +
                                        @"<grem:SenderIDExpiryDate>" + Convert.ToString(dtgccapi.Rows[0]["SenderID_ExpiryDate"]) + "</grem:SenderIDExpiryDate>" + "\n" +
                                        @"<grem:SenderIDNumber>" + Convert.ToString(dtgccapi.Rows[0]["SenderId_Number"]) + "</grem:SenderIDNumber>" + "\n" +
                                        @"<grem:SenderIDPlaceOfIssue>" + Convert.ToString(dtgccapi.Rows[0]["ISO_Code"]) + "</grem:SenderIDPlaceOfIssue>" + "\n" +
                                        @"<grem:SenderIDType>" + senderidtype + "</grem:SenderIDType>" + "\n" +
                                        @"<grem:SenderLastName>" + Convert.ToString(dtgccapi.Rows[0]["Last_Name"]) + "</grem:SenderLastName>" + "\n" +
                                        @"<grem:SenderMiddleName>" + Convert.ToString(dtgccapi.Rows[0]["Middle_Name"]) + "</grem:SenderMiddleName>" + "\n" +
                                        @"<grem:SenderMobileNo>" + ph_no + "</grem:SenderMobileNo>" + "\n" +
                                        @"<grem:SenderNationality>" + Convert.ToString(dtgccapi.Rows[0]["ISO_Code"]) + "</grem:SenderNationality>" + "\n" +
                                        @"<grem:SenderTelephoneNo>" + ph_no + "</grem:SenderTelephoneNo>" + "\n" +
                                        @"<grem:SenderZipCode>" + Convert.ToString(dtgccapi.Rows[0]["Post_Code"]) + "</grem:SenderZipCode>" + "\n" +

                                        @"<grem:TransactionNo></grem:TransactionNo>" + "\n" +
                                        @"<grem:UniqueID>" + apiuser + "</grem:UniqueID>" + "\n" +
                                        @"</tem:req>" + "\n" +
                                        @"</tem:SendTransfer>" + "\n" +
                                        @"</soapenv:Body>" + "\n" +
                                        @"  " + "\n" +
                                        @"</soapenv:Envelope>" + "\n" +
                                        @"";
                                        request.AddParameter("text/xml; charset=utf-8", body2, ParameterType.RequestBody);
                                        //mtsmethods.InsertActivityLogDetails("Confirm gcc remittance All parameter send transfer request: <br/>" + body2 + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                        IRestResponse response = client.Execute(request);
                                        System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();

                                        xmlDoc.LoadXml(response.Content);
                                        System.Xml.XmlNodeList nodeList = xmlDoc.GetElementsByTagName("SendTransferResult");

                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App- Confirm GCC remittance all parameter send transfer request parameter: <br/>" + body2 + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money",_srvTransactionContext));
                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App- Confirm GCC send transfer responce parameter : <br/>" + response.Content + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                        //mtsmethods.InsertActivityLogDetails("Confirm gcc send transfer responce : <br/>" + response.Content + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                        string responseCode = "", messageResponse = "";
                                        foreach (System.Xml.XmlNode node1 in nodeList)
                                        {
                                            string json = Newtonsoft.Json.JsonConvert.SerializeXmlNode(node1);
                                            //mtsmethods.InsertActivityLogDetails("Confirm gcc remittance response parameters: <br/>" + json + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                            var obj1 = Newtonsoft.Json.Linq.JObject.Parse(json);
                                            messageResponse = Convert.ToString(obj1["SendTransferResult"]["a:ResponseMessage"]);
                                            responseCode = Convert.ToString(obj1["SendTransferResult"]["a:ResponseCode"]);
                                            resultTransactionNum = Convert.ToString(obj1["SendTransferResult"]["a:TransactionNo"]);
                                            dt.Rows[0]["gcc_pinnumber"] = resultTransactionNum;
                                        }

                                        if (responseCode == "001")
                                        {
                                            string Query = " Update transaction_mapping_table set APITransaction_ID='" + resultTransactionNum + "'  where Transaction_ID =" + obj.Transaction_ID + " and Client_ID=" + obj.Client_ID + " ";
                                            cmd_select = new MySqlCommand(Query);
                                            db_connection.ExecuteQueryDataTableProcedure(cmd_select);
                                        }
                                        else
                                        {
                                            dt.Rows[0]["gcc_pinnumber"] = "";
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        dt.Rows[0]["gcc_pinnumber"] = "";
                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App- Confirm GCC send transfer   parameter error: <br/>" + ex.ToString() + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                        //CompanyInfo.InsertActivityLogDetails("Add remittance Error response parameters: <br/>" + ex.ToString() + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                    }

                                }

                            }
                            else if (obj.BranchListAPI_ID == 18)
                            {
                                int api_id = 0; string apibankname = "", apiurl = "", apiuser = "", apipass = "", accesscode = "", apicompany_id = "",
                                   api_fields = "", webAccountNumber = "", debtAcct = "";
                                _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App- Confirm Crosspay   request start: <br/>" + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));

                                MySqlCommand cmd_select = new MySqlCommand("select a.ID,a.Bank_Name,a.api_Fields,cast(AES_DECRYPT(UNHEX(API_URL), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as API_URL,cast(AES_DECRYPT(UNHEX(APIUser_ID), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as APIUser_ID,cast(AES_DECRYPT(UNHEX(APIAccess_Code),'" + CompanyInfo.SecurityKey() + "') as  char(500)) as APIAccess_Code,APICompany_ID,cast(AES_DECRYPT(UNHEX(Password), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as Password from api_master a where ID = " + obj.BranchListAPI_ID); //api_id);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            //MySqlCommand cmd_select = new MySqlCommand("select * from api_master where ID = " + obj.BranchListAPI_ID);
                                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                                if (dtt.Rows.Count > 0)
                                {
                                    api_id = Convert.ToInt32(dtt.Rows[0]["ID"]);
                                    apibankname = Convert.ToString(dtt.Rows[0]["Bank_Name"]);
                                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                                    apiuser = Convert.ToString(dtt.Rows[0]["APIUser_ID"]);
                                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                                    accesscode = Convert.ToString(dtt.Rows[0]["APIAccess_Code"]);
                                    apicompany_id = Convert.ToString(dtt.Rows[0]["APICompany_ID"]);
                                    api_fields = Convert.ToString(dtt.Rows[0]["api_Fields"]);
                                    if (api_fields != "" && api_fields != null)
                                    {
                                        Newtonsoft.Json.Linq.JObject objf = Newtonsoft.Json.Linq.JObject.Parse(api_fields);
                                        webAccountNumber = Convert.ToString(objf["webAccountNumber"]);
                                        debtAcct = Convert.ToString(objf["debtAcct"]);
                                    }
                                }
                                if (api_id == 18)
                                {   // While Submit the transaction create Pin number incomplete transaction 
                                    string proceed_method = " Submit transaction proceed while incomplete transaction APP ";
                                    #region Crosspay_single_transfer
                                    try
                                    {
                                        string Queryt = "select  Beneficiary_PostCode, ci.City_Name as Beneficiary_City,IFNULL(cm1.nationality, '') AS sendernationality,Street as sender_street,Middle_Name ,House_Number as sender_house_number,ifnull(date_format(dd.SenderID_ExpiryDate,'%Y-%m-%d'),'') as SenderID_ExpiryDateymd,ifnull(date_format(b.DateOf_Birth,'%Y-%m-%d'),'') as benef_DOB_ymd,ifnull(date_format(dd1.SenderID_ExpiryDate,'%Y-%m-%d'),'') as benef_ExpiryDate_ymd,ifnull(date_format(c.DateOf_Birth,'%Y-%m-%d'),'') as Sender_DOB_ymd,rm.Relation,t.Comment,tm.APITransaction_ID,ifnull(date_format(dd.SenderID_ExpiryDate,'%d/%m/%Y'),'') as SenderID_ExpiryDatedmy,ifnull(date_format(dd.Issue_Date,'%d/%m/%Y'),'') as Issue_Datedmy,Beneficiary_Name, pt.Provider_name,bm.BankCode,from_curr.ISO_Code_Numeric as from_curr_ISO_code,to_curr.ISO_Code_Numeric as to_curr_ISO_code,cm.RDA_code,ifnull((t.Record_Insert_DateTime),'') as transaction_date_time,cm2.ISO_Code as benf_ISO_Code,tb.Iban_ID,abc.bank_code,abc.bank_name as abc_bank_name,ifnull(cait.Customer_API_ID,0) as Customer_API_ID,PaymentType_ID,Email_ID,ifnull(tm.Transaction_ID,0) as TransMap_ID,WireTransfer_ReferanceNo,Purpose,ReferenceNo,AmountInGBP,AmountInPKR,Exchange_Rate,Transfer_Fees,c.*,b.*, concat(First_Name,' ',ifnull(Middle_Name,''),' ',Last_Name) as Customer_Name, ci.City_Name as Beneficiary_City, cm2.Country_Name as Beneficiary_Country, " +
                      "Beneficiary_Mobile,Email_ID,IFNULL(cm1.Country_Name, '') AS Nationality_Country    ,Phone_Number,Mobile_Number,REPLACE(REPLACE( Concat(House_Number,' ',Street,' ',Post_Code), '\r', ''), '\n', '') as sender_address,Post_Code,jj.City_Name,cm.Country_Name, cm.ISO_Code,cm2.ISO_Code as BISO_Code,cm.Country_Code, cm2.Country_Code as BCountry_Code, cm.ISO_Code_Three, cm.ISO_Code_Three as NISO_Code_Three, cm2.ISO_Code_Three as BISO_Code_Three, " +
                      "ifnull(date_format(dd.SenderID_ExpiryDate,'%m/%d/%Y'),'') as SenderID_ExpiryDate,ifnull(date_format(c.DateOf_Birth,'%d/%m/%Y'),'') as Sender_DOB,ifnull(date_format(c.DateOf_Birth,'%m/%d/%Y'),'') as Sender_DateOfBirth,dd.SenderID_Number,ifnull(date_format(dd.Issue_Date,'%m/%d/%Y'),'') as Issue_Date, id.ID_Name, FromCurrency_Code,t.Currency_Code " +
                      ",dd1.SenderID_Number as BID_Number,bm.Bank_Name,tb.AccountHolderName, tb.Account_Number,tb.Ifsc_Code,tb.BranchCode,tb.Branch,PaymentDepositType_ID,rat.Relation_Code, pmt.Purpose_Code, idm.IDName_Code, idmt.Benf_IDName_Code as BIDName_Code, t.Deliverytype_Id, prm.Profession," +
                      "bbdt.Branch,ifnull(date_format(t.Record_Insert_DateTime,'%d/%m/%Y'),'') as transaction_date ,ifnull(date_format(t.Record_Insert_DateTime,'%T'),'') as transaction_time " +
                      " From Transaction_Table t inner join Customer_Registration c on t.Customer_ID=c.Customer_ID inner join Beneficiary_Master b on c.Customer_ID=b.Customer_ID and t.Beneficiary_ID=b.Beneficiary_ID left join transwise_benfbankdetails tb on t.Transaction_ID=tb.Transaction_ID left join bank_master bm on bm.Bank_ID=tb.BBank_ID " +
                      "left join Country_Master cm on c.Country_ID=cm.Country_ID left join Country_Master cm1 on c.Nationality_ID=cm1.Country_ID AND cm1.Client_ID = c.Client_ID left join Country_Master cm2 on b.Beneficiary_Country_ID=cm2.Country_ID " +
                      "left join city_master jj on c.city_id=jj.City_ID left join city_master ci on ci.City_ID=b.Beneficiary_City_ID " +
                      "left join documents_details dd on c.Customer_ID=dd.Customer_ID and dd.documents_details_id=1 AND (dd.Beneficiary_ID IS NULL OR dd.Beneficiary_ID <= 0) left join IDName_Master id on dd.IDName_ID=id.IDName_ID left join idnames_api_mapping_table idm on id.IDName_ID=idm.IDName_ID and idm.API_ID=" + api_id + " " +
                      "left join documents_details dd1 on t.Beneficiary_ID=dd1.Beneficiary_ID and dd1.documents_details_id=1 left join idnames_api_mapping_table idmt on dd1.IDName_ID=idmt.IDName_ID and idmt.API_ID=" + api_id + " " +
                      "left join relation_master rm on b.Relation_ID=rm.Relation_ID left join relation_api_table rat on rm.Relation_ID=rat.Relation_ID and rat.API_ID=" + api_id + " " +
                      "left join purpose_master pm on t.Purpose_ID=pm.Purpose_ID left join purpose_mapping_table pmt on pm.Purpose_ID=pmt.Purpose_ID and pmt.API_ID=" + api_id + " left join transaction_mapping_table tm on tm.Transaction_ID=t.Transaction_ID " +
                      "left join profession_master prm on c.Profession_ID=prm.ID " +
                      "left join beneficiarybankdetails_table bbdt on bbdt.Beneficiary_ID=b.Beneficiary_ID " +
                      "left join api_bank_codes abc on abc.bank_id=tb.BBank_ID and abc.API_ID=" + api_id + " " +
                      "left join customer_api_id_table cait on (cait.Customer_ID=c.Customer_ID and cait.api_id=" + api_id + ") " +
                      "left JOIN Currency_master from_curr ON from_curr.Currency_Code=t.FromCurrency_Code " +
                      "left JOIN Currency_master to_curr ON to_curr.Currency_Code=t.Currency_Code " +
                      "left Join provider_table pt on b.Mobile_provider=pt.Provider_Id " +
                      "where t.Client_ID=" + obj.Client_ID + " and t.Transaction_ID='" + obj.Transaction_ID + "' order by dd.SenderID_ID desc limit 1";
                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App- Confirm Crosspay   request Queryt : <br/>" + Queryt + "", obj.User_ID, 0, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                        cmd_select = new MySqlCommand(Queryt);
                                        DataTable dt_crosspay = db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                                        string bname = Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_Name"]); string bfname = bname; string blname = ".";
                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App- Confirm Crosspay   request beneficiary : <br/>" + bname + "", obj.User_ID, 0, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                        if (bname.Contains(" "))
                                        {
                                            string[] spli = bname.Split(' ');
                                            if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; }
                                        }
                                        string ph_no = "";
                                        if (dt_crosspay.Rows[0]["Mobile_Number"].ToString() != "")
                                        {
                                            ph_no = "\"" + "+" + dt_crosspay.Rows[0]["Country_Code"].ToString() + "-" + (dt_crosspay.Rows[0]["Mobile_Number"].ToString()).Substring(dt_crosspay.Rows[0]["Country_Code"].ToString().Length) + "\"";
                                        }
                                        else if (dt_crosspay.Rows[0]["Phone_Number"].ToString() != "")
                                        {
                                            ph_no = "\"" + "+" + dt_crosspay.Rows[0]["Country_Code"].ToString() + "-" + (dt_crosspay.Rows[0]["Phone_Number"].ToString()).Substring(dt_crosspay.Rows[0]["Country_Code"].ToString().Length) + "\"";
                                        }
                                        string Bph_no = "";
                                        if (dt_crosspay.Rows[0]["Beneficiary_Mobile"].ToString() != "")
                                        {
                                            Bph_no = "\"" + "+" + dt_crosspay.Rows[0]["BCountry_Code"].ToString() + "-" + (dt_crosspay.Rows[0]["Beneficiary_Mobile"].ToString()).Substring(dt_crosspay.Rows[0]["BCountry_Code"].ToString().Length) + "\"";
                                        }


                                        var client = new RestClient(apiurl + "transaction/create");
                                        client.Timeout = -1;
                                        string origin = "";
                                        string api_fieldsVal = Convert.ToString(dtt.Rows[0]["api_Fields"]);
                                        if (api_fieldsVal != "" && api_fieldsVal != null)
                                        {
                                            Newtonsoft.Json.Linq.JObject objcross = Newtonsoft.Json.Linq.JObject.Parse(api_fieldsVal);
                                            origin = Convert.ToString(objcross["origin"]);
                                        }
                                        var request = new RestRequest(Method.POST);
                                        request.AddHeader("X-API-KEY", accesscode);
                                        request.AddHeader("Origin", origin);

                                        string fromCurrencyCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["FromCurrency_Code"]).Trim() + "\"";
                                        string recevingCurrencyCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Currency_Code"]).Trim() + "\"";
                                        string tpTransactionReferenceNumber = "\"" + Convert.ToString(dt_crosspay.Rows[0]["ReferenceNo"]).Trim() + "\"";
                                        string senderCountryCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["ISO_Code"]).Trim() + "\"";
                                        string receiverCountryCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["benf_ISO_Code"]).Trim() + "\"";
                                        string purposeMoneyTransfer = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() + "\"";

                                        if (string.IsNullOrEmpty(Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim()))
                                        {
                                            purposeMoneyTransfer = "\"" + "Family or Friend Support" + "\"";
                                        }
                                        else
                                        {
                                            if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Family support")
                                            {
                                                purposeMoneyTransfer = "\"" + "Family or Friend Support" + "\"";
                                            }
                                            else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Occasional gift" || Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Holiday")
                                            {
                                                purposeMoneyTransfer = "\"" + "Gift/Donation" + "\"";
                                            }
                                            else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "medical")
                                            {
                                                purposeMoneyTransfer = "\"" + "Medical Expenses" + "\"";
                                            }
                                            else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Other purposes" || Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Other loan repayment")
                                            {
                                                purposeMoneyTransfer = "\"" + "Family or Friend Support" + "\"";
                                            }
                                            else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "saving" || Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Investment")
                                            {
                                                purposeMoneyTransfer = "\"" + "Investment in Real Estate" + "\"";
                                            }
                                            else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Education loan repayment")
                                            {
                                                purposeMoneyTransfer = "\"" + "Education Fees" + "\"";
                                            }
                                            else
                                            {
                                                purposeMoneyTransfer = "\"" + "Family or Friend Support" + "\"";
                                            }
                                        }

                                        string receiverAddress1 = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_Address"]).Trim() + "\"";
                                        string senderContactEmail = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Email_ID"]).Trim() + "\"";
                                        bfname = "\"" + bfname + "\"";
                                        blname = "\"" + blname + "\"";
                                        string senderFirstName = "\"" + Convert.ToString(dt_crosspay.Rows[0]["First_Name"]).Trim() + "\"";
                                        string senderLastName = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Last_Name"]).Trim() + "\"";
                                        string Profession = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim() + "\"";

                                        if (Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim() == "Accountants" || Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim() == "Actors" || Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim() == "Actors"
                                            || Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim().Contains("Teachers") || Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim().Contains("Advertis"))
                                        {
                                            Profession = "\"" + "Salary" + "\"";
                                        }
                                        else if (Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim().Contains("Business"))
                                        {
                                            Profession = "\"" + "Business/Trade" + "\"";
                                        }
                                        else
                                        {
                                            Profession = "\"" + "Other" + "\"";
                                        }


                                        string senderDateOfBirth = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Sender_DOB_ymd"]).Trim() + "\"";
                                        string benef_DOB_ymd = "\"" + Convert.ToString(dt_crosspay.Rows[0]["benef_DOB_ymd"]).Trim() + "\"";
                                        string receiverAccountNumber = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Account_Number"]).Trim() + "\"";
                                        if (!string.IsNullOrEmpty(Convert.ToString(dt_crosspay.Rows[0]["Iban_ID"]).Trim()))
                                        {
                                            receiverAccountNumber = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Iban_ID"]).Trim() + "\"";
                                        }

                                        string receivingAmount = "\"" + Convert.ToDouble(dt_crosspay.Rows[0]["AmountInPKR"]) + "\"";

                                        string senderIDType = "";

                                        if (Convert.ToString(dt_crosspay.Rows[0]["ID_Name"]).Trim() == "Passport")
                                            senderIDType = "\"" + "Passport" + "\"";
                                        else if (Convert.ToString(dt_crosspay.Rows[0]["ID_Name"]).Trim() == "Driving License" || Convert.ToString(dt_crosspay.Rows[0]["ID_Name"]).Trim() == "UK Driving License")
                                            senderIDType = "\"" + "Driving License" + "\"";
                                        else
                                            senderIDType = "\"" + "Passport" + "\"";


                                        string sortCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Ifsc_Code"]).Trim() + "\"";
                                        string ifscCodeNumber = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Ifsc_Code"]).Trim() + "\"";
                                        string sender_address = "\"" + Convert.ToString(dt_crosspay.Rows[0]["sender_address"]).Trim() + "\"";
                                        string Country_Name = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Country_Name"]).Trim() + "\"";

                                        string Nationality_Country = "\"" + Convert.ToString(dt_crosspay.Rows[0]["sendernationality"]).Trim() + "\"";

                                        if (!string.IsNullOrEmpty(Convert.ToString(dt_crosspay.Rows[0]["sendernationality"]).Trim()))
                                        {
                                            Nationality_Country = Convert.ToString(dt_crosspay.Rows[0]["sendernationality"]).Trim();
                                            Nationality_Country = "\"" + Nationality_Country + "\"";
                                        }

                                        string SenderID_Number = "\"" + Convert.ToString(dt_crosspay.Rows[0]["SenderID_Number"]).Trim() + "\"";
                                        string senderMiddleName = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Middle_Name"]).Trim() + "\"";
                                        string payinDate = "\"" + Convert.ToString(dt_crosspay.Rows[0]["transaction_date_time"]).Trim() + "\"";
                                        string gender = "\"" + "Others" + "\"";
                                        string senderEntityName = "\"" + "" + "\"";
                                        string senderType = "\"" + "I" + "\"";
                                        string receiverType = "\"" + "I" + "\"";

                                        string sender_street = "\"" + Convert.ToString(dt_crosspay.Rows[0]["sender_street"]).Trim() + "\"";
                                        string senderCity_Name = "\"" + Convert.ToString(dt_crosspay.Rows[0]["City_Name"]).Trim() + "\"";
                                        string senderPinCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Post_Code"]).Trim() + "\"";
                                        int PaymentDepositType_ID = obj.PaymentDepositType_ID;
                                        string serviceType = "\"" + "AC" + "\"";
                                        string transactionType = "AC";
                                        if (PaymentDepositType_ID == 2)
                                        {
                                            serviceType = "\"" + "CP" + "\""; // CASH
                                            transactionType = "CP";
                                        }
                                        if (PaymentDepositType_ID == 3)
                                        {
                                            serviceType = "\"" + "MW" + "\""; // Mobile Wallet
                                            transactionType = "MW";
                                        }

                                        string bankTransaction = ""; string walletProviderName = "", cashPickupAgent = "";
                                        string payerIdValue = Convert.ToString(obj.APIBranch_Details);
                                        if (transactionType == "AC")
                                        {

                                            string[] words = payerIdValue.Split('-');
                                            int v = 0; string bankName = "";
                                            foreach (var word in words)
                                            {
                                                if (v == 0)
                                                {
                                                    bankName = word.Trim();
                                                }
                                                if (v == 1)
                                                {
                                                    sortCode = "\"" + word.Trim() + "\"";
                                                    break;
                                                }
                                                v++;
                                            }

                                            bankTransaction = @"  ""receiverAccountNumber"" : " + receiverAccountNumber + "," + "\n" +
                                                  @"  ""bankCode"" : " + sortCode + "," + "\n" +
                                                  @"  ""branchIdentifier"" : " + ifscCodeNumber + "," + "\n"
                                                  ;
                                        }
                                        else if (transactionType == "MW")
                                        {
                                            string[] words = payerIdValue.Split('-');
                                            int v = 0;
                                            foreach (var word in words)
                                            {
                                                if (v == 0)
                                                {
                                                    walletProviderName = "\"" + word.Trim() + "\"";
                                                    break;
                                                }
                                            }
                                        }
                                        else if (transactionType == "CP")
                                        {
                                            string[] words = payerIdValue.Split('-');
                                            int v = 0;
                                            foreach (var word in words)
                                            {
                                                if (v == 0)
                                                {
                                                    cashPickupAgent = "\"" + word.Trim() + "\"";
                                                    break;
                                                }
                                            }
                                        }

                                        string receiverEntityName = "\"" + "CROSSPAY" + "\"";
                                        string receiverCity = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_City"]).Trim() + "\"";
                                        string receiverState = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_City"]).Trim() + "\"";
                                        string receiverStreet = "\"" + Convert.ToString(bt.Rows[0]["Beneficiary_Address"]).Trim() + "\"";
                                        string receiverPinCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_PostCode"]).Trim() + "\"";
                                        string dateTime1 = "\"" + DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.zzz") + "\"";

                                        request.AddHeader("Content-Type", "application/json");
                                        var body_crosspay = "";
                                        if (transactionType == "CP")
                                        {
                                            body_crosspay = @"{" + "\n" +
                                            @"  ""payinDate"" : " + dateTime1 + "," + "\n" +
                                            @"  ""tpTransactionReferenceNumber"" : " + tpTransactionReferenceNumber + "," + "\n" +
                                            @"  ""senderEntityName"" : " + senderEntityName + "," + "\n" +
                                            @"  ""senderType"": " + senderType + "," + "\n" +
                                            @"  ""senderFirstName"": " + senderFirstName + "," + "\n" +
                                            @"  ""senderMiddleName"": " + senderMiddleName + "," + "\n" +
                                            @"  ""senderLastName"": " + senderLastName + "," + "\n" +
                                            @"  ""senderAddress1"": " + sender_address + "," + "\n" +
                                            @"  ""senderAddress2"": " + Country_Name + "," + "\n" +
                                            @"  ""senderContactNumber"": " + ph_no + "," + "\n" +
                                            @"    ""senderPinCode"" : " + senderPinCode + "," + "\n" +
                                            @"    ""senderCity"" : " + senderCity_Name + "," + "\n" +
                                            @"    ""senderState"" : " + sender_street + ", " + "\n" +
                                            @"  ""senderContactEmail"": " + senderContactEmail + "," + "\n" +
                                            @"  ""cashPickupAgentName"": " + cashPickupAgent + "," + "\n" +
                                            @"  ""senderGender"": " + gender + "," + "\n" +
                                            @"  ""senderDateOfBirth"" : " + senderDateOfBirth + "," + "\n" +
                                            @"  ""senderNationality"" : " + Nationality_Country + "," + "\n" +
                                            @"  ""senderCountryCode"": " + senderCountryCode + "," + "\n" +
                                            @"  ""senderIDType"": " + senderIDType + "," + "\n" +
                                            @"  ""senderIDNumber"": " + SenderID_Number + "," + "\n" +
                                            @"  ""fromCurrencyCode"": " + fromCurrencyCode + "," + "\n" +
                                            @"  ""receiverEntityName"" : " + receiverEntityName + "," + "\n" +
                                            @"  ""receiverType"" : " + receiverType + "," + "\n" +
                                            @"  ""receiverFirstName"": " + bfname + "," + "\n" +
                                            @"  ""receiverMiddleName"": """"," + "\n" +
                                            @"  ""receiverLastName"": " + blname + "," + "\n" +
                                            @"  ""receiverAddress1"": " + receiverAddress1 + "," + "\n" +
                                            @"  ""receiverPinCode"" : """"," + "\n" +
                                            @"  ""receiverDateOfBirth"": " + benef_DOB_ymd + "," + "\n" +
                                            @"  ""receiverGender"" : " + gender + "," + "\n" +
                                            @"  ""receiverCountryCode"": " + receiverCountryCode + "," + "\n" +
                                            @"  ""receiverMobileNumber"": " + Bph_no + "," + "\n" +
                                            @"  ""payoutAmount"": " + Convert.ToDouble(dt_crosspay.Rows[0]["AmountInPKR"]) + "," + "\n" +
                                            @"  ""serviceType"" : " + serviceType + "," + "\n" +
                                            @"  ""sourceOfFunds"": " + Profession + "," + "\n" +
                                            @"  ""purposeOfTransfer"": " + purposeMoneyTransfer + "," + "\n" +
                                            @"  ""toCurrencyCode"": " + recevingCurrencyCode + "" + "\n" +
                                            @"}";
                                        }
                                        else if (transactionType == "AC")
                                        {
                                            body_crosspay = @"{" + "\n" +
                                            @"  ""payinDate"" : " + dateTime1 + "," + "\n" +
                                            @"  ""tpTransactionReferenceNumber"" : " + tpTransactionReferenceNumber + "," + "\n" +
                                            @"  ""senderEntityName"" : " + senderEntityName + "," + "\n" +
                                            @"  ""senderType"": " + senderType + "," + "\n" +
                                            @"  ""senderFirstName"": " + senderFirstName + "," + "\n" +
                                            @"  ""senderMiddleName"": " + senderMiddleName + "," + "\n" +
                                            @"  ""senderLastName"": " + senderLastName + "," + "\n" +
                                            @"  ""senderAddress1"": " + sender_address + "," + "\n" +
                                            @"  ""senderAddress2"": " + Country_Name + "," + "\n" +
                                            @"  ""senderContactNumber"": " + ph_no + "," + "\n" +
                                            @"  ""senderContactEmail"": " + senderContactEmail + "," + "\n" +
                                            @"  ""senderGender"": " + gender + "," + "\n" +
                                            @"  ""senderDateOfBirth"" : " + senderDateOfBirth + "," + "\n" +
                                            @"  ""senderNationality"" : " + Nationality_Country + "," + "\n" +
                                            @"  ""senderCountryCode"": " + senderCountryCode + "," + "\n" +
                                            @"  ""senderIDType"": " + senderIDType + "," + "\n" +
                                            @"  ""senderIDNumber"": " + SenderID_Number + "," + "\n" +
                                            @"    ""senderPinCode"" : " + senderPinCode + "," + "\n" +
                                           @"    ""senderCity"" : " + senderCity_Name + "," + "\n" +
                                           @"    ""senderState"" : " + sender_street + ", " + "\n" +
                                            @"  ""fromCurrencyCode"": " + fromCurrencyCode + "," + "\n" +
                                            @"  ""receiverType"" : " + receiverType + "," + "\n" +
                                           @"  ""receiverEntityName"" : " + receiverEntityName + "," + "\n" +
                                            @"  ""receiverFirstName"": " + bfname + "," + "\n" +

                                            @"  ""receiverCity"": " + receiverCity + "," + "\n" +
                                            @"  ""receiverState"": " + receiverState + "," + "\n" +
                                            @"  ""receiverStreet"": " + receiverStreet + "," + "\n" +
                                            @"  ""receiverPinCode"": " + receiverPinCode + "," + "\n" +

                                            @"  ""receiverMiddleName"": """"," + "\n" +
                                            @"  ""receiverLastName"": " + blname + "," + "\n" +
                                            @"  ""receiverAddress1"": " + receiverAddress1 + "," + "\n" +
                                            @"  ""receiverAddress2"": " + receiverAddress1 + "," + "\n" +
                                            @"  ""receiverCountryCode"": " + receiverCountryCode + "," + "\n" +
                                            @"  ""receiverMobileNumber"": " + Bph_no + "," + "\n" +
                                            @"  ""receiverGender"" : " + gender + "," + "\n" +
                                            @"  ""payoutAmount"": " + Convert.ToDouble(dt_crosspay.Rows[0]["AmountInPKR"]) + "," + "\n" +
                                            bankTransaction +
                                            @"  ""serviceType"" : " + serviceType + "," + "\n" +
                                            @"  ""sourceOfFunds"": " + Profession + "," + "\n" +
                                            @"  ""purposeOfTransfer"": " + purposeMoneyTransfer + "," + "\n" +
                                            @"  ""toCurrencyCode"": " + recevingCurrencyCode + "" + "\n" +
                                            @"}";
                                        }
                                        else if (transactionType == "MW")
                                        {
                                            body_crosspay = @"{" + "\n" +
                                            @"  ""payinDate"" : " + dateTime1 + "," + "\n" +
                                            @"  ""tpTransactionReferenceNumber"" : " + tpTransactionReferenceNumber + "," + "\n" +
                                            @"  ""senderEntityName"" : " + senderEntityName + "," + "\n" +
                                            @"  ""senderType"": " + senderType + "," + "\n" +
                                            @"  ""senderFirstName"": " + senderFirstName + "," + "\n" +
                                            @"  ""senderMiddleName"": " + senderMiddleName + "," + "\n" +
                                            @"  ""senderLastName"": " + senderLastName + "," + "\n" +
                                            @"  ""senderAddress1"": " + sender_address + "," + "\n" +
                                            @"  ""senderAddress2"": " + Country_Name + "," + "\n" +
                                            @"  ""senderContactNumber"": " + ph_no + "," + "\n" +
                                            @"    ""senderPinCode"" : " + senderPinCode + "," + "\n" +
                                            @"    ""senderCity"" : " + senderCity_Name + "," + "\n" +
                                            @"  ""senderContactEmail"": " + senderContactEmail + "," + "\n" +
                                            @"    ""senderState"" : " + sender_street + ", " + "\n" +
                                            @"  ""senderGender"": " + gender + "," + "\n" +
                                            @"  ""senderDateOfBirth"" : " + senderDateOfBirth + "," + "\n" +
                                            @"  ""senderNationality"" : " + Nationality_Country + "," + "\n" +
                                            @"  ""senderCountryCode"": " + senderCountryCode + "," + "\n" +
                                            @"  ""senderIDType"": " + senderIDType + "," + "\n" +
                                            @"  ""senderIDNumber"": " + SenderID_Number + "," + "\n" +
                                            @"  ""fromCurrencyCode"": " + fromCurrencyCode + "," + "\n" +
                                            @"  ""receiverType"" : " + receiverType + "," + "\n" +
                                            @"  ""receiverFirstName"": " + bfname + "," + "\n" +
                                            @"  ""receiverMiddleName"": """"," + "\n" +
                                            @"  ""receiverLastName"": " + blname + "," + "\n" +
                                            @"  ""receiverAddress1"": " + receiverAddress1 + "," + "\n" +
                                            @"  ""receiverPinCode"" : """"," + "\n" +
                                            @"  ""receiverDateOfBirth"": " + benef_DOB_ymd + "," + "\n" +
                                            @"  ""receiverGender"" : " + gender + "," + "\n" +
                                            @"  ""receiverCountryCode"": " + receiverCountryCode + "," + "\n" +
                                            @"  ""receiverMobileNumber"": " + Bph_no + "," + "\n" +
                                            @"  ""payoutAmount"": " + Convert.ToDouble(dt_crosspay.Rows[0]["AmountInPKR"]) + "," + "\n" +
                                            @"  ""serviceType"" : " + serviceType + "," + "\n" +
                                            @"  ""receiverEntityName"" : " + receiverEntityName + "," + "\n" +
                                            @"  ""walletProviderName"" : " + walletProviderName + "," + "\n" +
                                            @"  ""sourceOfFunds"": " + Profession + "," + "\n" +
                                            @"  ""purposeOfTransfer"": " + purposeMoneyTransfer + "," + "\n" +
                                            @"  ""toCurrencyCode"": " + recevingCurrencyCode + "" + "\n" +
                                            @"}";
                                        }

                                        request.AddParameter("application/json", body_crosspay, ParameterType.RequestBody);
                                        IRestResponse response = client.Execute(request);
                                        Console.WriteLine(response.Content);

                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(proceed_method + "Confirm Crosspay remittance all parameter send transfer request parameter: <br/>" + body_crosspay + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(proceed_method + "Confirm Crosspay send transfer responce parameter : <br/>" + response.Content + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));

                                        dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                                        string responseCode = dynJson.code;
                                        string messageResponse = dynJson.message;
                                        string transactionReferenceNumber = "";
                                        if (responseCode == "CP0000")
                                            transactionReferenceNumber = dynJson.transactionReferenceNumber;

                                        if (responseCode == "CP0000")
                                        {
                                            dt.Rows[0]["gcc_pinnumber"] = transactionReferenceNumber;
                                            string Query = " Update transaction_mapping_table set APITransaction_ID='" + transactionReferenceNumber + "'  where Transaction_ID =" + obj.Transaction_ID + " and Client_ID=" + obj.Client_ID + " ";
                                            cmd_select = new MySqlCommand(Query);
                                            db_connection.ExecuteQueryDataTableProcedure(cmd_select);
                                        }
                                        else
                                        {
                                            dt.Rows[0]["gcc_pinnumber"] = "";
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(proceed_method + " Get Crosspay Proceed Error: <br/>" + ex.ToString() + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                    }
                                    #endregion
                                }

                            }
                            else if (obj.basecurrency == "EUR")
                            {
                                try
                                {
                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("App - Balmony Transaction.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                    int api_id = 0; string apibankname = "", apiurl = "", apiuser = "", apipass = "", accesscode = "", apicompany_id = "",
                                    api_fields = "", webAccountNumber = "", debtAcct = "";
                                    string cityName1 = "";
                                    string stateName = "";
                                    string countryName = "";
                                    string state_code = "";
                                    string city_code = "";
                                    string BcityName1 = "";
                                    string BstateName = "";
                                    string BcountryName = "";
                                    string Bstate_code = "";
                                    string Bcity_code = "";
                                    string Company_Name = "";
                                    string CURL = "";
                                    MySqlCommand cmd = new MySqlCommand("Get_APIDetails");
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    string whereclause = " and a.ID=32";
                                    cmd.Parameters.AddWithValue("_whereclause", whereclause);
                                    cmd.Parameters.AddWithValue("_security_key", CompanyInfo.SecurityKey());
                                    DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);

                                    if (dtt.Rows.Count > 0)
                                    {
                                        api_id = Convert.ToInt32(dtt.Rows[0]["ID"]);
                                        apibankname = Convert.ToString(dtt.Rows[0]["Bank_Name"]);
                                        apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                                        apiuser = Convert.ToString(dtt.Rows[0]["APIUser_ID"]);
                                        apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                                        accesscode = Convert.ToString(dtt.Rows[0]["APIAccess_Code"]);
                                        apicompany_id = Convert.ToString(dtt.Rows[0]["APICompany_ID"]);
                                        api_fields = Convert.ToString(dtt.Rows[0]["api_Fields"]);
                                        if (api_fields != "" && api_fields != null)
                                        {
                                            Newtonsoft.Json.Linq.JObject objf = Newtonsoft.Json.Linq.JObject.Parse(api_fields);
                                            webAccountNumber = Convert.ToString(objf["webAccountNumber"]);
                                            debtAcct = Convert.ToString(objf["debtAcct"]);
                                        }
                                    }

                                    cmd = new MySqlCommand("Get_Cust_details");
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("api_id", api_id);
                                    cmd.Parameters.AddWithValue("client_id", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("transaction_id", obj.Transaction_ID);
                                    DataTable dtc = db_connection.ExecuteQueryDataTableProcedure(cmd);
                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(dtc.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Customer Data", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("After dtc table", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Customer Data", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));
                                    string IdType = dtc.Rows[0]["Doc_id_code"].ToString();

                                    if (IdType == "")
                                    {
                                        IdType = "7";//other
                                    }

                                    IRestResponse response;
                                    dynamic json;
                                    string referencenum = Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]);

                                    string benefcity = "";
                                    string benefid = dtc.Rows[0]["Beneficiary_ID"].ToString();

                                    cmd = new MySqlCommand("Get_benef_city");
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_benefid", benefid);
                                    DataTable dtcc = db_connection.ExecuteQueryDataTableProcedure(cmd);

                                    benefcity = dtcc.Rows[0]["City_Name"].ToString().ToUpper();


                                    DateTime timestamp = DateTime.UtcNow;
                                    string endpoint = apiurl + "Incoming";
                                    string authorizationToken = CreateAuthorizationToken(timestamp, accesscode, apiuser);

                                    ServicePointManager.Expect100Continue = true;
                                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                                           | SecurityProtocolType.Tls11
                                           | SecurityProtocolType.Tls12
                                           | SecurityProtocolType.Ssl3;
                                    var client = new RestClient(apiurl + "Incoming/RatesAndFeesList");
                                    client.Timeout = -1;
                                    var request = new RestRequest(Method.POST);
                                    request.AddHeader("Authorization", "APIAuth " + authorizationToken);
                                    response = client.Execute(request);

                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(apiurl + "Incoming/RatesAndFeesList", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balmony Request", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));

                                    json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                                    dynamic results = json["Results"];

                                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));

                                    string targetCountryCode = dtc.Rows[0]["benf_ISO_Code"].ToString();
                                    string targetCurrencyCode = dtc.Rows[0]["Currency_Code"].ToString();
                                    int targetPaymenttype = Convert.ToInt32(dtc.Rows[0]["PaymentDepositType_ID"]);
                                    List<dynamic> matchingRecords = new List<dynamic>();

                                    foreach (var item in results)
                                    {
                                        if (item.CountryCode?.Value == targetCountryCode && item.CurrencyCode?.Value == targetCurrencyCode)// && item.PaymentTypeID?.Value == targetPaymenttype
                                        {
                                            matchingRecords.Add(item);
                                            break;
                                        }
                                    }

                                    foreach (var items in matchingRecords)
                                    {
                                        if (items.CountryCode.Value == dtc.Rows[0]["benf_ISO_Code"].ToString() && items.CurrencyCode.Value == dtc.Rows[0]["Currency_Code"].ToString())//&& items.PaymentTypeID.Value == Convert.ToInt32(dt.Rows[0]["PaymentType_ID"])
                                        {

                                            long PayerID = (long)items.PayerID.Value;
                                            int PaymentTypeID = 0; int PaymentDepositType_ID = 0;
                                            if (items.PaymentTypeID.Value == 1)
                                            {
                                                PaymentDepositType_ID = 1;
                                            }
                                            if (items.PaymentTypeID.Value == 3)
                                            {
                                                PaymentDepositType_ID = 2;
                                            }
                                            if (items.PaymentTypeID.Value == null)
                                            {
                                                PaymentDepositType_ID = Convert.ToInt32(dtc.Rows[0]["PaymentDepositType_ID"]);
                                            }

                                            string Sex = "";
                                            if (dtc.Rows[0]["Title_ID"].ToString() == "1")
                                            {
                                                Sex = "M";
                                            }
                                            if (dtc.Rows[0]["Title_ID"].ToString() == "2")
                                            {
                                                Sex = "F";
                                            }
                                            if (dtc.Rows[0]["Title_ID"].ToString() == "3")
                                            {
                                                Sex = "F";
                                            }
                                            if (dtc.Rows[0]["Title_ID"].ToString() == "4")
                                            {
                                                Sex = "F";
                                            }

                                            client = new RestClient(apiurl + "Incoming/PayerNetworkList");
                                            client.Timeout = -1;
                                            request = new RestRequest(Method.POST);
                                            request.AddHeader("Authorization", "APIAuth " + authorizationToken);
                                            request.AddHeader("Content-Type", "application/json");
                                            var body = @"{
                            " + "\n" +
                                            @"        ""PayerID"" : """ + PayerID + @"""
                            " + "\n" +
                                            @"}";

                                            request.AddParameter("application/json", body, ParameterType.RequestBody);
                                            response = client.Execute(request);

                                            _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(apiurl + "Incoming/PayerNetworkList" + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balmony Request", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));

                                            json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);

                                            _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails(response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));

                                            dynamic responses = json["Results"];
                                            var reslt = json["Results"];

                                            foreach (var itms in responses)
                                            {
                                                if (itms != null)
                                                {
                                                    var currencies = itms["Currencies"];
                                                    if (currencies.HasValues)
                                                    {
                                                        string currencyCode = currencies[0].ToString();
                                                        string desiredCurrencyCode = dtc.Rows[0]["Currency_Code"].ToString();
                                                        string CountryCode = dtc.Rows[0]["benf_ISO_Code"].ToString();

                                                        if (itms["CountryCode"].ToString() == CountryCode && currencyCode == desiredCurrencyCode)


                                                        {
                                                            string name = dtc.Rows[0]["Beneficiary_Name"].ToString();


                                                            string bname = Convert.ToString(name).Trim(); string bfname = bname; string blname = " ";
                                                            if (bname.Contains(" "))
                                                            {
                                                                string[] spli = bname.Split(' ');
                                                                if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; }
                                                            }


                                                            //string bname = Convert.ToString(items.PayerName.Value).Trim(); string bfname = bname; string blname = " ";
                                                            //if (bname.Contains(" "))
                                                            //{
                                                            //    string[] spli = bname.Split(' ');
                                                            //    if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; }
                                                            //}

                                                            int citycode = 0;
                                                            citycode = Convert.ToInt32(dtc.Rows[0]["City_ID"]);
                                                            string city_name = Convert.ToString(dtc.Rows[0]["City_Name"]).ToUpper();
                                                            string Birthcountrycode = Convert.ToString(dtc.Rows[0]["ISO_Code"]);
                                                            DataTable dtb = CompanyInfo.get(obj.Client_ID, _srvTransactionContext);
                                                            if (dtb.Rows.Count > 0)
                                                            {
                                                                CURL = Convert.ToString(dtb.Rows[0]["RootURL"]);
                                                                Company_Name = Convert.ToString(dtb.Rows[0]["Company_Name"]);
                                                            }

                                                            string excelFilePath = CURL + "assets/xlfile/World-Countries-States-Cities.xlsx";
                                                            // Provide the city code and birth country code to match
                                                            string cityNameToMatch = city_name; // Example city code
                                                            string birthCountryCodeToMatch = Birthcountrycode; // Example birth country code
                                                            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                                                            // Read the Excel file for sender
                                                            using (ExcelPackage package = new ExcelPackage(new FileInfo(excelFilePath)))
                                                            {
                                                                ExcelWorksheet worksheet = package.Workbook.Worksheets[0]; // Assuming data is in the first sheet

                                                                // Iterate through each row in the Excel sheet
                                                                for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                                                                {
                                                                    string cityName = Convert.ToString(worksheet.Cells[row, 6].Value).ToUpper(); // CityCode column
                                                                    string countryCode = Convert.ToString(worksheet.Cells[row, 1].Value).ToUpper(); // CountryCode column

                                                                    // Check if the city code and country code match the provided values
                                                                    if (cityName == cityNameToMatch && countryCode == birthCountryCodeToMatch)
                                                                    {
                                                                        // If the condition matches, print or process the data
                                                                        countryName = Convert.ToString(worksheet.Cells[row, 2].Value); // CountryName column
                                                                        stateName = Convert.ToString(worksheet.Cells[row, 4].Value); // StateName column
                                                                        cityName1 = Convert.ToString(worksheet.Cells[row, 6].Value); // CityName column
                                                                        city_code = Convert.ToString(worksheet.Cells[row, 5].Value);
                                                                        state_code = Convert.ToString(worksheet.Cells[row, 3].Value);
                                                                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("Inside cityname match", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext));

                                                                    }
                                                                }
                                                            }

                                                            // for beneficiery city details


                                                            //string Bcity_name = Convert.ToString(dtc.Rows[0]["City_Name"]).ToUpper();
                                                            string BBirthcountrycode = Convert.ToString(dtc.Rows[0]["benf_ISO_Code"]);
                                                            // Provide the city code and birth country code to match
                                                            string BcityNameToMatch = benefcity; // Example city code
                                                            string BbirthCountryCodeToMatch = BBirthcountrycode; // Example birth country code
                                                            using (ExcelPackage package = new ExcelPackage(new FileInfo(excelFilePath)))
                                                            {
                                                                ExcelWorksheet worksheet = package.Workbook.Worksheets[0]; // Assuming data is in the first sheet

                                                                // Iterate through each row in the Excel sheet
                                                                for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                                                                {
                                                                    string cityName = Convert.ToString(worksheet.Cells[row, 6].Value).ToUpper(); // CityCode column
                                                                    string countryCode = Convert.ToString(worksheet.Cells[row, 1].Value).ToUpper(); // CountryCode column

                                                                    // Check if the city code and country code match the provided values
                                                                    if (cityName == BcityNameToMatch && countryCode == BbirthCountryCodeToMatch)
                                                                    {
                                                                        // If the condition matches, print or process the data
                                                                        BcountryName = Convert.ToString(worksheet.Cells[row, 2].Value); // CountryName column
                                                                        BstateName = Convert.ToString(worksheet.Cells[row, 4].Value); // StateName column
                                                                        BcityName1 = Convert.ToString(worksheet.Cells[row, 6].Value); // CityName column
                                                                        Bcity_code = Convert.ToString(worksheet.Cells[row, 5].Value);
                                                                        Bstate_code = Convert.ToString(worksheet.Cells[row, 3].Value);
                                                                        CompanyInfo.InsertActivityLogDetails("Inside bcityname match", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                                                                    }
                                                                }
                                                            }

                                                            CompanyInfo.InsertActivityLogDetails("beging create transaction call", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                                                            string dobString = dtc.Rows[0]["Sender_DOB"].ToString();

                                                            // Parse the date string into a DateTime object
                                                            DateTime dob;
                                                            if (DateTime.TryParseExact(dobString, "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out dob))
                                                            {
                                                                // Format the DateTime object into ISO 8601 format with time as midnight UTC
                                                                dobString = dob.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ");

                                                                // Display the formatted DOB
                                                                Console.WriteLine($"Formatted DOB: {dobString}");
                                                            }
                                                            else
                                                            {
                                                                Console.WriteLine("Invalid date format.");
                                                            }

                                                            client = new RestClient(apiurl + "Incoming/Create");
                                                            client.Timeout = -1;
                                                            request = new RestRequest(Method.POST);
                                                            request.AddHeader("Accept", "application/json");
                                                            request.AddHeader("Authorization", "APIAuth " + authorizationToken);
                                                            request.AddHeader("Content-Type", "application/json");
                                                            body = @"{
    ""TransferID"": """ + dtc.Rows[0]["ReferenceNo"].ToString() + @""",
    ""Reference"": """ + dtc.Rows[0]["ReferenceNo"].ToString() + @""",
    ""TransferPIN"": """",
    ""TransConfirmation"": null,
    ""TransferReasonID"": 3,
    ""Sender"": {
        ""AgencyReference"": """ + dtc.Rows[0]["WireTransfer_ReferanceNo"].ToString() + @""",
        ""FirstName"": """ + dtc.Rows[0]["First_Name"].ToString() + @""",
        ""MiddleName"": null,
        ""LastName"": """ + dtc.Rows[0]["Last_Name"].ToString() + @""",
        ""SecondLastName"": null,
        ""Address1"": """ + dtc.Rows[0]["sender_address"].ToString() + @""",
        ""CountryCode"": """ + dtc.Rows[0]["ISO_Code"].ToString() + @""",
        ""StateName"": """ + stateName + @""",
        ""CityName"": """ + cityName1 + @""",
        ""ZipCode"": """ + dtc.Rows[0]["Post_Code"].ToString() + @""",
        ""DOB"": """ + dobString + @""",
        ""PhoneNumber"": """ + dtc.Rows[0]["Mobile_Number"].ToString() + @""",
        ""CellPhoneNumber"": null,
        ""PrimaryPhoneNumber"": null,
        ""PhoneNumberCountryCode"": null,
        ""Email"": """ + dtc.Rows[0]["Email_ID"].ToString() + @""",
        ""Sex"": """ + Sex + @""",
        ""BirthCityName"": null,
        ""BirthCountryCode"": """ + Birthcountrycode + @""",
        ""CitizenshipCountryCode"": """ + dtc.Rows[0]["Nationality_Code"].ToString() + @""",
        ""ProfessionID"": 70,
        ""PEPTypeID"": 2,
        ""SenderTypeID"": 1,
        ""Documents"": [],
        ""IDs"": [
            {
                ""IDIssuedDate"": """ + dtc.Rows[0]["Issue_Datedmy"].ToString() + @""",
                ""IDExpirationDate"": """ + dtc.Rows[0]["SenderID_ExpiryDateymd"].ToString() + @""",
                ""IssuedCountryCode"": """ + Birthcountrycode + @""",
                ""Authority"": null,
                ""IDCopy"": true,
                ""IDType"": """ + IdType + @""",
                ""IDNo"": """ + dtc.Rows[0]["SenderID_Number"].ToString() + @"""
            }
        ]
    },
    ""Beneficiary"": {
        ""AgencyReference"": """",
        ""FirstName"": """ + bfname + @""",
        ""MiddleName"": null,
        ""LastName"": """ + blname + @""",
        ""SecondLastName"": null,
        ""Address1"": """ + dtc.Rows[0]["Beneficiary_Address1"].ToString() + @""",
        ""CountryCode"": """ + itms.CountryCode.Value + @""",
        ""CityName"": """ + BcityName1 + @""",
        ""ZipCode"": null,
        ""PhoneNumber"": null,
        ""CellPhoneNumber"": """ + dtc.Rows[0]["Beneficiary_Mobile"].ToString() + @""",
        ""PrimaryPhoneNumber"": null,
        ""Email"": null,
        ""RelationshipToSenderID"": 10,
        ""IDs"": [
            {
                ""IDCopy"": true,
                ""IDType"": """ + IdType + @""",
                ""IDNo"": """ + dtc.Rows[0]["SenderID_Number"].ToString() + @"""
            }
        ]
    },
    ""AmountAndFees"": {
        ""PaymentAmount"": """ + dtc.Rows[0]["AmountInPKR"].ToString() + @""",
        ""OriginalAmount"": """ + dtc.Rows[0]["AmountInGBP"].ToString() + @""",
        ""Rate"": """ + dtc.Rows[0]["Exchange_Rate"].ToString() + @""",
        ""RateID"": 1,
        ""PayerCurrencyCode"": """ + dtc.Rows[0]["FromCurrency_Code"].ToString() + @""",
        ""PaymentCurrencyCode"": """ + dtc.Rows[0]["Currency_Code"].ToString() + @"""
    },
    ""Payment"": {
        ""PayerBranchReference"": """ + itms.PayerBranchID.Value + @""",
        ""PaymentTypeID"": """ + PaymentDepositType_ID + @""",";

                                                            if (itms != null)
                                                            {
                                                                var LocationPoints = itms["LocationPoints"];
                                                                foreach (var LocationPoint in LocationPoints)
                                                                {
                                                                    body += @"
        ""LocationCode"": """ + LocationPoint["LocationPointID"].ToString() + @""",";
                                                                    break;
                                                                }
                                                            }
                                                            body += @"
    ";

                                                            if (PaymentDepositType_ID == 1)
                                                            {
                                                                body += @"
        ""BankAccount"": {
            ""Code"": """ + dtc.Rows[0]["Iban_ID"].ToString() + @""",
            ""Name"": """ + dtc.Rows[0]["Bank_Name"].ToString() + @""",
            ""BranchCode"": """ + itms.PayerBranchID.Value + @""",
            ""BranchName"": """ + itms.PayerBranchName.Value + @""",
            ""AccountType"": 1,
            ""AccountNo"": """ + dtc.Rows[0]["Account_Number"].ToString() + @"""
        },
   ";
                                                            }

                                                            body += @"    
    ""Notes"": [ null ],
    ""CreationDate"": """ + dtc.Rows[0]["transaction_date"].ToString() + @"""
}";

                                                            request.AddParameter("application/json", body, ParameterType.RequestBody);
                                                            response = client.Execute(request);

                                                            CompanyInfo.InsertActivityLogDetails(apiurl + "Incoming/Create" + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balmony Request", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                                                            json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);

                                                            CompanyInfo.InsertActivityLogDetails(response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                                                            string TransactionReference = json.Reference;
                                                            if (json.StatusID == 1)
                                                            {

                                                                string Query = " Update transaction_mapping_table set APITransaction_ID='" + json.TransferPIN + "'  where Transaction_ID =" + obj.Transaction_ID + " and Client_ID=" + obj.Client_ID + " ";
                                                                MySqlCommand cmd_select = new MySqlCommand(Query);
                                                                db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                                                            }
                                                            else
                                                            {


                                                            }


                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }

                                    dt.Rows.Add(0, "success", Cust_ReferanceNo);
                                }
                                catch (Exception ex)
                                {
                                    CompanyInfo.InsertActivityLogDetails(ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Error", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                                }

                            }

                            else if (obj.PaymentType_ID == 8)
                            {
                                dt.Columns.Clear();

                                dt.Columns.Add("Status", typeof(int));
                                dt.Columns.Add("Transaction_Ref", typeof(string));
                                dt.Columns.Add("Cust_ReferanceNo", typeof(string));
                                dt.Columns.Add("Barcode_Details", typeof(string));

                                obj.Customer_Reference = Cust_ReferanceNo;



                                dt.Clear();
                                if (returnPaysafecashBarcode != "FAILED")
                                {
                                    dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnPaysafecashBarcode);
                                }
                                else
                                {
                                    dt.Rows.Add(2, obj.ReferenceNo, Cust_ReferanceNo, returnPaysafecashBarcode);
                                }








                            }

                            else
                            {
                                dt.Rows[0]["gcc_pinnumber"] = "";
                            }
                            #endregion

                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            dt.Rows.Add(2, ex.ToString(), Cust_ReferanceNo);
                            //Error Log Handled
                            Model.ErrorLog objError = new Model.ErrorLog();
                            objError.User = new Model.User();
                            objError.Error = "Api : InsertTransfer --" + ex.ToString();
                            objError.Date = DateTime.Now;
                            objError.User_ID = 1;
                            objError.Client_ID = obj.Client_ID;

                            Service.srvErrorLog srvError = new Service.srvErrorLog();
                            srvError.Create(objError, _srvTransactionContext);
                        }
                        finally
                        {
                            try
                            {
                                if (con.State != ConnectionState.Closed)
                                    con.Close();
                            }
                            catch { }
                        }

                    }
                }
                else
                {
                    dt.Rows.Add(3, obj.ReferenceNo, Cust_ReferanceNo, obj.Transaction_ID);
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {

                CompanyInfo.InsertActivityLogDetails(linkActivity, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "",_srvTransactionContext);
                _cmdSession = new MySqlCommand("UpdateTransactionJourney");
                _cmdSession.CommandType = CommandType.StoredProcedure;
                _cmdSession.Parameters.AddWithValue("_Token", token);
                _cmdSession.Parameters.AddWithValue("_SendMoneyToken", DBNull.Value);
                _cmdSession.Parameters.AddWithValue("_RewardToken", DBNull.Value);
                _cmdSession.Parameters.AddWithValue("_SOFdocupload", DBNull.Value);
                _cmdSession.Parameters.AddWithValue("_sendmoneyhashexpire", DBNull.Value);
                _cmdSession.Parameters.AddWithValue("_TransactionStartdate", DBNull.Value);
                if (check_validity == null)
                {
                    _cmdSession.Parameters.AddWithValue("_chk_validity", DBNull.Value);
                }
                else
                {
                    _cmdSession.Parameters.AddWithValue("_chk_validity", DBNull.Value);

                }
                _cmdSession.Parameters.AddWithValue("_flag", 4);
                _cmdSession.Parameters.AddWithValue("_uploadSOF", 1);
                string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmdSession));
            }
            return dt;
        }


        public DataTable InsertTransaction(Model.Transaction obj, HttpContext context)
    {
            _srvTransactionContext = context;
        List<Model.Transaction> _lst = new List<Model.Transaction>();



            int pid_avg = 2;
            string Cust_ReferanceNo = "";
            DataTable dt = new DataTable();
            dt.Columns.Add("Status", typeof(int));
            dt.Columns.Add("Refno", typeof(string));
            dt.Columns.Add("CustRefno", typeof(string)); dt.Columns.Add("Transaction_ID", typeof(string)); dt.Columns.Add("gcc_pinnumber", typeof(string));
            int chk_transaction_status = 1;
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
            MySqlCommand _cmdSession = new MySqlCommand("SetTransactionJourney");
            string token = "";
            string SendMoneyToken = ""; string returnPaysafecashBarcode = "";
            string RewardToken = "";
            DateTime sendhashexpire = DateTime.Now;
            string SOFdocupload = "";
            string check_validity = null;
            DateTime TransactionStartdate = Convert.ToDateTime("0001-01-01");
            try
            {
            
            
            try
            {
                    token = obj.tokenValue; //(context.Request.Headers["Authorization"]).Substring("Bearer ".Length);
                    _cmdSession = new MySqlCommand("SetTransactionJourney");
                    _cmdSession.CommandType = CommandType.StoredProcedure;
                    _cmdSession.Parameters.AddWithValue("_Token", token);
                    _cmdSession.Parameters.AddWithValue("_SendMoneyToken", SendMoneyToken);
                    _cmdSession.Parameters.AddWithValue("_RewardToken", RewardToken);
                    _cmdSession.Parameters.AddWithValue("_SOFdocupload", SOFdocupload);
                    _cmdSession.Parameters.AddWithValue("_sendmoneyhashexpire", sendhashexpire);
                    _cmdSession.Parameters.AddWithValue("_TransactionStartdate", TransactionStartdate);
                    _cmdSession.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    DataTable journerydata = db_connection.ExecuteQueryDataTableProcedure(_cmdSession);
                    if (journerydata.Rows.Count > 0)
                    {
                        if (journerydata.Rows[0]["SendMoneyToken"] != DBNull.Value)
                        {
                            SendMoneyToken = Convert.ToString(journerydata.Rows[0]["SendMoneyToken"]);
                        }
                        if (journerydata.Rows[0]["RewardToken"] != DBNull.Value)
                        {
                            RewardToken = Convert.ToString(journerydata.Rows[0]["RewardToken"]);
                        }
                        if (journerydata.Rows[0]["SOFdocupload"] != DBNull.Value)
                        {
                            SOFdocupload = Convert.ToString(journerydata.Rows[0]["SOFdocupload"]);
                        }
                        if (journerydata.Rows[0]["sendmoneyhashexpire"] != DBNull.Value)
                        {
                            sendhashexpire = Convert.ToDateTime(journerydata.Rows[0]["sendmoneyhashexpire"]);
                        }
                        if (journerydata.Rows[0]["TransactionStartdate"] != DBNull.Value)
                        {
                            TransactionStartdate = Convert.ToDateTime(journerydata.Rows[0]["TransactionStartdate"]);
                        }
                        if (journerydata.Rows[0]["chk_validity"] != DBNull.Value)
                        {
                            check_validity = Convert.ToString(journerydata.Rows[0]["chk_validity"]);
                        }
                    }
                }
                catch (Exception ex) { }


            MySqlCommand _cmd_comment = new MySqlCommand("AddCustomerComments");
            string cust_Comment = "";
            if (obj.PaymentType_ID != null && obj.PaymentType_ID != 0)
            {
                obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID, _srvTransactionContext);

                /*string stringtohash = "myMTSHashingStarts" + obj.Beneficiary_ID + obj.Customer_ID + obj.AmountInGBP + obj.AmountInPKR + obj.Transfer_Fees +
                    obj.Exchange_Rate + obj.PaymentDepositType_ID + obj.PaymentType_ID + obj.DeliveryType_Id + "myMTSHashingEnds";
                string chkhash = CompanyInfo.GetHash(stringtohash);
                chkhash = chkhash + "sendmoneystep2.5passedsendmoneystep3passed";//check if send money details and review step passed
                string sendmoneyhash = Convert.ToString(SendMoneyToken);
                if (sendmoneyhash != chkhash)//sendmoneyhash != null && sendmoneyhash != "" && 
                {
                    CompanyInfo.InsertActivityLogDetails("App - Invalid Data or Bad Request.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert", obj.CB_ID, obj.Client_ID, "Send Money",context);
                    dt.Rows.Add(7, "Invalid Data or Bad Request. Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    //return invalid or mismatched request
                }
                DateTime sendmoneyhashexpire = (DateTime)(sendhashexpire);
                if (sendmoneyhash == chkhash && sendmoneyhashexpire < Convert.ToDateTime(obj.Record_Insert_DateTime))// && sendmoneyhashexpire != null
                {
                    CompanyInfo.InsertActivityLogDetails("App - Transaction Timeout.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert", obj.CB_ID, obj.Client_ID, "Send Money", context);
                    dt.Rows.Add(7, "Transaction Timeout. Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    //return - link expired
                }
                string rewardtoken = Convert.ToString(RewardToken);
                if (obj.Wallet_Perm == 0 && rewardtoken != (obj.Wallet_Amount.ToString("N2") + "" + obj.Transfer_Cost.ToString("N2"))
                    || obj.Discount_Perm == 0 && rewardtoken != (obj.Discount_Amount.ToString("N2") + "" + obj.Transfer_Cost.ToString("N2")))
                {
                    CompanyInfo.InsertActivityLogDetails("App - Invalid Reward Data or Bad Request.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTemp", obj.CB_ID, obj.Client_ID, "Send Money", context);
                    dt.Rows.Add(7, "Invalid Data or Bad Request.  Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                }*/

                using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                {
                    if (con.State != ConnectionState.Open)
                        con.Open();


                    #region checklimits
                    DateTime dateTime = Convert.ToDateTime(obj.Record_Insert_DateTime);
                    MySqlCommand _cmdl = new MySqlCommand("GetPermissions");
                    _cmdl.CommandType = CommandType.StoredProcedure;
                    _cmdl.Parameters.AddWithValue("_whereclause", "");
                    _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                    DataTable dttp = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                    //Check Daily Transfer Count perm
                    int chkdailycount = 1;
                    DataRow[] dr = dttp.Select("PID=59");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkdailycount = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    //Check daily limit perm
                    int chkdailylimit = 1;
                    dr = dttp.Select("PID=26");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkdailylimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    DataTable dds = null;
                    if (chkdailylimit == 0 || chkdailycount == 0)
                    {
                        _cmdl = new MySqlCommand("customer_transferamount_minmax");
                        _cmdl.CommandType = CommandType.StoredProcedure;
                        _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        dds = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                    }
                    //Check Daily Transfer Count
                    if (chkdailycount == 0)
                    {
                        if (dds.Rows.Count > 0)
                        {
                            int TotalDailyTransfer_count = Convert.ToInt32(dds.Rows[0]["Daily_Transfer_Count"]);
                            _cmdl = new MySqlCommand("CustTotal_Amount");
                            _cmdl.CommandType = CommandType.StoredProcedure;
                            _cmdl.Parameters.AddWithValue("_From_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                            _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmdl.Parameters.AddWithValue("_To_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                            _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                            _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                            DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                            if ((sd.Rows.Count + 1) > TotalDailyTransfer_count)
                            {
                                string notification_icon = "tranfer-limit-exceeded.jpg";
                                string notification_message = "<span class='cls-admin'>Daily transfer count <strong class='cls-cancel'>reached. Customer is on confirmation page.</strong></span><span class='cls-customer'></span>";
                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                //daily_transfer_count = 1;// count exceeded
                                //daily_transfer_msg = "We are unable to process your transfer request at the moment. Please contact Support Team with your transfer request.";
                                //transaction.Commit();
                                dt.Rows.Add(4, "Transaction Failed. Your daily transfer count limit reached.", Cust_ReferanceNo, "");
                                return dt; 
                            }
                        }
                    }
                    ////Check daily limit 
                    //if (chkdailylimit == 0)
                    //{
                    //    if (dds.Rows.Count > 0)
                    //    {
                    //        double Daily_Transfer_Limit = Convert.ToDouble(dds.Rows[0]["Daily_Transfer_Limit"]);
                    //        //get todays total transaction amount
                    //        DateTime From_Date = dateTime.Date;
                    //        DateTime To_Date = dateTime.Date;
                    //        _cmdl = new MySqlCommand("CustTotal_Amount");
                    //        _cmdl.CommandType = CommandType.StoredProcedure;
                    //        _cmdl.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                    //        _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    //        _cmdl.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                    //        _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                    //        _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                    //        DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);

                    //        double total = 0;
                    //        if (sd.Rows.Count > 0)
                    //        {
                    //            for (int j = 0; j < sd.Rows.Count; j++)
                    //            {
                    //                double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                    //                double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                    //                total = total + AmountInGBP + fees;
                    //            }
                    //        }

                    //        if ((total + obj.AmountInGBP) > Daily_Transfer_Limit)
                    //        {
                    //            string notification_icon = "tranfer-limit-exceeded.jpg";
                    //            string notification_message = "<span class='cls-admin'>Daily transfer limit<strong class='cls-cancel'> reached. Customer is on confirmation page.</strong></span><span class='cls-customer'></span>";
                    //            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0);                                
                    //            dt.Rows.Add(4, "Transaction Failed. Your daily Limit is exceeded.", Cust_ReferanceNo, "");
                    //            return dt;
                    //        }
                    //    }
                    //}
                    #endregion checklimits

                    MySqlCommand cmd3 = new MySqlCommand("customer_details_by_param");//Customer_getallcustdetails
                    cmd3.CommandType = CommandType.StoredProcedure;
                    cmd3.Connection = con;
                    string _whereclause = " and cr.Client_ID=" + obj.Client_ID;
                    //if (Customer_ID > 0)
                    //{
                    _whereclause = " and cr.Customer_ID=" + Customer_ID;
                    //}
                    cmd3.Parameters.AddWithValue("_whereclause", _whereclause);
                    cmd3.Parameters.AddWithValue("_SecurityKey", CompanyInfo.SecurityKey());
                    DataTable ct = db_connection.ExecuteQueryDataTableProcedure(cmd3);

                    //Get Receiver Details
                    MySqlCommand cmd2 = new MySqlCommand("Beneficiary_Search");//SP_Save_Beneificiary_BankDetails
                    cmd2.CommandType = CommandType.StoredProcedure;
                    cmd2.Connection = con;
                    string _where = " and bb.Beneficiary_ID=" + obj.Beneficiary_ID + " and bb.Client_ID=" + obj.Client_ID + "";
                    cmd2.Parameters.AddWithValue("_whereclause", _where);
                    DataTable bt = db_connection.ExecuteQueryDataTableProcedure(cmd2);

                    string Customer_name = Convert.ToString(ct.Rows[0]["fullname1"]);

                    obj.Beneficiary_Name = Convert.ToString(bt.Rows[0]["Beneficiary_Name"]);

                    obj.TransactionStatus_ID = 1;
                    try
                    {
                        MySqlCommand _cmd = new MySqlCommand("GetIDScanResultOnPerm");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_whereclause", " and dd.Customer_ID=" + Customer_ID);
                        _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        _cmd.Parameters.AddWithValue("_Branch_ID", obj.Branch_ID);
                        DataTable ids = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        if (ids.Rows.Count > 0)
                        {
                            if (Convert.ToInt32(ids.Rows[0]["FrontResult"]) > 0 || Convert.ToInt32(ids.Rows[0]["LivenessResult"]) > 0 || Convert.ToInt32(ids.Rows[0]["FaceMatchResult"]) > 0)
                            {
                                obj.TransactionStatus_ID = 6;// Transaction should be on Hold for Invalid IDs
                                #region transfercomment
                                cust_Comment = "Hold Reason: Invalid ID Scan";
                                int TransferPerk_Flag = 1; //remind me flag
                                obj.Delete_Status = 0;
                                int status = 0;

                                _cmd_comment.CommandType = CommandType.StoredProcedure;
                                _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                _cmd_comment.Parameters.AddWithValue("_Status", 0);

                                _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                chk_transaction_status = 0;
                                #endregion
                            }
                        }

                        #region check_sanction
                        int chk_reponse_benef = 10; int chk_reponse_cust = 10;
                        string Activity1 = "start Aml and Kyc";
                        if (obj.TransactionStatus_ID != 6)
                        {
                            Activity1 += " BA:" + Convert.ToInt32(obj.sanction_responce_bene_aml) + "," + obj.sanction_responce_bene_aml +
                                " BK :" + Convert.ToInt32(obj.sanction_responce_bene_kyc) + "," + obj.sanction_responce_bene_kyc +
                               " CA :" + Convert.ToInt32(obj.sanction_responce_cust_aml) + "," + obj.sanction_responce_cust_aml +
                               " CK :" + Convert.ToInt32(obj.sanction_responce_cust_kyc) + "," + obj.sanction_responce_cust_kyc;
                            if (  obj.sanction_responce_bene_aml != 10 && obj.sanction_responce_bene_aml != 4 && obj.sanction_responce_bene_aml != 0)
                            {
                                chk_reponse_benef = obj.sanction_responce_bene_aml;
                            }
                            else if (  obj.sanction_responce_bene_kyc != 10 && obj.sanction_responce_bene_kyc != 4 && obj.sanction_responce_bene_kyc != 0)
                            {
                                chk_reponse_benef = obj.sanction_responce_bene_kyc;
                            }
                            else if (  obj.sanction_responce_cust_aml != 10 && obj.sanction_responce_cust_aml != 4 && obj.sanction_responce_cust_aml != 0)
                            {
                                chk_reponse_cust = obj.sanction_responce_cust_aml;
                            }
                            else if ( obj.sanction_responce_cust_kyc != 10 && obj.sanction_responce_cust_kyc != 4 && obj.sanction_responce_cust_kyc != 0)
                            {
                                chk_reponse_cust = obj.sanction_responce_cust_kyc;
                            }
                            Activity1 += " chk_reponse_cust " + chk_reponse_cust;
                            Activity1 += " chk_reponse_benef " + chk_reponse_benef;


                            string p_Transaction_Ref = obj.ReferenceNo;
                            double amountgbp = Convert.ToDouble(obj.AmountInGBP);
                            obj.Beneficiary_ID = Convert.ToInt32(obj.Beneficiary_ID);
                            if (amountgbp > 5000)
                            {
                                string benef_aml_flag = check_pep_sanction_benef(obj.Beneficiary_ID, amountgbp, p_Transaction_Ref, context);



                                chk_reponse_benef = Convert.ToInt32(benef_aml_flag);



                            }
                            else
                            {
                                string benef_aml_flag = check_pep_sanction_benef(obj.Beneficiary_ID, amountgbp, p_Transaction_Ref, context);



                                chk_reponse_benef = Convert.ToInt32(benef_aml_flag);


                            }






                            if (chk_reponse_cust != 10 && chk_reponse_cust != 4 && chk_reponse_cust != 0)
                            {
                                #region transfercomment
                                obj.TransactionStatus_ID = 6;
                                if (chk_reponse_cust == 1)
                                {
                                    cust_Comment = "Hold Reason: Customer found in PEP Sanctions list";
                                }
                                if (chk_reponse_cust == 2)
                                {
                                    cust_Comment = "Hold Reason: Customer found in International Sanctions list";
                                }
                                if (chk_reponse_cust == 3)
                                {
                                    cust_Comment = "Hold Reason: Customer found in PEP and International Sanctions list";
                                }
                                Activity1 += " cust_Comment " + cust_Comment;
                                int TransferPerk_Flag = 1; //remind me flag
                                obj.Delete_Status = 0;
                                int status = 0;

                                _cmd_comment.CommandType = CommandType.StoredProcedure;
                                _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                _cmd_comment.Parameters.AddWithValue("_Status", 2);

                                _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                chk_transaction_status = 0;
                                #endregion
                            }

                            else if (chk_reponse_benef != 10 && chk_reponse_benef != 4 && chk_reponse_benef != 0)
                            {

                                #region transfercomment
                                obj.TransactionStatus_ID = 6;
                                if (chk_reponse_benef == 1)
                                {
                                    cust_Comment = "Hold Reason: Beneficiary found in PEP Sanctions list";
                                }
                                if (chk_reponse_benef == 2)
                                {
                                    cust_Comment = "Hold Reason: Beneficiary found in International Sanctions list";
                                }
                                if (chk_reponse_benef == 3)
                                {
                                    cust_Comment = "Hold Reason: Beneficiary found in PEP and International Sanctions list";
                                }
                                Activity1 += " cust_Comment benf " + cust_Comment;

                                int TransferPerk_Flag = 1; //remind me flag
                                obj.Delete_Status = 0;
                                int status = 0;

                                _cmd_comment.CommandType = CommandType.StoredProcedure;
                                _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                _cmd_comment.Parameters.AddWithValue("_Status", 2);

                                _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                chk_transaction_status = 0;
                                #endregion
                            }
                        }
                        CompanyInfo.InsertActivityLogDetails(Activity1 + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Transfer-check sanctions", obj.CB_ID, obj.Client_ID, "", context);

                        #endregion


                        if (obj.TransactionStatus_ID != 6)
                        {
                            obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID,context);
                            _cmd = new MySqlCommand("GetPermissions");
                            _cmd.CommandType = CommandType.StoredProcedure;

                            _cmd.Parameters.AddWithValue("_whereclause", " and PID in (79 , 81 , 82 , 83, 94, 223, 128, 154, 157);");
                            _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                            //_cmd.Parameters.AddWithValue("_Branch_ID", t.CB_ID);
                            DataTable ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                            if (ids1.Rows.Count > 0)
                            {
                                pid_avg = Convert.ToInt32(ids1.Rows[5]["Status_ForCustomer"]);
                                //if (Convert.ToInt32(ids1.Rows[0]["Status_ForCustomer"]) == 0)
                                //{
                                //MySqlTransaction transaction;
                                if (con.State != ConnectionState.Open)
                                    con.Open();
                                //transaction = cn.BeginTransaction(IsolationLevel.ReadCommitted);

                                String Record_Insert_Date = obj.Record_Insert_DateTime.Substring(0, 10);
                                _cmd = new MySqlCommand("GetTransactions", con);
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_pid80", ids1.Rows[0]["Status_ForCustomer"]);
                                _cmd.Parameters.AddWithValue("_pid81", ids1.Rows[1]["Status_ForCustomer"]);
                                _cmd.Parameters.AddWithValue("_pid82", ids1.Rows[2]["Status_ForCustomer"]);
                                _cmd.Parameters.AddWithValue("_pid94", ids1.Rows[4]["Status_ForCustomer"]); _cmd.Parameters.AddWithValue("_ptype_id", obj.PaymentType_ID); //191222
                                _cmd.Parameters.AddWithValue("_pid154", ids1.Rows[6]["Status_ForCustomer"]);
                                _cmd.Parameters.AddWithValue("_pid157", ids1.Rows[7]["Status_ForCustomer"]);

                                _cmd.Parameters.AddWithValue("_Beneficiary_ID", obj.Beneficiary_ID);
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                _cmd.Parameters.AddWithValue("_date", Record_Insert_Date);
                                _cmd.Parameters.Add(new MySqlParameter("_existTran1", MySqlDbType.Int32));
                                _cmd.Parameters["_existTran1"].Direction = ParameterDirection.Output;
                                _cmd.Parameters.Add(new MySqlParameter("_existTran2", MySqlDbType.Int32));
                                _cmd.Parameters["_existTran2"].Direction = ParameterDirection.Output;
                                _cmd.Parameters.Add(new MySqlParameter("_existTran3", MySqlDbType.Int32));
                                _cmd.Parameters["_existTran3"].Direction = ParameterDirection.Output;

                                _cmd.Parameters.Add(new MySqlParameter("_newalert", MySqlDbType.Int32));
                                _cmd.Parameters["_newalert"].Direction = ParameterDirection.Output;
                                _cmd.Parameters.Add(new MySqlParameter("_alertmsg", MySqlDbType.String));
                                _cmd.Parameters["_alertmsg"].Direction = ParameterDirection.Output;

                                _cmd.ExecuteNonQuery();
                                int Existtran1 = Convert.ToInt32(_cmd.Parameters["_existTran1"].Value);
                                int Existtran2 = Convert.ToInt32(_cmd.Parameters["_existTran2"].Value);
                                int Existtran3 = Convert.ToInt32(_cmd.Parameters["_existTran3"].Value);

                                int newalert = Convert.ToInt32(_cmd.Parameters["_newalert"].Value);//new id upload alert
                                string alertmsg = Convert.ToString(_cmd.Parameters["_alertmsg"].Value);

                                //t.CustomerName = Convert.ToString(dictObjMain["cust_name"]);
                                //t.Beneficiary_Name = Convert.ToString(dictObjMain["benf_name"]);
                                string whereclause_new = "";

                                whereclause_new = " and date(aa.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "'";
                                whereclause_new = whereclause_new + " and (concat(cc.First_Name,' ',case when (cc.Middle_Name is not null and cc.Middle_Name!='') then concat(cc.Middle_Name,' ') else '' end,'',cc.Last_Name) like '%" + Customer_name + "%'"

                            //whereclause_new = whereclause_new + " and   (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' )";
                            + " OR   (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' ))";
                                int cnt = 0;
                                try
                                {
                                    if (Convert.ToInt32(ids1.Rows[3]["Status_ForCustomer"]) == 0)
                                    {
                                        MySqlCommand _cmd1 = new MySqlCommand("sp_select_linked_txn_rpt");
                                        _cmd1.CommandType = CommandType.StoredProcedure;
                                        _cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                        _cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                        _cmd1.Parameters.AddWithValue("_whereclause", whereclause_new);
                                        _cmd1.Parameters.AddWithValue("_conditionclause", "inner join user_master um on um.User_ID=aa.User_ID");
                                        _cmd1.Parameters.AddWithValue("_selectclause", "concat('') as pocname,");
                                        //_cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)<> 1 and Count(cr1.Last_Name)<>1 and Count(ifnull(cr1.Middle_Name,0))<>1) AS a)");
                                        _cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)>= 1 and Count(cr1.Last_Name)>=1 and Count(ifnull(cr1.Middle_Name,0))>=1) AS a)");
                                        _cmd1.Parameters.AddWithValue("_cust_clause", "and cc.Customer_ID=aa.Customer_ID");
                                        _cmd1.Parameters.AddWithValue("_benf_clause", "");
                                        _cmd1.Parameters.AddWithValue("_order_by_value", "Sender,aa.Customer_ID ");
                                        ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd1);

                                        if (ids1.Rows.Count > 0 && cnt == 0)
                                        {
                                            obj.TransactionStatus_ID = 6;
                                            cnt++;
                                            cust_Comment = "Hold Reason: Linked transaction should be on hold";

                                        }
                                    }
                                }
                                catch { }

                                if (Existtran1 == 0 && cnt == 0)
                                {
                                    obj.TransactionStatus_ID = 6;

                                    cust_Comment = "Hold Reason: First Transaction should be on hold";
                                    cnt++;
                                }
                                if (obj.PaymentType_ID == 3)
                                {
                                    if (Existtran2 == 0 && cnt == 0)
                                    {
                                        obj.TransactionStatus_ID = 6;
                                        cnt++;
                                        cust_Comment = "Hold Reason: First pay by card transaction should be on hold";
                                    }
                                    if (Existtran3 == 0 && cnt == 0)
                                    {
                                        obj.TransactionStatus_ID = 6;
                                        cnt++;
                                        cust_Comment = "Hold Reason: First daily pay by card transaction should be on hold";
                                    }
                                }

                                if (newalert == 0 && cnt == 0)
                                {
                                    obj.TransactionStatus_ID = 6;
                                    cnt++;
                                    cust_Comment = alertmsg;
                                }
                                if (cnt == 0 && Convert.ToInt32(ids1.Rows[6]["Status_ForCustomer"]) == 0)
                                {
                                    MySqlCommand _cmd1 = new MySqlCommand("CheckAddressDetailsCustomers");
                                    _cmd1.CommandType = CommandType.StoredProcedure;
                                    _cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                    _cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    DataTable chk_add = db_connection.ExecuteQueryDataTableProcedure(_cmd1);
                                    if (chk_add.Rows.Count > 0)
                                    {
                                        string postCode = Convert.ToString(chk_add.Rows[0]["Post_Code"]).Trim();
                                        string houseNumber = Convert.ToString(chk_add.Rows[0]["House_Number"]).Trim();
                                        string street = Convert.ToString(chk_add.Rows[0]["Street"]).Trim();
                                        int cityID = Convert.ToInt32(chk_add.Rows[0]["City_ID"]);
                                        if (String.IsNullOrEmpty(postCode) || String.IsNullOrEmpty(houseNumber) || String.IsNullOrEmpty(street)) // || cityID <= 0
                                        {
                                            //if (Convert.ToInt32(chk_add.Rows[0]["Active_Status"]) != 2 && Convert.ToInt32(ids1.Rows[6]["Status_ForCustomer"]) == 0)
                                            //{
                                            obj.TransactionStatus_ID = 6;
                                            cnt++;
                                            cust_Comment = "Hold Reason: Address Information Missing.";
                                            //}
                                            //if (Convert.ToInt32(ids1.Rows[6]["Status_ForCustomer"]) == 1) {
                                            //    obj.TransactionStatus_ID = 6;
                                            //    cnt++;
                                            //    cust_Comment = "Hold Reason: Address Information Missing.";
                                            //}
                                            //errorMessage = "Address Information Missing.";
                                        }
                                    }
                                    //if (errorMessage != "")
                                    //    ds.Rows.Add(0, errorMessage);
                                }
                                if (cnt > 0)
                                {
                                    #region transfercomment

                                    _cmd_comment.CommandType = CommandType.StoredProcedure;
                                    _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                    _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                    _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                    _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", 1);
                                    _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                    _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                    _cmd_comment.Parameters.AddWithValue("_Status", 0);

                                    _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                    _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                    chk_transaction_status = 0;
                                    #endregion
                                }
                                //}
                            }
                        }

                    }
                    catch { }
                    string watchlist_reason = "";
                    try { watchlist_reason = check_avg_txn(obj, 1, 0.00); }
                    catch { }

                    MySqlTransaction transaction;
                    transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
                    try
                    {
                        obj.ReferenceNo = GenerateReferenceNo(obj.Client_ID, obj.CB_ID);
                        if (obj.ReferenceNo != null && obj.ReferenceNo != "")
                        {

                            obj.TransactionType_ID = 1;
                            obj.Delete_Status = 0;
                            obj.PaymentReceived_ID = 2;
                            if (obj.PaymentType_ID == 7)
                            {
                                obj.PaymentReceived_ID = 1;
                            }
                                else if (obj.PaymentType_ID == 8)
                                {
                                    dt.Columns.Clear();

                                    dt.Columns.Add("Status", typeof(int));
                                    dt.Columns.Add("Transaction_Ref", typeof(string));
                                    dt.Columns.Add("Cust_ReferanceNo", typeof(string));
                                    dt.Columns.Add("Barcode_Details", typeof(string));

                                    obj.Customer_Reference = Cust_ReferanceNo;

                                    MySqlCommand cmdactive_instantbnkapi = new MySqlCommand("Get_activeinstantBankAPIDetails");
                                    cmdactive_instantbnkapi.CommandType = CommandType.StoredProcedure;
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_status", 0);

                                    int payWithBankGatewayId = 6;
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_payWithBankGatewayId", payWithBankGatewayId);

                                    DataTable dttcmdactive_instantbnkapi = db_connection.ExecuteQueryDataTableProcedure(cmdactive_instantbnkapi);
                                    int api_id_active_bnk_id = 0;
                                    if (dttcmdactive_instantbnkapi.Rows.Count > 0)
                                    {
                                        api_id_active_bnk_id = Convert.ToInt32(dttcmdactive_instantbnkapi.Rows[0]["bank_api_id"]);
                                    }

                                    if (api_id_active_bnk_id == 6)
                                    {

                                        returnPaysafecashBarcode = GetPaysafecashBarcode(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id, obj.Transaction_ID);
                                        if (returnPaysafecashBarcode == "FAILED")
                                        {
                                            dt.Clear();
                                            dt.Rows.Add(2, obj.ReferenceNo, Cust_ReferanceNo, returnPaysafecashBarcode);
                                            return dt;
                                        }
                                    }
                                }

                                obj.PartPay_Flag = 1;
                            if (obj.auth_code == "undefined")
                            {
                                obj.auth_code = "";
                            }
                            obj.ManualRateChangedFlag = 1;
                            if (Convert.ToString(obj.Purpose_ID) == "10")
                            {
                                obj.Other_Purpose = Convert.ToString(obj.Purpose);
                            }
                            else
                            {
                                obj.Other_Purpose = "";
                            }
                            using (MySqlCommand cmd = new MySqlCommand("Insert_Transfer", con))
                            //using(MySqlCommand cmd = new MySqlCommand())
                            {
                                //                            cmd.CommandText = "insert into Transaction_Table(Customer_ID,Beneficiary_ID,TransactionType_ID,PaymentType_ID,TransactionStatus_ID,AmountInGBP,"
                                //+ "Exchange_Rate,AmountInPKR,Purpose_ID,Transfer_Fees,Record_Insert_DateTime,Delete_Status,PaymentDepositType_ID,paymentReceived_ID,"
                                //+ "ReferenceNo,User_ID,CB_ID,Country_ID,Currency_Code,Transaction_From_Flag,auth_code,DeliveryType_Id,Actual_ExchangeRate,ManualRateChangedFlag,"
                                //+ "RateUpdateReason_ID,MsgToAgent,PartPay_Flag,SourceComment_Flag,SourceComment,Other_Purpose,Client_ID,HDelivery_Flag,"
                                //+ "HDelivery_Address,CollectionPoint_ID,FromCurrency_Code,Wallet_ID,Wallet_Amount,Discount_ID,Discount_Amount) "
                                //+ "values(_Customer_ID,_Beneficiary_ID,_TransactionType_ID,_PType_ID,_TransactionStatus_ID,_AmountInBase,_Rate,_AmountInForeign,"
                                //+ "_Purpose_ID,_Transfer_Fees,_Record_Insert_DateTime,_Delete_Status,_PaymentDepositType_ID,_paymentReceived_ID,_ReferenceNo"
                                //+ ",_User_ID,_CB_ID,_Country_ID,_Currency_Code,_Transaction_From_Flag,_auth_code,_DeliveryType_ID,_Actual_ExchangeRate,"
                                //+ "_ManualRateChangedFlag,_RateUpdateReason_ID,_MsgToAgent,_PartPay_Flag,_SourceComment_Flag,_SourceComment,_Other_Purpose,"
                                //+ "_Client_ID,_HomeDeliveryflag,_HomeDeliveryAddress,_CollectionPoint_ID,_BaseCurrency,_wallet_id,_Wallet_Amount,"
                                //+ "Discount_ID,_Discount_Amount);select LAST_INSERT_ID();";
                                //cmd.Connection = con;
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Transaction = transaction;
                                cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                cmd.Parameters.AddWithValue("_Beneficiary_ID", obj.Beneficiary_ID);
                                cmd.Parameters.AddWithValue("_TransactionType_ID", obj.TransactionType_ID);
                                cmd.Parameters.AddWithValue("_PType_ID", obj.PaymentType_ID);
                                cmd.Parameters.AddWithValue("_TransactionStatus_ID", obj.TransactionStatus_ID);

                                cmd.Parameters.AddWithValue("_AmountInBase", obj.AmountInGBP.ToString("0.00"));

                                cmd.Parameters.AddWithValue("_Rate", obj.Exchange_Rate.ToString("0.0000"));
                                cmd.Parameters.AddWithValue("_AmountInForeign", obj.AmountInPKR.ToString("0.00"));

                                cmd.Parameters.AddWithValue("_Purpose_ID", obj.Purpose_ID);
                                cmd.Parameters.AddWithValue("_Transfer_Fees", obj.Transfer_Fees.ToString("0.00"));

                                cmd.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                cmd.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                cmd.Parameters.AddWithValue("_PaymentDepositType_ID", obj.PaymentDepositType_ID);
                                cmd.Parameters.AddWithValue("_paymentReceived_ID", obj.PaymentReceived_ID);
                                cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);

                                cmd.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                cmd.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                if (obj.Country_ID == 0)
                                {
                                    try { obj.Country_ID = Convert.ToInt32(bt.Rows[0]["Beneficiary_Country_ID"]); } catch { }
                                }
                                cmd.Parameters.AddWithValue("_Country_ID", obj.Country_ID);
                                cmd.Parameters.AddWithValue("_Currency_Code", obj.Currency_Code);
                                cmd.Parameters.AddWithValue("_Transaction_From_Flag", obj.Transaction_From_Flag);
                                cmd.Parameters.AddWithValue("_auth_code", obj.auth_code);
                                cmd.Parameters.AddWithValue("_DeliveryType_ID", obj.DeliveryType_Id);

                                cmd.Parameters.AddWithValue("_Actual_ExchangeRate", obj.Actual_ExchangeRate);

                                cmd.Parameters.AddWithValue("_ManualRateChangedFlag", obj.ManualRateChangedFlag);
                                cmd.Parameters.AddWithValue("_RateUpdateReason_ID", obj.RateUpdateReason_ID);

                                cmd.Parameters.AddWithValue("_MsgToAgent", obj.MsgToAgent);
                                cmd.Parameters.AddWithValue("_PartPay_Flag", obj.PartPay_Flag);
                                   
                                    cmd.Parameters.AddWithValue("_SourceComment_Flag", obj.SourceComment_Flag);
                                string sofstr = obj.SourceComment;
                                if (obj.SourceComment != "" && obj.SourceComment != null)
                                    sofstr = obj.SourceComment.Replace("null", "");

                                cmd.Parameters.AddWithValue("_SourceComment", sofstr);
                                cmd.Parameters.AddWithValue("_Other_Purpose", obj.Other_Purpose);
                                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                cmd.Parameters.AddWithValue("_HomeDeliveryflag", obj.HDelivery_Flag);
                                cmd.Parameters.AddWithValue("_HomeDeliveryAddress", obj.HDelivery_Address);

                                cmd.Parameters.AddWithValue("_CollectionPoint_ID", obj.CollectionPoint_ID);
                                cmd.Parameters.AddWithValue("_BaseCurrency", obj.FromCurrency_Code);
                                cmd.Parameters.AddWithValue("_PayByCard_ID", obj.PayByCard_ID);
                                cmd.Parameters.AddWithValue("_PaymentGateway_Flag", obj.PaymentGateway_ID);
                                if (obj.Wallet_Perm == 0)
                                {
                                    cmd.Parameters.AddWithValue("_wallet_id", obj.Wallet_ID);
                                    cmd.Parameters.AddWithValue("_Wallet_Amount", obj.Wallet_Amount);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("_wallet_id", 0);
                                    cmd.Parameters.AddWithValue("_Wallet_Amount", 0);
                                }
                                if (obj.Discount_Perm == 0)
                                {
                                    cmd.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                    cmd.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("_Discount_ID", 0);
                                    cmd.Parameters.AddWithValue("_Discount_Amount", 0);
                                }
                                //cmd.Parameters.Add(new MySqlParameter("_Transaction_ID", MySqlDbType.Int32));
                                //cmd.Parameters["_Transaction_ID"].Direction = ParameterDirection.Output;

                                cmd.Parameters.AddWithValue("_Comment", obj.Comment);
                                    cmd.Parameters.AddWithValue("_ExtraTransfer_Fees", obj.ExtraTransfer_Fees.ToString("0.00"));
                                    cmd.Parameters.AddWithValue("_offer_rate_flag", obj.offer_rate_flag);
                                    cmd.Parameters.AddWithValue("_improved_rate_flag", obj.improved_rate_flag); //vyankatesh 02-09


                                    if (obj.Till_ID <= 0 || obj.Till_ID == null) { obj.Till_ID = 1; }
                                cmd.Parameters.AddWithValue("_Till_ID", obj.Till_ID);
                                obj.Transaction_ID = Convert.ToInt32(cmd.ExecuteScalar());


                                if (obj.PaymentType_ID == 8)
                                {
                                    if (returnPaysafecashBarcode != "FAILED")
                                    {
                                        string paysafe_server_to_server = paysafecashservertoserver(returnPaysafecashBarcode, obj, obj.Transaction_ID, obj.ReferenceNo);
                                    }
                                }

                                    //if (obj.Transaction_ID == 0) // insert
                                    //{
                                    //    try
                                    //    {
                                    //        obj.Transaction_ID = Convert.ToInt32(cmd.Parameters["_Transaction_ID"].Value);
                                    //    }
                                    //    catch (Exception)
                                    //    {
                                    //    }
                                    //}
                                    cmd.Dispose();
                                if (obj.Transaction_ID > 0)
                                {
                                    #region Pay with wallet
                                    //Pay with wallet
                                    if (obj.PaymentType_ID == 7)
                                    {
                                        obj.transfer_type = 2; obj.paytype = 5;
                                        obj.exchangerate = 1; obj.fee = 0;
                                        MySqlCommand _cmd = new MySqlCommand("SP_GetWalletDetails");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        _cmd.Parameters.AddWithValue("_where", " and wallet_table.AgentFlag=1 and currency_master.Currency_Code='" + obj.FromCurrency_Code + "'");
                                        DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                        if (dtwallets.Rows.Count == 1)
                                        {
                                            double balance = Convert.ToDouble(dtwallets.Rows[0]["Wallet_balance"]);

                                            double rewardamount = 0;
                                            if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                                            {
                                                if (Convert.ToString(obj.Discount_Perm) == "0")
                                                {
                                                    if (Convert.ToString(obj.Discount_Amount) != "" && Convert.ToString(obj.Discount_Amount) != null)
                                                    {
                                                        rewardamount = Convert.ToDouble(obj.Discount_Amount);
                                                    }
                                                }
                                            }
                                            double transcost = (obj.AmountInGBP + obj.Transfer_Fees) - rewardamount;
                                            if (balance < transcost)
                                            {
                                                transaction.Rollback();
                                                dt.Rows.Add(4, "Insufficient Funds", Cust_ReferanceNo, obj.Transaction_ID);
                                                 return dt;//Insufficient Balance 
                                            }
                                            else
                                            {
                                                int Currency_ID = Convert.ToInt32(dtwallets.Rows[0]["Currency_ID"]);
                                                int Wallet_ID = Convert.ToInt32(dtwallets.Rows[0]["Wallet_ID"]);
                                                Double newwalletbalance = balance - transcost;

                                                MySqlCommand cmd1 = new MySqlCommand("Update_WalletBalance");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Connection = con;
                                                cmd1.Transaction = transaction;
                                                cmd1.Parameters.AddWithValue("_newwalletbalance", newwalletbalance);
                                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd1.Parameters.AddWithValue("_Wallet_ID", Wallet_ID);
                                                int msg = cmd1.ExecuteNonQuery();
                                                cmd1.Dispose();
                                                if (msg > 0)
                                                {
                                                    cmd1 = new MySqlCommand("insert_wallet_transaction");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Connection = con;
                                                    cmd1.Transaction = transaction;
                                                    cmd1.Parameters.AddWithValue("_Wallet_ID", Wallet_ID);
                                                    cmd1.Parameters.AddWithValue("_transfer_type", obj.transfer_type);
                                                    cmd1.Parameters.AddWithValue("_Currency_ID", Currency_ID);
                                                    cmd1.Parameters.AddWithValue("_transfer_amount", transcost);
                                                    cmd1.Parameters.AddWithValue("_oldwalletbalance", balance);
                                                    cmd1.Parameters.AddWithValue("_newwalletbalance", newwalletbalance);
                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                    cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                                    cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    cmd1.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                    cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                    cmd1.Parameters.AddWithValue("_paytype", obj.paytype);
                                                    cmd1.Parameters.AddWithValue("_exchangerate", obj.exchangerate);
                                                    cmd1.Parameters.AddWithValue("_fee", obj.fee);
                                                    cmd1.Parameters.AddWithValue("_Wallet_Description", "Amount " + transcost + " used for transaction " + obj.ReferenceNo + ".");
                                                    cmd1.Parameters.AddWithValue("_User_ID", 0);
                                                    cmd1.Parameters.AddWithValue("_AgentFlag", 1);
                                                    cmd1.Parameters.AddWithValue("_referee_id", 0);
                                                    cmd1.Parameters.AddWithValue("_Referral_Flag", 1);

                                                    msg = cmd1.ExecuteNonQuery();
                                                    if (msg > 0)
                                                    {
                                                        string act = "App - " + Convert.ToString(obj.FromCurrency_Code) + " Wallet Balance used for transaction " + obj.ReferenceNo + ". Wallet Amount: " + transcost + " New Wallet Balance: " + newwalletbalance + " Old Wallet Balance: " + balance + " ";
                                                        CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);
                                                    }
                                                }
                                                else
                                                {
                                                    transaction.Rollback();
                                                    dt.Rows.Add(5, "Failed to Update Wallet Balance", Cust_ReferanceNo, obj.Transaction_ID);
                                                    return dt; 
                                                }
                                            }
                                        }
                                    }

                                    #endregion Pay with wallet

                                    if (chk_transaction_status == 0)
                                    {
                                        _cmd_comment.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                        _cmd_comment.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                        int chk_comment = db_connection.ExecuteNonQueryProcedure(_cmd_comment);
                                    }
                                    DataTable dtc = (DataTable)CompanyInfo.GetBaseCurrencywisebankdetails(obj.Client_ID, obj.FromCurrency_Code, obj.PaymentDepositType_ID, obj.DeliveryType_Id);

                                    Cust_ReferanceNo = Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]);
                                    dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, obj.Transaction_ID);
                                    CompanyInfo.InsertTrackingLogDetails(1, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                    if (obj.PaymentType_ID == 7)
                                    {
                                        CompanyInfo.InsertTrackingLogDetails(3, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                    }
                                    CompanyInfo.InsertActivityLogDetails("App - Money Transfer Request Submitted Successfully. Transaction Reference - " + obj.ReferenceNo + ".", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                    string notification_icon = "request-money.jpg";
                                    string notification_message = "<span class='cls-admin'>transfer <strong class='cls-transferinitiate'>request</strong> sent successfully. <strong>Transfer Ref.- " + obj.ReferenceNo + "</strong></span><span class='cls-customer'><strong>Money transfer request submited</strong><span>Your request for the money transfer has been submitted successfully.</span></span>";
                                    CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, obj.User_ID, Convert.ToInt32(obj.CB_ID), 0, 0, 1, obj.Transaction_ID, _srvTransactionContext);
                                    if (watchlist_reason != "")
                                    {
                                        update_to_watchlist(obj, watchlist_reason);
                                    }
                                    try
                                    {
                                        string browserinfo = "";
                                        string IPAddress1 = context.Connection.RemoteIpAddress.ToString();
                                        browserinfo = "IP Address: " + IPAddress1;
                                        try
                                        {
                                            ServicePointManager.Expect100Continue = true;
                                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls13;
                                            //| SecurityProtocolType.Tls11
                                            //| SecurityProtocolType.Tls12
                                            //| SecurityProtocolType.Ssl3;
                                            var client = new RestClient("https://tools.keycdn.com/geo.json?host=" + IPAddress1);
                                            client.Timeout = -1;
                                            var request = new RestRequest(Method.GET);
                                            client.UserAgent = "keycdn-tools:" + Convert.ToString(dtc.Rows[0]["company_website"]); //dtc.Rows[0]["Company_URL_Customer"] 
                                                                                                                                   //keycdn-tools:https://www.calyx-solutions.com
                                            request.AddHeader("Accept-Encoding", "gzip, deflate, br");

                                            IRestResponse response = client.Execute(request);

                                            GeoLocation GeoLocationList = Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(response.Content);
                                            browserinfo = Newtonsoft.Json.JsonConvert.SerializeObject(GeoLocationList.data.geo);
                                        }
                                        catch (Exception ex)
                                        {
                                            browserinfo = "IP Address: " + IPAddress1;
                                        }
                                        int chk_validity = 1;
                                        try
                                        {
                                            //if (HttpContext.Current.Session["chk_validity"] != null)
                                            //{
                                            //    chk_validity = 0;
                                            //}
                                        }
                                        catch (Exception ex_validity)
                                        {

                                        }

                                        MySqlCommand cmd1 = new MySqlCommand("Insert_TransactionDetails");
                                        cmd1.CommandType = CommandType.StoredProcedure;
                                        cmd1.Connection = con;
                                        cmd1.Transaction = transaction;
                                        cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                        cmd1.Parameters.AddWithValue("_chk_validity_poa", chk_validity);
                                        cmd1.Parameters.AddWithValue("_APITransaction_ID", "0");
                                        cmd1.Parameters.AddWithValue("_BranchListAPI_ID", obj.BranchListAPI_ID);
                                        cmd1.Parameters.AddWithValue("_APIBranch_Details", obj.APIBranch_Details);
                                        cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        cmd1.Parameters.AddWithValue("_NameOnCard", obj.NameOnCard);
                                        cmd1.Parameters.AddWithValue("_Location_Details", browserinfo);
                                            cmd1.Parameters.AddWithValue("_Benf_BankDetails_ID", obj.Benf_BankDetails_ID);
                                            int msg = cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                        if (msg > 0) { }
                                        #region check location
                                        string act = "";
                                        try
                                        {
                                            obj.userAgent = (context.Request.Headers["User-Agent"]).ToString();
                                            DataTable chkLocation1 = CompanyInfo.check_location(obj.Client_ID,obj.userAgent, _srvTransactionContext);
                                            Boolean chkLocation = true;
                                            string country_log = "";
                                            string device_ty = "";

                                            try
                                            {
                                                chkLocation = Convert.ToBoolean(chkLocation1.Rows[0]["is_valid"]);
                                                country_log = Convert.ToString(chkLocation1.Rows[0]["Country"]);
                                                device_ty = Convert.ToString(chkLocation1.Rows[0]["device_ty"]);

                                            }
                                            catch
                                            {

                                            }
                                            if (!chkLocation)
                                            {
                                                //Notification
                                                act = act + " | location is invalid";
                                                string notification_icon1 = "money-recive.jpg";
                                                string notification_message1 = "<span class='cls-admin'>Transaction <strong class='cls-new-benf'>Submitted from New Location</strong></span>";
                                                CompanyInfo.save_notification_compliance(notification_message1, notification_icon1, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), obj.Client_ID, 1, 0, obj.Branch_ID, 0, 1, 1, obj.Transaction_ID, _srvTransactionContext);
                                                act = act + " |notification sent for new location";

                                                //email
                                                string subject1 = string.Empty;
                                                string body1 = string.Empty;
                                                HttpWebRequest httpRequest = null, httpRequest1 = null;
                                                DataTable d2 = (DataTable)CompanyInfo.getCustomerDetails(obj.Client_ID, Customer_ID);
                                                string sendmsg = "Transaction Submitted from New Location";
                                                string company_name = Convert.ToString(dtc.Rows[0]["Company_Name"]);
                                                string URL = Convert.ToString(dtc.Rows[0]["Company_URL_Admin"]);
                                                string cust_url = Convert.ToString(dtc.Rows[0]["Company_URL_Customer"]);
                                                httpRequest = (HttpWebRequest)WebRequest.Create(URL + "Email/new-login.html");
                                                httpRequest.UserAgent = "Code Sample Web Client";
                                                HttpWebResponse webResponse = (HttpWebResponse)httpRequest.GetResponse();
                                                using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                                                {
                                                    body1 = reader.ReadToEnd();
                                                }
                                                body1 = body1.Replace("[name]", Convert.ToString(ct.Rows[0]["First_Name"]));
                                                string enc_ref = CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]), true);
                                                string link = cust_url + "/secure-account-verfiy?reference=" + enc_ref;
                                                body1 = body1.Replace("[link]", link);
                                                body1 = body1.Replace("[New_Login_Detected]", "Transaction Submitted from New Location");
                                                body1 = body1.Replace("[country]", country_log);
                                                body1 = body1.Replace("[time]", (Convert.ToDateTime(CompanyInfo.gettime(obj.Client_ID, _srvTransactionContext))).ToString("dddd, dd MMMM yyyy HH:mm:ss"));
                                                body1 = body1.Replace("[location_msg]", "We noticed a transaction from your account from a location that you have not used before. If this wasn't you, we'll help you secure your account.");
                                                body1 = body1.Replace("[device]", device_ty);


                                                string EmailID = Convert.ToString(ct.Rows[0]["Email_ID"]);
                                                httpRequest1 = (HttpWebRequest)WebRequest.Create(URL + "Email/TransactionLocation.txt");
                                                httpRequest1.UserAgent = "Code Sample Web Client";
                                                HttpWebResponse webResponse1 = (HttpWebResponse)httpRequest1.GetResponse();
                                                using (StreamReader reader = new StreamReader(webResponse1.GetResponseStream()))
                                                {
                                                    subject1 = reader.ReadLine();
                                                }
                                                subject1 += ct.Rows[0]["WireTransfer_ReferanceNo"];

                                                string send_mail = (string)CompanyInfo.Send_Mail(dtc, EmailID, body1, subject1, obj.Client_ID, obj.Branch_ID, "", "", "", _srvTransactionContext);
                                                CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);

                                                //Notification
                                                act = act + "| Email sent for New Transaction Location";

                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            act = act + Convert.ToString(ex);
                                            CompanyInfo.InsertActivityLogDetails("check location " + Convert.ToString(obj.Discount_Code) + ". transaction " + obj.ReferenceNo + ". Error: " + Convert.ToString(ex) + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Location", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                        }
                                        CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);

                                        #endregion
                                        MySqlCommand _cmd = new MySqlCommand("Update_MonthlyLimit");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_From_Date", obj.Record_Insert_DateTime);
                                        _cmd.Parameters.AddWithValue("_Transfer_ID", 0);// Primary ID of customer transfer limit
                                        _cmd.Parameters.AddWithValue("_Amount", obj.AmountInGBP.ToString("0.00"));
                                        _cmd.Parameters.AddWithValue("_Queryflag", 2);
                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        string success1 = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                    }
                                    catch { }
                                    try
                                    {
                                        //Insert Wallet Transaction
                                        if (obj.Wallet_Perm == 0 && obj.Wallet_ID > 0)
                                        {
                                            obj.transfer_type = 2; obj.paytype = 5;
                                            obj.exchangerate = 1; obj.fee = 0;
                                            MySqlCommand _cmd = new MySqlCommand("GetWallets");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            string whereclause = " and c.Client_ID=" + obj.Client_ID + " and w.Client_ID=" + obj.Client_ID + " and w.Customer_ID=" + Customer_ID + " and w.Wallet_ID = " + obj.Wallet_ID + "";
                                            _cmd.Parameters.AddWithValue("_whereclause", whereclause);
                                            DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                            if (dtwallets.Rows.Count > 0)
                                            {
                                                obj.Currency_ID = Convert.ToInt32(dtwallets.Rows[0]["Currency_ID"]);
                                                obj.oldwalletbalance = Convert.ToDouble(dtwallets.Rows[0]["Wallet_Balance"]);
                                                obj.newwalletbalance = obj.oldwalletbalance - obj.Wallet_Amount;
                                            }
                                            MySqlCommand cmd1 = new MySqlCommand("Update_WalletBalance");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Connection = con;
                                            cmd1.Transaction = transaction;
                                            cmd1.Parameters.AddWithValue("_newwalletbalance", obj.newwalletbalance);
                                            cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd1.Parameters.AddWithValue("_Wallet_ID", obj.Wallet_ID);
                                            double Transfer_Cost = Convert.ToDouble(obj.Transfer_Cost);

                                            int msg = cmd1.ExecuteNonQuery();
                                            cmd1.Dispose();
                                            //if (msg > 0)
                                            //{
                                            cmd1 = new MySqlCommand("insert_wallet_transaction");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Connection = con;
                                            cmd1.Transaction = transaction;
                                            cmd1.Parameters.AddWithValue("_Wallet_ID", obj.Wallet_ID);
                                            cmd1.Parameters.AddWithValue("_transfer_type", obj.transfer_type);
                                            cmd1.Parameters.AddWithValue("_Currency_ID", obj.Currency_ID);
                                            cmd1.Parameters.AddWithValue("_transfer_amount", obj.Wallet_Amount);
                                            cmd1.Parameters.AddWithValue("_oldwalletbalance", obj.oldwalletbalance);
                                            cmd1.Parameters.AddWithValue("_newwalletbalance", obj.newwalletbalance);
                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                            cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                            cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd1.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                            cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                            cmd1.Parameters.AddWithValue("_paytype", obj.paytype);
                                            cmd1.Parameters.AddWithValue("_exchangerate", obj.exchangerate);
                                            cmd1.Parameters.AddWithValue("_fee", obj.fee);
                                            cmd1.Parameters.AddWithValue("_Wallet_Description", obj.Wallet_Description);

                                            cmd1.Parameters.AddWithValue("_User_ID", 0);
                                            cmd1.Parameters.AddWithValue("_AgentFlag", 1);
                                            cmd1.Parameters.AddWithValue("_referee_id", 0);
                                            cmd1.Parameters.AddWithValue("_Referral_Flag", 1);
                                            obj.Wallet_Description = "Wallet Amount " + obj.Wallet_Amount + " used for transaction " + obj.ReferenceNo + ".";

                                            msg = cmd1.ExecuteNonQuery();
                                            if (msg > 0)
                                            {
                                                string act = "App - " + Convert.ToString(obj.Wallet_Currency) + " Wallet Balance used for transaction " + obj.ReferenceNo + ". Wallet Amount: " + obj.Wallet_Amount + " New Wallet Balance: " + obj.newwalletbalance + " Old Wallet Balance: " + obj.oldwalletbalance + " ";
                                                CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);
                                            }
                                            //}
                                        }

                                        try
                                        {
                                            //Insert Discount Transaction
                                            if (obj.Discount_Perm == 0 && obj.Discount_ID > 0)
                                            {
                                                MySqlCommand cmd1 = new MySqlCommand("Insert_DiscountDetails");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Connection = con;
                                                cmd1.Transaction = transaction;
                                                cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                cmd1.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                                                cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd1.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                                cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);

                                                int msg = cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                                //Get Usage limit
                                                if (msg > 0)
                                                {
                                                    CompanyInfo.InsertActivityLogDetails(" Discount Code " + Convert.ToString(obj.Discount_Code) + " applied for transaction " + obj.ReferenceNo + ". Discount " + Convert.ToString(obj.DiscountType) + ": " + obj.Discount_Amount + ". ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                                    cmd1 = new MySqlCommand("GetDiscountUsage");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                    cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    DataTable dtuse = db_connection.ExecuteQueryDataTableProcedure(cmd1); cmd1.Dispose();
                                                    if (dtuse.Rows.Count > 0)
                                                    {
                                                        int usage_limit = Convert.ToInt32(dtuse.Rows[0]["Usage_Limit"]);
                                                        int used_count = Convert.ToInt32(dtuse.Rows[0]["used_count"]);
                                                        if ((used_count + 1) >= usage_limit)
                                                        {
                                                            //update discount available status
                                                            cmd1 = new MySqlCommand("Update_DiscountAvailable");
                                                            cmd1.CommandType = CommandType.StoredProcedure;
                                                            cmd1.Connection = con;
                                                            cmd1.Transaction = transaction;
                                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                            cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                            cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                            cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                            cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        catch (Exception ex) { CompanyInfo.InsertActivityLogDetails(" Discount Code " + Convert.ToString(obj.Discount_Code) + ". transaction " + obj.ReferenceNo + ". Error: " + Convert.ToString(ex) + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext); }

                                    }
                                    catch (Exception ex) { CompanyInfo.InsertActivityLogDetails(" Discount Code " + Convert.ToString(obj.Discount_Code) + ". transaction " + obj.ReferenceNo + ". Error: " + Convert.ToString(ex) + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext); }



                                    cmd2.Dispose();

                                    //Insert Bank details
                                    if (obj.PaymentDepositType_ID == 1)
                                    {
                                        if (bt.Rows.Count > 0)
                                        {
                                            cmd2 = new MySqlCommand("Insert_BankDepositDetails");//SP_Save_Beneificiary_BankDetails
                                            cmd2.CommandType = CommandType.StoredProcedure;
                                            cmd2.Connection = con;
                                            cmd2.Transaction = transaction;
                                            cmd2.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                            cmd2.Parameters.AddWithValue("_BBank_ID", Convert.ToInt32(bt.Rows[0]["BBank_ID"]));
                                            cmd2.Parameters.AddWithValue("_Account_Number", Convert.ToString(bt.Rows[0]["Account_Number"]));
                                            cmd2.Parameters.AddWithValue("_AccountHolderName", Convert.ToString(bt.Rows[0]["AccountHolderName"]));
                                            cmd2.Parameters.AddWithValue("_Branch", Convert.ToString(bt.Rows[0]["Branch"]));
                                            cmd2.Parameters.AddWithValue("_BranchCode", Convert.ToString(bt.Rows[0]["BranchCode"]));
                                            cmd2.Parameters.AddWithValue("_BankCode", Convert.ToString(bt.Rows[0]["BankCode"]));
                                            cmd2.Parameters.AddWithValue("_Ifsc_Code", Convert.ToString(bt.Rows[0]["Ifsc_Code"]));
                                            cmd2.Parameters.AddWithValue("_Beneficiary_Country_ID", Convert.ToInt32(bt.Rows[0]["Beneficiary_Country_ID"]));
                                            cmd2.Parameters.AddWithValue("_Beneficiary_City_ID", Convert.ToInt32(bt.Rows[0]["Beneficiary_City_ID"]));
                                            cmd2.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd2.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                            cmd2.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                            cmd2.Parameters.AddWithValue("_Benf_Iban", Convert.ToString(bt.Rows[0]["Iban_ID"]));
                                            cmd2.Parameters.AddWithValue("_Benf_BIC", Convert.ToString(bt.Rows[0]["BIC_Code"]));

                                            int bankmsg = cmd2.ExecuteNonQuery(); cmd2.Dispose();
                                            //reset to previous value                                    
                                        }
                                    }

                                    if (obj.SOFID > 0 && Convert.ToString(obj.SourceComment_Flag) == "1")
                                    {
                                        cmd2 = new MySqlCommand("Update_TxnIDSof");
                                        cmd2.CommandType = CommandType.StoredProcedure;
                                        cmd2.Connection = con;
                                        cmd2.Transaction = transaction;
                                        cmd2.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                        cmd2.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        cmd2.Parameters.AddWithValue("_SourceId", obj.SOFID);
                                        int sourcesuccess = cmd2.ExecuteNonQuery(); cmd2.Dispose();
                                    }

                                    CompanyInfo.InsertActivityLogDetails("App - Transaction Details : Reference: " + obj.ReferenceNo + ", Sender Name: " + Convert.ToString(ct.Rows[0]["First_Name"]) + ", Receiver Name: " + Convert.ToString(bt.Rows[0]["Beneficiary_Address"]) + "," +
                                        " Amount: " + obj.AmountInGBP + " " + obj.FromCurrency_Code + ", <br />Exchange Rate: " + obj.Exchange_Rate + ", Amount in Foreign Currency: " + obj.AmountInPKR + " " + obj.Currency_Code + ", Transfer Fees:" + obj.Transfer_Fees + " Collection Point ID: " + obj.CollectionPoint_ID + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Insert Transaction", _srvTransactionContext);
                                    CompanyInfo.InsertActivityLogDetails("App - Email sending initiated on send money success.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send-Money", _srvTransactionContext);
                                    string subject = string.Empty;
                                    string body = string.Empty;

                                    if (dtc.Rows.Count > 0)
                                    {
                                        try
                                        {
                                            string URL = Convert.ToString(dtc.Rows[0]["Company_URL_Admin"]);
                                            string cust_url = Convert.ToString(dtc.Rows[0]["Company_URL_Customer"]);
                                            string templatename = "NewSendmoney-SuccessMailforCash.htm";
                                            if (obj.PaymentType_ID == 7)
                                            {
                                                templatename = "PaybyCardSuccess.htm";
                                            }
                                            HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(URL + "Email/" + templatename);
                                            httpRequest.UserAgent = "Code Sample Web Client";
                                            HttpWebResponse webResponse = (HttpWebResponse)httpRequest.GetResponse();
                                            using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                                            {
                                                body = reader.ReadToEnd();
                                            }
                                            string First_Name = Convert.ToString(ct.Rows[0]["First_Name"]);
                                            string Email_ID = Convert.ToString(ct.Rows[0]["Email_ID"]);
                                            string email = Email_ID.Trim();

                                            body = body.Replace("[name]", First_Name);
                                            body = body.Replace("[receivername]", Convert.ToString(bt.Rows[0]["Beneficiary_Name"]));

                                            //----sender Details
                                            body = body.Replace("[senderadd]", Convert.ToString(ct.Rows[0]["Address"]));
                                            body = body.Replace("[senderphoneno]", Convert.ToString(ct.Rows[0]["Phone_Number"]));
                                            body = body.Replace("[sendermobno]", Convert.ToString(ct.Rows[0]["Mobile_Number"]));
                                            body = body.Replace("[senderemailid]", Email_ID);
                                            body = body.Replace("[amtingbp]", obj.AmountInGBP.ToString("F2"));
                                            body = body.Replace("[amtinforeign]", obj.AmountInPKR.ToString());
                                            body = body.Replace("[transferfees]", obj.Transfer_Fees.ToString("F2"));
                                            body = body.Replace("[Currency]", obj.Currency_Code);
                                            body = body.Replace("[Customerrefno]", Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]));
                                            body = body.Replace("[Hours]", Convert.ToString(dtc.Rows[0]["Cancel_Transaction_Hours"]));
                                            double newtotamount = Convert.ToDouble(obj.AmountInGBP) + Convert.ToDouble(obj.Transfer_Fees);
                                            //body = body.Replace("[totAmt]", newtotamount.ToString("0.00"));

                                            body = body.Replace("[exchangerate]", obj.Exchange_Rate.ToString());

                                            //----sender Details

                                            body = body.Replace("[RefNo]", obj.ReferenceNo);
                                            body = body.Replace("[receiveradd]", Convert.ToString(bt.Rows[0]["Beneficiary_Address"]));
                                            body = body.Replace("[receiverphoneno]", Convert.ToString(bt.Rows[0]["Beneficiary_Telephone"]));
                                            body = body.Replace("[receivermobno]", Convert.ToString(bt.Rows[0]["Beneficiary_Mobile"]));
                                            body = body.Replace("[receiverbankname]", Convert.ToString(bt.Rows[0]["Bank_Name"]));
                                            body = body.Replace("[receiveraccountno]", Convert.ToString(bt.Rows[0]["Account_Number"]));
                                            body = body.Replace("[ttype]", obj.PaymentDepositType_ID.ToString());
                                            body = body.Replace("[countrymsg]", Convert.ToString(""));
                                            body = body.Replace("[CashCollectionMsg]", Convert.ToString(""));
                                            body = body.Replace("[BaseCurrency]", Convert.ToString(obj.FromCurrency_Code));
                                            string timezone = Convert.ToString(ct.Rows[0]["Base_Timezone"]);
                                            if (timezone != "" && timezone != null)
                                            {
                                                var britishZone = TimeZoneInfo.FindSystemTimeZoneById("" + timezone + "");
                                                var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                                body = body.Replace("[TransDate]", d.ToString("dd/MM/yyyy"));
                                            }
                                            else
                                            {
                                                body = body.Replace("[TransDate]", DateTime.Now.ToString("dd/MM/yyyy"));
                                            }
                                            body = body.Replace("[PaymentType]", obj.PaymentType);
                                            body = body.Replace("[TransferType]", obj.TransferType);
                                            double rewardamount = 0; string lbl = "";
                                            if (obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                                            {
                                                if (Convert.ToString(obj.Wallet_Perm) == "0")
                                                {
                                                    if (Convert.ToString(obj.Wallet_Amount) != "" && Convert.ToString(obj.Wallet_Amount) != null)
                                                    {
                                                        obj.Wallet_Amount = Convert.ToDouble(obj.Wallet_Amount);
                                                        rewardamount = obj.Wallet_Amount;
                                                        lbl = "Wallet";
                                                    }
                                                }
                                            }

                                            if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                                            {
                                                if (Convert.ToString(obj.Discount_Perm) == "0")
                                                {
                                                    if (Convert.ToString(obj.Discount_Amount) != "" && Convert.ToString(obj.Discount_Amount) != null)
                                                    {
                                                        obj.Discount_Amount = Convert.ToDouble(obj.Discount_Amount);
                                                        rewardamount = obj.Discount_Amount;
                                                        lbl = "Discount";
                                                    }
                                                }
                                            }
                                            double newtotamount1 = newtotamount - rewardamount;
                                            body = body.Replace("[totAmt]", newtotamount1.ToString("0.00"));
                                            if (rewardamount > 0)
                                            {
                                                //body = body.Replace("[transaction_amount]", "<h3>Total Transaction Amount:&nbsp;<label class='orange'>" + obj.FromCurrency_Code + " " + newtotamount.ToString("0.00") + "</label></h3>");
                                                //body = body.Replace("[discountwallet_amount]", "<h3>" + lbl + " Amount:&nbsp;<label class='orange'>" + obj.FromCurrency_Code + " " + rewardamount.ToString("0.00") + "</label></h3>");
                                                body = body.Replace("[transaction_amount]", "Total Transfer Amount: <span style='color:#000;font-weight: bold; '> " + obj.FromCurrency_Code + " " + newtotamount.ToString("0.00") + "</span>");
                                                body = body.Replace("[discountwallet_amount]", "" + lbl + " Amount: <span style='color:#000;font-weight: bold; '>" + obj.FromCurrency_Code + " " + rewardamount.ToString("0.00") + "</span>");
                                            }
                                            else
                                            {
                                                body = body.Replace("[transaction_amount]", "");
                                                body = body.Replace("[discountwallet_amount]", "<br/>");
                                            }

                                            string paybtn = "";
                                            body = body.Replace("[link]", paybtn);
                                            //Subject                        
                                            subject = "[company_name] - Money Transfer Request Submitted Successfully - " + Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]) + " ";
                                            if (obj.PaymentType_ID == 2)
                                            {
                                                body = body.Replace("[divwirestyle]", "display:block;");
                                                MySqlCommand _cmd = new MySqlCommand("GetPaymentTypes");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                _cmd.Parameters.AddWithValue("_Source_ID", 1);
                                                _cmd.Parameters.AddWithValue("_whereclause", " and p.PType_ID=" + obj.PaymentType_ID + "");
                                                DataTable dtp = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                if (dtp.Rows.Count > 0)
                                                {
                                                    body = body.Replace("[Note3]", Convert.ToString(dtp.Rows[0]["Review_Transfer_Message"]));
                                                }
                                                else { body = body.Replace("[Note3]", Convert.ToString("")); }
                                            }
                                            else
                                            {
                                                body = body.Replace("[divwirestyle]", "display:none;");
                                                body = body.Replace("[Note3]", Convert.ToString(""));
                                            }
                                            body = body.Replace("[wire6]", Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]));

                                            DataTable dtfe = (DataTable)CompanyInfo.getEmailPermission(obj.Client_ID, 106);
                                            if (dtfe.Rows.Count == 1)
                                            {
                                                string feeperm = Convert.ToString(dtfe.Rows[0]["Status_ForCustomer"]);
                                                if (feeperm == "0") { body = body.Replace("[divfeesstyle]", "display:none;"); }
                                            }
                                            string mail_send = (string)CompanyInfo.Send_Mail(dtc, email, body, subject, obj.Client_ID, obj.CB_ID, "Insert Transaction", "", "", Convert.ToString(dtc.Rows[0]["BaseCurrency_Code"]), _srvTransactionContext);
                                            
                                            if (mail_send == "Success")
                                            {
                                                CompanyInfo.InsertActivityLogDetails("App - Email sent successfully on send money success.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                            }
                                            else
                                            {
                                                CompanyInfo.InsertActivityLogDetails("App - " + mail_send, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                            }
                                        }
                                        catch(Exception egh) {

                                                CompanyInfo.InsertActivityLogDetails("App - Email sent error on send money:"+ egh.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                            }
                                    }
                                }
                                else
                                {
                                    dt.Rows.Add(1, obj.ReferenceNo, Cust_ReferanceNo, obj.Transaction_ID);
                                }
                            }
                        }
                        transaction.Commit();
                        try
                        {
                            DataTable dt_notif = CompanyInfo.set_notification_data(6);//temporary removed
                            if (dt_notif.Rows.Count > 0)
                            {
                                int SMS = Convert.ToInt32(dt_notif.Rows[0]["SMS"]);
                                int Email = Convert.ToInt32(dt_notif.Rows[0]["Email"]);
                                int Notif_status = Convert.ToInt32(dt_notif.Rows[0]["Notification"]);
                                string notification_msg = Convert.ToString(dt_notif.Rows[0]["notification_msg"]);
                                int i = CompanyInfo.check_notification_perm(Convert.ToString(Customer_ID), obj.Client_ID, obj.Branch_ID, 4, 6, Convert.ToDateTime(obj.Record_Insert_DateTime), 1, SMS, Email, Notif_status, "App -Transaction Submit Notification - 6", notification_msg, obj.Transaction_ID,_srvTransactionContext);
                            }
                        }
                        catch (Exception ex) { }
                        if (obj.Transaction_ID > 0)
                        {
                            //HttpContext.Current.Session["SendMoneyToken"] = "";
                            //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                        }
                        // GCC Transaction generate PIN number
                        string resultTransactionNum = "";
                        #region GCCRemit_Send_Transfer
                        if (obj.BranchListAPI_ID == 2 && obj.PaymentDepositType_ID == 2)
                        {
                            CompanyInfo.InsertActivityLogDetails("App - GCC Transaction.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                            int api_id = 0; string apibankname = "", apiurl = "", apiuser = "", apipass = "", accesscode = "", apicompany_id = "",
                                api_fields = "", webAccountNumber = "", debtAcct = "";

                            MySqlCommand cmd_select = new MySqlCommand("select a.ID,a.Bank_Name,a.api_Fields,cast(AES_DECRYPT(UNHEX(API_URL), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as API_URL,cast(AES_DECRYPT(UNHEX(APIUser_ID), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as APIUser_ID,cast(AES_DECRYPT(UNHEX(APIAccess_Code),'" + CompanyInfo.SecurityKey() + "') as  char(500)) as APIAccess_Code,APICompany_ID,cast(AES_DECRYPT(UNHEX(Password), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as Password from api_master a where ID = " + obj.BranchListAPI_ID); //api_id);
ySqlCommand cmd_select = new MySqlCommand("select * from api_master where ID = " + obj.BranchListAPI_ID);
                            DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                            if (dtt.Rows.Count > 0)
                            {
                                api_id = Convert.ToInt32(dtt.Rows[0]["ID"]);
                                apibankname = Convert.ToString(dtt.Rows[0]["Bank_Name"]);
                                apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                                apiuser = Convert.ToString(dtt.Rows[0]["APIUser_ID"]);
                                apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                                accesscode = Convert.ToString(dtt.Rows[0]["APIAccess_Code"]);
                                apicompany_id = Convert.ToString(dtt.Rows[0]["APICompany_ID"]);
                                api_fields = Convert.ToString(dtt.Rows[0]["api_Fields"]);
                                if (api_fields != "" && api_fields != null)
                                {
                                    Newtonsoft.Json.Linq.JObject objf = Newtonsoft.Json.Linq.JObject.Parse(api_fields);
                                    webAccountNumber = Convert.ToString(objf["webAccountNumber"]);
                                    debtAcct = Convert.ToString(objf["debtAcct"]);
                                }
                            }

                            if (api_id == 2)
                            {
                                try
                                {
                                    string Queryt = "select  cm1.ISO_Code as sendercountrycode , Street as sender_street,Middle_Name ,House_Number as sender_house_number,ifnull(date_format(dd.SenderID_ExpiryDate,'%Y-%m-%d'),'') as SenderID_ExpiryDateymd,ifnull(date_format(b.DateOf_Birth,'%Y-%m-%d'),'') as benef_DOB_ymd,ifnull(date_format(dd1.SenderID_ExpiryDate,'%Y-%m-%d'),'') as benef_ExpiryDate_ymd,ifnull(date_format(c.DateOf_Birth,'%Y-%m-%d'),'') as Sender_DOB_ymd,rm.Relation,t.Comment,tm.APITransaction_ID,ifnull(date_format(dd.SenderID_ExpiryDate,'%d/%m/%Y'),'') as SenderID_ExpiryDatedmy,ifnull(date_format(dd.Issue_Date,'%d/%m/%Y'),'') as Issue_Datedmy,Beneficiary_Name, pt.Provider_name,bm.BankCode,from_curr.ISO_Code_Numeric as from_curr_ISO_code,to_curr.ISO_Code_Numeric as to_curr_ISO_code,cm.RDA_code,ifnull((t.Record_Insert_DateTime),'') as transaction_date_time,cm2.ISO_Code as benf_ISO_Code,tb.Iban_ID,abc.bank_code,abc.bank_name as abc_bank_name,ifnull(cait.Customer_API_ID,0) as Customer_API_ID,PaymentType_ID,Email_ID,ifnull(tm.Transaction_ID,0) as TransMap_ID,WireTransfer_ReferanceNo,Purpose,ReferenceNo,AmountInGBP,AmountInPKR,Exchange_Rate,Transfer_Fees,c.*,b.*, concat(First_Name,' ',ifnull(Middle_Name,''),' ',Last_Name) as Customer_Name, ci.City_Name as Beneficiary_City, cm2.Country_Name as Beneficiary_Country, " +
                     "Beneficiary_Mobile,Email_ID,IFNULL(cm1.Country_Name, '') AS Nationality_Country    ,Phone_Number,Mobile_Number,REPLACE(REPLACE( Concat(House_Number,' ',Street,' ',Post_Code), '\r', ''), '\n', '') as sender_address,Post_Code,jj.City_Name,cm.Country_Name, cm.ISO_Code,cm2.ISO_Code as BISO_Code,cm.Country_Code, cm2.Country_Code as BCountry_Code, cm.ISO_Code_Three, cm.ISO_Code_Three as NISO_Code_Three, cm2.ISO_Code_Three as BISO_Code_Three, " +
                     "ifnull(date_format(dd.SenderID_ExpiryDate,'%m/%d/%Y'),'') as SenderID_ExpiryDate,ifnull(date_format(c.DateOf_Birth,'%d/%m/%Y'),'') as Sender_DOB,ifnull(date_format(c.DateOf_Birth,'%m/%d/%Y'),'') as Sender_DateOfBirth,dd.SenderID_Number,ifnull(date_format(dd.Issue_Date,'%m/%d/%Y'),'') as Issue_Date, id.ID_Name, FromCurrency_Code,t.Currency_Code " +
                     ",dd1.SenderID_Number as BID_Number,bm.Bank_Name,tb.AccountHolderName, tb.Account_Number,tb.Ifsc_Code,tb.BranchCode,tb.Branch,PaymentDepositType_ID,rat.Relation_Code, pmt.Purpose_Code, idm.IDName_Code, idmt.Benf_IDName_Code as BIDName_Code, t.Deliverytype_Id, prm.Profession," +
                     "bbdt.Branch,ifnull(date_format(t.Record_Insert_DateTime,'%d/%m/%Y'),'') as transaction_date ,ifnull(date_format(t.Record_Insert_DateTime,'%T'),'') as transaction_time " +
                     " From Transaction_Table t inner join Customer_Registration c on t.Customer_ID=c.Customer_ID inner join Beneficiary_Master b on c.Customer_ID=b.Customer_ID and t.Beneficiary_ID=b.Beneficiary_ID left join transwise_benfbankdetails tb on t.Transaction_ID=tb.Transaction_ID left join bank_master bm on bm.Bank_ID=tb.BBank_ID " +
                     "left join Country_Master cm on c.Country_ID=cm.Country_ID left join Country_Master cm1 on c.Nationality_ID=cm1.Country_ID AND cm1.Client_ID = c.Client_ID left join Country_Master cm2 on b.Beneficiary_Country_ID=cm2.Country_ID " +
                     "left join city_master jj on c.city_id=jj.City_ID left join city_master ci on ci.City_ID=b.Beneficiary_City_ID " +
                     "left join documents_details dd on c.Customer_ID=dd.Customer_ID and dd.documents_details_id=1 AND (dd.Beneficiary_ID IS NULL OR dd.Beneficiary_ID <= 0) left join IDName_Master id on dd.IDName_ID=id.IDName_ID left join idnames_api_mapping_table idm on id.IDName_ID=idm.IDName_ID and idm.API_ID=" + api_id + " " +
                     "left join documents_details dd1 on t.Beneficiary_ID=dd1.Beneficiary_ID and dd1.documents_details_id=1 left join idnames_api_mapping_table idmt on dd1.IDName_ID=idmt.IDName_ID and idmt.API_ID=" + api_id + " " +
                     "left join relation_master rm on b.Relation_ID=rm.Relation_ID left join relation_api_table rat on rm.Relation_ID=rat.Relation_ID and rat.API_ID=" + api_id + " " +
                     "left join purpose_master pm on t.Purpose_ID=pm.Purpose_ID left join purpose_mapping_table pmt on pm.Purpose_ID=pmt.Purpose_ID and pmt.API_ID=" + api_id + " left join transaction_mapping_table tm on tm.Transaction_ID=t.Transaction_ID " +
                     "left join profession_master prm on c.Profession_ID=prm.ID " +
                     "left join beneficiarybankdetails_table bbdt on bbdt.Beneficiary_ID=b.Beneficiary_ID " +
                     "left join api_bank_codes abc on abc.bank_id=tb.BBank_ID and abc.API_ID=" + api_id + " " +
                     "left join customer_api_id_table cait on (cait.Customer_ID=c.Customer_ID and cait.api_id=" + api_id + ") " +
                     "left JOIN Currency_master from_curr ON from_curr.Currency_Code=t.FromCurrency_Code " +
                     "left JOIN Currency_master to_curr ON to_curr.Currency_Code=t.Currency_Code " +
                     "left Join provider_table pt on b.Mobile_provider=pt.Provider_Id " +
                     "where t.Client_ID=" + obj.Client_ID + " and t.Transaction_ID='" + obj.Transaction_ID + "' order by dd.SenderID_ID desc limit 1";
                                    cmd_select = new MySqlCommand(Queryt);
                                    DataTable dtgccapi = db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                                    string bname = Convert.ToString(dtgccapi.Rows[0]["Beneficiary_Name"]); string bfname = bname; string blname = ".";
                                    if (bname.Contains(" "))
                                    {
                                        string[] spli = bname.Split(' ');
                                        if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; } //if (spli.Length > 1) { bfname = spli[0]; blname = spli[1]; }
                                    }
                                    string ph_no = "";
                                    if (dtgccapi.Rows[0]["Mobile_Number"].ToString() != "")
                                    {
                                        ph_no = dtgccapi.Rows[0]["Mobile_Number"].ToString();
                                    }
                                    else if (dtgccapi.Rows[0]["Phone_Number"].ToString() != "")
                                    {
                                        ph_no = dtgccapi.Rows[0]["Phone_Number"].ToString();
                                    }
                                    string Bph_no = "";
                                    if (dtgccapi.Rows[0]["Beneficiary_Mobile"].ToString() != "")
                                    {
                                        Bph_no = dtgccapi.Rows[0]["Beneficiary_Mobile"].ToString();
                                    }

                                    int senderidtype = 1;
                                    if (Convert.ToString(dtgccapi.Rows[0]["ID_Name"]) == "Passport")
                                        senderidtype = 2;
                                    else if (Convert.ToString(dtgccapi.Rows[0]["ID_Name"]) == "Work Permit")
                                        senderidtype = 3;
                                    else if (Convert.ToString(dtgccapi.Rows[0]["ID_Name"]) == "Driving License")
                                        senderidtype = 4;
                                    else if (Convert.ToString(dtgccapi.Rows[0]["ID_Name"]) == "EU Nationality Card")
                                        senderidtype = 7;

                                    // Purpose of Transfer money...
                                    int sendTransferPurpose = 1;
                                    if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "medical")
                                        sendTransferPurpose = 2;
                                    else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Other purposes" || Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Holiday")
                                        sendTransferPurpose = 3;
                                    else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Education loan repayment")
                                        sendTransferPurpose = 4;
                                    else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "saving")
                                        sendTransferPurpose = 6;
                                    else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Investment")
                                        sendTransferPurpose = 8;
                                    else if (Convert.ToString(dtgccapi.Rows[0]["Purpose_Code"]) == "Other loan repayment")
                                        sendTransferPurpose = 9;

                                    // Get BranchCode 
                                    string branchcodeData = Convert.ToString(obj.APIBranch_Details);
                                    string[] words = branchcodeData.Split('-');
                                    string branchcode = "", branchcodeValue = "", payoutbranchCode = "";
                                    int io = 0;
                                    foreach (var word in words)
                                    {
                                        branchcode = word;
                                        branchcodeValue = branchcode.Substring(0, 5);
                                        break;
                                    }

                                    foreach (var word in words)
                                    {
                                        payoutbranchCode = words[0] + "-" + words[1].Trim();
                                        break; ;
                                    }

                                    string costRate = "";

                                    var client = new RestClient(apiurl);
                                    client.Timeout = -1;
                                    // This request for Get Rates******************                                
                                    var request_ = new RestRequest(Method.POST);
                                    request_.AddHeader("Content-Type", "text/xml; charset=utf-8");
                                    request_.AddHeader("SOAPAction", "http://tempuri.org/ISendAPI/GetExchangeRate");
                                    var body_ = @"<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:tem=""http://tempuri.org/"" xmlns:grem=""http://schemas.datacontract.org/2004/07/GRemitWCFService.Send"">" + "\n" +
                                    @"   <soapenv:Header/>" + "\n" +
                                    @"   <soapenv:Body>" + "\n" +
                                    @"      <tem:GetExchangeRate>" + "\n" +
                                    @"         <!--Optional:-->" + "\n" +
                                    @"         <tem:req>" + "\n" +
                                    @"            <!--Optional:-->" + "\n" +
                                    @"            <grem:Password>" + apipass + "</grem:Password>" + "\n" +
                                    @"            <!--Optional:-->" + "\n" +
                                    @"            <grem:PayoutBranchCode>" + payoutbranchCode + "</grem:PayoutBranchCode>" + "\n" +
                                    @"            <!--Optional:-->" + "\n" +
                                    @"            <grem:SecurityKey>" + accesscode + "</grem:SecurityKey>" + "\n" +
                                    @"            <!--Optional:-->" + "\n" +
                                    @"            <grem:UniqueID>" + apiuser + "</grem:UniqueID>" + "\n" +
                                    @"         </tem:req>" + "\n" +
                                    @"      </tem:GetExchangeRate>" + "\n" +
                                    @"   </soapenv:Body>" + "\n" +
                                    @"</soapenv:Envelope>";
                                    request_.AddParameter("text/xml; charset=utf-8", body_, ParameterType.RequestBody);
                                    IRestResponse response_rate = client.Execute(request_);
                                    //mtsmethods.InsertActivityLogDetails("Get GCC Exchange Rate List request parameter <br/>" + body_ + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                    // mtsmethods.InsertActivityLogDetails("Get GCC Exchange Rate List response parameter <br/>" + response_rate.Content + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);


                                    System.Xml.XmlDocument xmlDoc_ = new System.Xml.XmlDocument();

                                    xmlDoc_.LoadXml(response_rate.Content);
                                    System.Xml.XmlNodeList nodeList_ = xmlDoc_.GetElementsByTagName("GetExchangeRateResult");
                                    foreach (System.Xml.XmlNode node12 in nodeList_)
                                    {
                                        string json2 = Newtonsoft.Json.JsonConvert.SerializeXmlNode(node12);
                                        var obj12 = Newtonsoft.Json.Linq.JObject.Parse(json2);
                                        costRate = Convert.ToString(obj12["GetExchangeRateResult"]["a:CostRate"]);
                                        break;
                                    }
                                    int PaymentDepositType_ID = obj.PaymentDepositType_ID;
                                    string payMethod_type = "";
                                    if (PaymentDepositType_ID == 1)
                                    {
                                        payMethod_type = "Bank";
                                    }
                                    else if (PaymentDepositType_ID == 2)
                                    {
                                        payMethod_type = "Pickup";
                                    }
                                    else if (PaymentDepositType_ID == 3)
                                    {
                                        payMethod_type = "Wallet";
                                    }
                                    client = new RestClient(apiurl);
                                    string Bankdetails = "";

                                    client.Timeout = -1;
                                    var request = new RestRequest(Method.POST);
                                    request.AddHeader("Content-Type", "text/xml; charset=utf-8");
                                    request.AddHeader("SOAPAction", "http://tempuri.org/ISendAPI/SendTransfer");
                                    var body2 = @"<?xml version=""1.0"" encoding=""utf-8""?>" + "\n" +
                                    @"<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:tem=""http://tempuri.org/"" xmlns:grem=""http://schemas.datacontract.org/2004/07/GRemitWCFService.Send"">" + "\n" +
                                    @"   <soapenv:Header/>" + "\n" +
                                    @"" + "\n" +
                                    @"<soapenv:Body>" + "\n" +
                                    @"<tem:SendTransfer>" + "\n" +
                                    @"<tem:req>" + "\n" +

                                    @"<grem:CostRate> " + costRate + " </grem:CostRate>" + "\n" +

                                    @"<grem:IncomeSourceCode>2</grem:IncomeSourceCode>" + "\n" +
                                    @"<grem:OriginCountryCode>" + Convert.ToString(dtgccapi.Rows[0]["sendercountrycode"]) + "</grem:OriginCountryCode>" + "\n" +

                                    @"<grem:Password>" + apipass + "</grem:Password>" + "\n" +

                                    @"<grem:PayinAmount>" + String.Format("{0:0.##}", (Convert.ToDouble(dtgccapi.Rows[0]["AmountInPKR"]) / Convert.ToDouble(costRate))) + "</grem:PayinAmount>" + "\n" +
                                    @"<grem:PayoutAmount>" + Convert.ToString(dtgccapi.Rows[0]["AmountInPKR"]) + "</grem:PayoutAmount>" + "\n" +
                                    @"<grem:PayoutBranchCode>" + payoutbranchCode + "</grem:PayoutBranchCode>" + "\n" +
                                    @"<grem:PayoutCurrencyCode>" + Convert.ToString(dtgccapi.Rows[0]["Currency_Code"]) + "</grem:PayoutCurrencyCode>" + "\n" +
                                    @"<grem:PurposeCode>" + sendTransferPurpose + "</grem:PurposeCode>" + "\n" +

                                    @"<grem:ReceiverAddress> " + Convert.ToString(dtgccapi.Rows[0]["Beneficiary_Address"]) + "</grem:ReceiverAddress>" + "\n" +
                                    @"<grem:ReceiverDOB>" + Convert.ToString(dtgccapi.Rows[0]["benef_DOB_ymd"]) + "</grem:ReceiverDOB>" + "\n" +
                                    @"<grem:ReceiverFirstName>" + bfname + "</grem:ReceiverFirstName>" + "\n" +
                                    @"<grem:ReceiverFourthName></grem:ReceiverFourthName>" + "\n" +
                                    @"<grem:ReceiverLastName>" + blname + "</grem:ReceiverLastName>" + "\n" +
                                    @"<grem:ReceiverMessage></grem:ReceiverMessage>" + "\n" +
                                    @"<grem:ReceiverMiddleName></grem:ReceiverMiddleName>" + "\n" +
                                    @"<grem:ReceiverMobileNo>" + Bph_no + "</grem:ReceiverMobileNo>" + "\n" +
                                    @"<grem:ReceiverNationality>" + Convert.ToString(dtgccapi.Rows[0]["benf_ISO_Code"]) + "</grem:ReceiverNationality>" + "\n" +
                                    @"<grem:ReceiverRelationship>" + Convert.ToString(dtgccapi.Rows[0]["Relation"]) + "</grem:ReceiverRelationship>" + "\n" +
                                    @"<grem:ReceiverTelephoneNo></grem:ReceiverTelephoneNo>" + "\n" +
                                    @"<grem:ReceiverZipCode></grem:ReceiverZipCode>" + "\n" +

                                    @"<grem:ReferenceNo>" + Convert.ToString(dtgccapi.Rows[0]["ReferenceNo"]) + "</grem:ReferenceNo>" + "\n" +
                                    @"<grem:SecurityKey>" + accesscode + "</grem:SecurityKey>" + "\n" +
                                    @"<grem:SenderAddress>" + Convert.ToString(dtgccapi.Rows[0]["sender_address"]) + "</grem:SenderAddress>" + "\n" +
                                    @"<grem:SenderDOB>" + Convert.ToString(dtgccapi.Rows[0]["Sender_DateOfBirth"]) + "</grem:SenderDOB>" + "\n" +
                                    @"<grem:SenderEmail>" + Convert.ToString(dtgccapi.Rows[0]["Email_ID"]) + "</grem:SenderEmail>" + "\n" +
                                    @"<grem:SenderFirstName>" + Convert.ToString(dtgccapi.Rows[0]["First_Name"]) + "</grem:SenderFirstName>" + "\n" +
                                    @"<grem:SenderFourthName></grem:SenderFourthName>" + "\n" +
                                    @"<grem:SenderIDExpiryDate>" + Convert.ToString(dtgccapi.Rows[0]["SenderID_ExpiryDate"]) + "</grem:SenderIDExpiryDate>" + "\n" +
                                    @"<grem:SenderIDNumber>" + Convert.ToString(dtgccapi.Rows[0]["SenderId_Number"]) + "</grem:SenderIDNumber>" + "\n" +
                                    @"<grem:SenderIDPlaceOfIssue>" + Convert.ToString(dtgccapi.Rows[0]["ISO_Code"]) + "</grem:SenderIDPlaceOfIssue>" + "\n" +
                                    @"<grem:SenderIDType>" + senderidtype + "</grem:SenderIDType>" + "\n" +
                                    @"<grem:SenderLastName>" + Convert.ToString(dtgccapi.Rows[0]["Last_Name"]) + "</grem:SenderLastName>" + "\n" +
                                    @"<grem:SenderMiddleName>" + Convert.ToString(dtgccapi.Rows[0]["Middle_Name"]) + "</grem:SenderMiddleName>" + "\n" +
                                    @"<grem:SenderMobileNo>" + ph_no + "</grem:SenderMobileNo>" + "\n" +
                                    @"<grem:SenderNationality>" + Convert.ToString(dtgccapi.Rows[0]["ISO_Code"]) + "</grem:SenderNationality>" + "\n" +
                                    @"<grem:SenderTelephoneNo>" + ph_no + "</grem:SenderTelephoneNo>" + "\n" +
                                    @"<grem:SenderZipCode>" + Convert.ToString(dtgccapi.Rows[0]["Post_Code"]) + "</grem:SenderZipCode>" + "\n" +

                                    @"<grem:TransactionNo></grem:TransactionNo>" + "\n" +
                                    @"<grem:UniqueID>" + apiuser + "</grem:UniqueID>" + "\n" +
                                    @"</tem:req>" + "\n" +
                                    @"</tem:SendTransfer>" + "\n" +
                                    @"</soapenv:Body>" + "\n" +
                                    @"  " + "\n" +
                                    @"</soapenv:Envelope>" + "\n" +
                                    @"";
                                    request.AddParameter("text/xml; charset=utf-8", body2, ParameterType.RequestBody);
                                    //mtsmethods.InsertActivityLogDetails("Confirm gcc remittance All parameter send transfer request: <br/>" + body2 + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                    IRestResponse response = client.Execute(request);
                                    System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();

                                    xmlDoc.LoadXml(response.Content);
                                    System.Xml.XmlNodeList nodeList = xmlDoc.GetElementsByTagName("SendTransferResult");

                                    CompanyInfo.InsertActivityLogDetails("App- Confirm GCC remittance all parameter send transfer request parameter: <br/>" + body2 + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money",context);
                                    CompanyInfo.InsertActivityLogDetails("App- Confirm GCC send transfer responce parameter : <br/>" + response.Content + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                    //mtsmethods.InsertActivityLogDetails("Confirm gcc send transfer responce : <br/>" + response.Content + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                    string responseCode = "", messageResponse = "";
                                    foreach (System.Xml.XmlNode node1 in nodeList)
                                    {
                                        string json = Newtonsoft.Json.JsonConvert.SerializeXmlNode(node1);
                                        //mtsmethods.InsertActivityLogDetails("Confirm gcc remittance response parameters: <br/>" + json + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                        var obj1 = Newtonsoft.Json.Linq.JObject.Parse(json);
                                        messageResponse = Convert.ToString(obj1["SendTransferResult"]["a:ResponseMessage"]);
                                        responseCode = Convert.ToString(obj1["SendTransferResult"]["a:ResponseCode"]);
                                        resultTransactionNum = Convert.ToString(obj1["SendTransferResult"]["a:TransactionNo"]);
                                        dt.Rows[0]["gcc_pinnumber"] = resultTransactionNum;
                                    }

                                    if (responseCode == "001")
                                    {
                                        string Query = " Update transaction_mapping_table set APITransaction_ID='" + resultTransactionNum + "'  where Transaction_ID =" + obj.Transaction_ID + " and Client_ID=" + obj.Client_ID + " ";
                                        cmd_select = new MySqlCommand(Query);
                                        db_connection.ExecuteQueryDataTableProcedure(cmd_select);
                                    }
                                    else
                                    {
                                        dt.Rows[0]["gcc_pinnumber"] = "";
                                    }

                                }
                                catch (Exception ex)
                                {
                                    dt.Rows[0]["gcc_pinnumber"] = "";
                                    CompanyInfo.InsertActivityLogDetails("App- Confirm GCC send transfer   parameter error: <br/>" + ex.ToString() + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                    //CompanyInfo.InsertActivityLogDetails("Add remittance Error response parameters: <br/>" + ex.ToString() + "", t.User_ID, t.Transaction_ID, t.User_ID, t.Customer_ID, "Proceed Transaction", t.CB_ID, t.Client_ID);
                                }

                            }

                        }
                        else if (obj.BranchListAPI_ID == 18)
                        {
                            int api_id = 0; string apibankname = "", apiurl = "", apiuser = "", apipass = "", accesscode = "", apicompany_id = "",
                               api_fields = "", webAccountNumber = "", debtAcct = "";
                            CompanyInfo.InsertActivityLogDetails("App- Confirm Crosspay   request start: <br/>" + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", context);

                            MySqlCommand cmd_select = new MySqlCommand("select a.ID,a.Bank_Name,a.api_Fields,cast(AES_DECRYPT(UNHEX(API_URL), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as API_URL,cast(AES_DECRYPT(UNHEX(APIUser_ID), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as APIUser_ID,cast(AES_DECRYPT(UNHEX(APIAccess_Code),'" + CompanyInfo.SecurityKey() + "') as  char(500)) as APIAccess_Code,APICompany_ID,cast(AES_DECRYPT(UNHEX(Password), '" + CompanyInfo.SecurityKey() + "') as  char(500)) as Password from api_master a where ID = " + obj.BranchListAPI_ID); //api_id);
ySqlCommand cmd_select = new MySqlCommand("select * from api_master where ID = " + obj.BranchListAPI_ID);
                            DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                            if (dtt.Rows.Count > 0)
                            {
                                api_id = Convert.ToInt32(dtt.Rows[0]["ID"]);
                                apibankname = Convert.ToString(dtt.Rows[0]["Bank_Name"]);
                                apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                                apiuser = Convert.ToString(dtt.Rows[0]["APIUser_ID"]);
                                apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                                accesscode = Convert.ToString(dtt.Rows[0]["APIAccess_Code"]);
                                apicompany_id = Convert.ToString(dtt.Rows[0]["APICompany_ID"]);
                                api_fields = Convert.ToString(dtt.Rows[0]["api_Fields"]);
                                if (api_fields != "" && api_fields != null)
                                {
                                    Newtonsoft.Json.Linq.JObject objf = Newtonsoft.Json.Linq.JObject.Parse(api_fields);
                                    webAccountNumber = Convert.ToString(objf["webAccountNumber"]);
                                    debtAcct = Convert.ToString(objf["debtAcct"]);
                                }
                            }
                            if (api_id == 18)
                            {   // While Submit the transaction create Pin number incomplete transaction 
                                string proceed_method = " Submit transaction proceed while incomplete transaction APP ";
                                #region Crosspay_single_transfer
                                try
                                {
                                    string Queryt = "select  Beneficiary_PostCode, ci.City_Name as Beneficiary_City,IFNULL(cm1.nationality, '') AS sendernationality,Street as sender_street,Middle_Name ,House_Number as sender_house_number,ifnull(date_format(dd.SenderID_ExpiryDate,'%Y-%m-%d'),'') as SenderID_ExpiryDateymd,ifnull(date_format(b.DateOf_Birth,'%Y-%m-%d'),'') as benef_DOB_ymd,ifnull(date_format(dd1.SenderID_ExpiryDate,'%Y-%m-%d'),'') as benef_ExpiryDate_ymd,ifnull(date_format(c.DateOf_Birth,'%Y-%m-%d'),'') as Sender_DOB_ymd,rm.Relation,t.Comment,tm.APITransaction_ID,ifnull(date_format(dd.SenderID_ExpiryDate,'%d/%m/%Y'),'') as SenderID_ExpiryDatedmy,ifnull(date_format(dd.Issue_Date,'%d/%m/%Y'),'') as Issue_Datedmy,Beneficiary_Name, pt.Provider_name,bm.BankCode,from_curr.ISO_Code_Numeric as from_curr_ISO_code,to_curr.ISO_Code_Numeric as to_curr_ISO_code,cm.RDA_code,ifnull((t.Record_Insert_DateTime),'') as transaction_date_time,cm2.ISO_Code as benf_ISO_Code,tb.Iban_ID,abc.bank_code,abc.bank_name as abc_bank_name,ifnull(cait.Customer_API_ID,0) as Customer_API_ID,PaymentType_ID,Email_ID,ifnull(tm.Transaction_ID,0) as TransMap_ID,WireTransfer_ReferanceNo,Purpose,ReferenceNo,AmountInGBP,AmountInPKR,Exchange_Rate,Transfer_Fees,c.*,b.*, concat(First_Name,' ',ifnull(Middle_Name,''),' ',Last_Name) as Customer_Name, ci.City_Name as Beneficiary_City, cm2.Country_Name as Beneficiary_Country, " +
                  "Beneficiary_Mobile,Email_ID,IFNULL(cm1.Country_Name, '') AS Nationality_Country    ,Phone_Number,Mobile_Number,REPLACE(REPLACE( Concat(House_Number,' ',Street,' ',Post_Code), '\r', ''), '\n', '') as sender_address,Post_Code,jj.City_Name,cm.Country_Name, cm.ISO_Code,cm2.ISO_Code as BISO_Code,cm.Country_Code, cm2.Country_Code as BCountry_Code, cm.ISO_Code_Three, cm.ISO_Code_Three as NISO_Code_Three, cm2.ISO_Code_Three as BISO_Code_Three, " +
                  "ifnull(date_format(dd.SenderID_ExpiryDate,'%m/%d/%Y'),'') as SenderID_ExpiryDate,ifnull(date_format(c.DateOf_Birth,'%d/%m/%Y'),'') as Sender_DOB,ifnull(date_format(c.DateOf_Birth,'%m/%d/%Y'),'') as Sender_DateOfBirth,dd.SenderID_Number,ifnull(date_format(dd.Issue_Date,'%m/%d/%Y'),'') as Issue_Date, id.ID_Name, FromCurrency_Code,t.Currency_Code " +
                  ",dd1.SenderID_Number as BID_Number,bm.Bank_Name,tb.AccountHolderName, tb.Account_Number,tb.Ifsc_Code,tb.BranchCode,tb.Branch,PaymentDepositType_ID,rat.Relation_Code, pmt.Purpose_Code, idm.IDName_Code, idmt.Benf_IDName_Code as BIDName_Code, t.Deliverytype_Id, prm.Profession," +
                  "bbdt.Branch,ifnull(date_format(t.Record_Insert_DateTime,'%d/%m/%Y'),'') as transaction_date ,ifnull(date_format(t.Record_Insert_DateTime,'%T'),'') as transaction_time " +
                  " From Transaction_Table t inner join Customer_Registration c on t.Customer_ID=c.Customer_ID inner join Beneficiary_Master b on c.Customer_ID=b.Customer_ID and t.Beneficiary_ID=b.Beneficiary_ID left join transwise_benfbankdetails tb on t.Transaction_ID=tb.Transaction_ID left join bank_master bm on bm.Bank_ID=tb.BBank_ID " +
                  "left join Country_Master cm on c.Country_ID=cm.Country_ID left join Country_Master cm1 on c.Nationality_ID=cm1.Country_ID AND cm1.Client_ID = c.Client_ID left join Country_Master cm2 on b.Beneficiary_Country_ID=cm2.Country_ID " +
                  "left join city_master jj on c.city_id=jj.City_ID left join city_master ci on ci.City_ID=b.Beneficiary_City_ID " +
                  "left join documents_details dd on c.Customer_ID=dd.Customer_ID and dd.documents_details_id=1 AND (dd.Beneficiary_ID IS NULL OR dd.Beneficiary_ID <= 0) left join IDName_Master id on dd.IDName_ID=id.IDName_ID left join idnames_api_mapping_table idm on id.IDName_ID=idm.IDName_ID and idm.API_ID=" + api_id + " " +
                  "left join documents_details dd1 on t.Beneficiary_ID=dd1.Beneficiary_ID and dd1.documents_details_id=1 left join idnames_api_mapping_table idmt on dd1.IDName_ID=idmt.IDName_ID and idmt.API_ID=" + api_id + " " +
                  "left join relation_master rm on b.Relation_ID=rm.Relation_ID left join relation_api_table rat on rm.Relation_ID=rat.Relation_ID and rat.API_ID=" + api_id + " " +
                  "left join purpose_master pm on t.Purpose_ID=pm.Purpose_ID left join purpose_mapping_table pmt on pm.Purpose_ID=pmt.Purpose_ID and pmt.API_ID=" + api_id + " left join transaction_mapping_table tm on tm.Transaction_ID=t.Transaction_ID " +
                  "left join profession_master prm on c.Profession_ID=prm.ID " +
                  "left join beneficiarybankdetails_table bbdt on bbdt.Beneficiary_ID=b.Beneficiary_ID " +
                  "left join api_bank_codes abc on abc.bank_id=tb.BBank_ID and abc.API_ID=" + api_id + " " +
                  "left join customer_api_id_table cait on (cait.Customer_ID=c.Customer_ID and cait.api_id=" + api_id + ") " +
                  "left JOIN Currency_master from_curr ON from_curr.Currency_Code=t.FromCurrency_Code " +
                  "left JOIN Currency_master to_curr ON to_curr.Currency_Code=t.Currency_Code " +
                  "left Join provider_table pt on b.Mobile_provider=pt.Provider_Id " +
                  "where t.Client_ID=" + obj.Client_ID + " and t.Transaction_ID='" + obj.Transaction_ID + "' order by dd.SenderID_ID desc limit 1";
                                    CompanyInfo.InsertActivityLogDetails("App- Confirm Crosspay   request Queryt : <br/>" + Queryt + "", obj.User_ID, 0, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                    cmd_select = new MySqlCommand(Queryt);
                                    DataTable dt_crosspay = db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                                    string bname = Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_Name"]); string bfname = bname; string blname = ".";
                                    CompanyInfo.InsertActivityLogDetails("App- Confirm Crosspay   request beneficiary : <br/>" + bname + "", obj.User_ID, 0, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money",context);
                                    if (bname.Contains(" "))
                                    {
                                        string[] spli = bname.Split(' ');
                                        if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; }
                                    }
                                    string ph_no = "";
                                    if (dt_crosspay.Rows[0]["Mobile_Number"].ToString() != "")
                                    {
                                        ph_no = "\"" + "+" + dt_crosspay.Rows[0]["Country_Code"].ToString() + "-" + (dt_crosspay.Rows[0]["Mobile_Number"].ToString()).Substring(dt_crosspay.Rows[0]["Country_Code"].ToString().Length) + "\"";
                                    }
                                    else if (dt_crosspay.Rows[0]["Phone_Number"].ToString() != "")
                                    {
                                        ph_no = "\"" + "+" + dt_crosspay.Rows[0]["Country_Code"].ToString() + "-" + (dt_crosspay.Rows[0]["Phone_Number"].ToString()).Substring(dt_crosspay.Rows[0]["Country_Code"].ToString().Length) + "\"";
                                    }
                                    string Bph_no = "";
                                    if (dt_crosspay.Rows[0]["Beneficiary_Mobile"].ToString() != "")
                                    {
                                        Bph_no = "\"" + "+" + dt_crosspay.Rows[0]["BCountry_Code"].ToString() + "-" + (dt_crosspay.Rows[0]["Beneficiary_Mobile"].ToString()).Substring(dt_crosspay.Rows[0]["BCountry_Code"].ToString().Length) + "\"";
                                    }


                                    var client = new RestClient(apiurl + "transaction/create");
                                    client.Timeout = -1;
                                    string origin = "";
                                    string api_fieldsVal = Convert.ToString(dtt.Rows[0]["api_Fields"]);
                                    if (api_fieldsVal != "" && api_fieldsVal != null)
                                    {
                                        Newtonsoft.Json.Linq.JObject objcross = Newtonsoft.Json.Linq.JObject.Parse(api_fieldsVal);
                                        origin = Convert.ToString(objcross["origin"]);
                                    }
                                    var request = new RestRequest(Method.POST);
                                    request.AddHeader("X-API-KEY", accesscode);
                                    request.AddHeader("Origin", origin);

                                    string fromCurrencyCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["FromCurrency_Code"]).Trim() + "\"";
                                    string recevingCurrencyCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Currency_Code"]).Trim() + "\"";
                                    string tpTransactionReferenceNumber = "\"" + Convert.ToString(dt_crosspay.Rows[0]["ReferenceNo"]).Trim() + "\"";
                                    string senderCountryCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["ISO_Code"]).Trim() + "\"";
                                    string receiverCountryCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["benf_ISO_Code"]).Trim() + "\"";
                                    string purposeMoneyTransfer = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() + "\"";

                                    if (string.IsNullOrEmpty(Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim()))
                                    {
                                        purposeMoneyTransfer = "\"" + "Family or Friend Support" + "\"";
                                    }
                                    else
                                    {
                                        if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Family support")
                                        {
                                            purposeMoneyTransfer = "\"" + "Family or Friend Support" + "\"";
                                        }
                                        else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Occasional gift" || Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Holiday")
                                        {
                                            purposeMoneyTransfer = "\"" + "Gift/Donation" + "\"";
                                        }
                                        else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "medical")
                                        {
                                            purposeMoneyTransfer = "\"" + "Medical Expenses" + "\"";
                                        }
                                        else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Other purposes" || Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Other loan repayment")
                                        {
                                            purposeMoneyTransfer = "\"" + "Family or Friend Support" + "\"";
                                        }
                                        else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "saving" || Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Investment")
                                        {
                                            purposeMoneyTransfer = "\"" + "Investment in Real Estate" + "\"";
                                        }
                                        else if (Convert.ToString(dt_crosspay.Rows[0]["Purpose_Code"]).Trim() == "Education loan repayment")
                                        {
                                            purposeMoneyTransfer = "\"" + "Education Fees" + "\"";
                                        }
                                        else
                                        {
                                            purposeMoneyTransfer = "\"" + "Family or Friend Support" + "\"";
                                        }
                                    }

                                    string receiverAddress1 = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_Address"]).Trim() + "\"";
                                    string senderContactEmail = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Email_ID"]).Trim() + "\"";
                                    bfname = "\"" + bfname + "\"";
                                    blname = "\"" + blname + "\"";
                                    string senderFirstName = "\"" + Convert.ToString(dt_crosspay.Rows[0]["First_Name"]).Trim() + "\"";
                                    string senderLastName = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Last_Name"]).Trim() + "\"";
                                    string Profession = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim() + "\"";

                                    if (Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim() == "Accountants" || Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim() == "Actors" || Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim() == "Actors"
                                        || Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim().Contains("Teachers") || Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim().Contains("Advertis"))
                                    {
                                        Profession = "\"" + "Salary" + "\"";
                                    }
                                    else if (Convert.ToString(dt_crosspay.Rows[0]["Profession"]).Trim().Contains("Business"))
                                    {
                                        Profession = "\"" + "Business/Trade" + "\"";
                                    }
                                    else
                                    {
                                        Profession = "\"" + "Other" + "\"";
                                    }


                                    string senderDateOfBirth = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Sender_DOB_ymd"]).Trim() + "\"";
                                    string benef_DOB_ymd = "\"" + Convert.ToString(dt_crosspay.Rows[0]["benef_DOB_ymd"]).Trim() + "\"";
                                    string receiverAccountNumber = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Account_Number"]).Trim() + "\"";
                                    if (!string.IsNullOrEmpty(Convert.ToString(dt_crosspay.Rows[0]["Iban_ID"]).Trim()))
                                    {
                                        receiverAccountNumber = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Iban_ID"]).Trim() + "\"";
                                    }

                                    string receivingAmount = "\"" + Convert.ToDouble(dt_crosspay.Rows[0]["AmountInPKR"]) + "\"";

                                    string senderIDType = "";

                                    if (Convert.ToString(dt_crosspay.Rows[0]["ID_Name"]).Trim() == "Passport")
                                        senderIDType = "\"" + "Passport" + "\"";
                                    else if (Convert.ToString(dt_crosspay.Rows[0]["ID_Name"]).Trim() == "Driving License" || Convert.ToString(dt_crosspay.Rows[0]["ID_Name"]).Trim() == "UK Driving License")
                                        senderIDType = "\"" + "Driving License" + "\"";
                                    else
                                        senderIDType = "\"" + "Passport" + "\"";


                                    string sortCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Ifsc_Code"]).Trim() + "\"";
                                    string ifscCodeNumber = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Ifsc_Code"]).Trim() + "\"";
                                    string sender_address = "\"" + Convert.ToString(dt_crosspay.Rows[0]["sender_address"]).Trim() + "\"";
                                    string Country_Name = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Country_Name"]).Trim() + "\"";

                                    string Nationality_Country = "\"" + Convert.ToString(dt_crosspay.Rows[0]["sendernationality"]).Trim() + "\"";

                                    if (!string.IsNullOrEmpty(Convert.ToString(dt_crosspay.Rows[0]["sendernationality"]).Trim()))
                                    {
                                        Nationality_Country = Convert.ToString(dt_crosspay.Rows[0]["sendernationality"]).Trim();
                                        Nationality_Country = "\"" + Nationality_Country + "\"";
                                    }

                                    string SenderID_Number = "\"" + Convert.ToString(dt_crosspay.Rows[0]["SenderID_Number"]).Trim() + "\"";
                                    string senderMiddleName = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Middle_Name"]).Trim() + "\"";
                                    string payinDate = "\"" + Convert.ToString(dt_crosspay.Rows[0]["transaction_date_time"]).Trim() + "\"";
                                    string gender = "\"" + "Others" + "\"";
                                    string senderEntityName = "\"" + "" + "\"";
                                    string senderType = "\"" + "I" + "\"";
                                    string receiverType = "\"" + "I" + "\"";

                                    string sender_street = "\"" + Convert.ToString(dt_crosspay.Rows[0]["sender_street"]).Trim() + "\"";
                                    string senderCity_Name = "\"" + Convert.ToString(dt_crosspay.Rows[0]["City_Name"]).Trim() + "\"";
                                    string senderPinCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Post_Code"]).Trim() + "\"";
                                    int PaymentDepositType_ID = obj.PaymentDepositType_ID;
                                    string serviceType = "\"" + "AC" + "\"";
                                    string transactionType = "AC";
                                    if (PaymentDepositType_ID == 2)
                                    {
                                        serviceType = "\"" + "CP" + "\""; // CASH
                                        transactionType = "CP";
                                    }
                                    if (PaymentDepositType_ID == 3)
                                    {
                                        serviceType = "\"" + "MW" + "\""; // Mobile Wallet
                                        transactionType = "MW";
                                    }

                                    string bankTransaction = ""; string walletProviderName = "", cashPickupAgent = "";
                                    string payerIdValue = Convert.ToString(obj.APIBranch_Details);
                                    if (transactionType == "AC")
                                    {

                                        string[] words = payerIdValue.Split('-');
                                        int v = 0; string bankName = "";
                                        foreach (var word in words)
                                        {
                                            if (v == 0)
                                            {
                                                bankName = word.Trim();
                                            }
                                            if (v == 1)
                                            {
                                                sortCode = "\"" + word.Trim() + "\"";
                                                break;
                                            }
                                            v++;
                                        }

                                        bankTransaction = @"  ""receiverAccountNumber"" : " + receiverAccountNumber + "," + "\n" +
                                              @"  ""bankCode"" : " + sortCode + "," + "\n" +
                                              @"  ""branchIdentifier"" : " + ifscCodeNumber + "," + "\n"
                                              ;
                                    }
                                    else if (transactionType == "MW")
                                    {
                                        string[] words = payerIdValue.Split('-');
                                        int v = 0;
                                        foreach (var word in words)
                                        {
                                            if (v == 0)
                                            {
                                                walletProviderName = "\"" + word.Trim() + "\"";
                                                break;
                                            }
                                        }
                                    }
                                    else if (transactionType == "CP")
                                    {
                                        string[] words = payerIdValue.Split('-');
                                        int v = 0;
                                        foreach (var word in words)
                                        {
                                            if (v == 0)
                                            {
                                                cashPickupAgent = "\"" + word.Trim() + "\"";
                                                break;
                                            }
                                        }
                                    }

                                    string receiverEntityName = "\"" + "CROSSPAY" + "\"";
                                    string receiverCity = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_City"]).Trim() + "\"";
                                    string receiverState = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_City"]).Trim() + "\"";
                                    string receiverStreet = "\"" + Convert.ToString(bt.Rows[0]["Beneficiary_Address"]).Trim() + "\"";
                                    string receiverPinCode = "\"" + Convert.ToString(dt_crosspay.Rows[0]["Beneficiary_PostCode"]).Trim() + "\"";
                                    string dateTime1 = "\"" + DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.zzz") + "\"";

                                    request.AddHeader("Content-Type", "application/json");
                                    var body_crosspay = "";
                                    if (transactionType == "CP")
                                    {
                                        body_crosspay = @"{" + "\n" +
                                        @"  ""payinDate"" : " + dateTime1 + "," + "\n" +
                                        @"  ""tpTransactionReferenceNumber"" : " + tpTransactionReferenceNumber + "," + "\n" +
                                        @"  ""senderEntityName"" : " + senderEntityName + "," + "\n" +
                                        @"  ""senderType"": " + senderType + "," + "\n" +
                                        @"  ""senderFirstName"": " + senderFirstName + "," + "\n" +
                                        @"  ""senderMiddleName"": " + senderMiddleName + "," + "\n" +
                                        @"  ""senderLastName"": " + senderLastName + "," + "\n" +
                                        @"  ""senderAddress1"": " + sender_address + "," + "\n" +
                                        @"  ""senderAddress2"": " + Country_Name + "," + "\n" +
                                        @"  ""senderContactNumber"": " + ph_no + "," + "\n" +
                                        @"    ""senderPinCode"" : " + senderPinCode + "," + "\n" +
                                        @"    ""senderCity"" : " + senderCity_Name + "," + "\n" +
                                        @"    ""senderState"" : " + sender_street + ", " + "\n" +
                                        @"  ""senderContactEmail"": " + senderContactEmail + "," + "\n" +
                                        @"  ""cashPickupAgentName"": " + cashPickupAgent + "," + "\n" +
                                        @"  ""senderGender"": " + gender + "," + "\n" +
                                        @"  ""senderDateOfBirth"" : " + senderDateOfBirth + "," + "\n" +
                                        @"  ""senderNationality"" : " + Nationality_Country + "," + "\n" +
                                        @"  ""senderCountryCode"": " + senderCountryCode + "," + "\n" +
                                        @"  ""senderIDType"": " + senderIDType + "," + "\n" +
                                        @"  ""senderIDNumber"": " + SenderID_Number + "," + "\n" +
                                        @"  ""fromCurrencyCode"": " + fromCurrencyCode + "," + "\n" +
                                        @"  ""receiverEntityName"" : " + receiverEntityName + "," + "\n" +
                                        @"  ""receiverType"" : " + receiverType + "," + "\n" +
                                        @"  ""receiverFirstName"": " + bfname + "," + "\n" +
                                        @"  ""receiverMiddleName"": """"," + "\n" +
                                        @"  ""receiverLastName"": " + blname + "," + "\n" +
                                        @"  ""receiverAddress1"": " + receiverAddress1 + "," + "\n" +
                                        @"  ""receiverPinCode"" : """"," + "\n" +
                                        @"  ""receiverDateOfBirth"": " + benef_DOB_ymd + "," + "\n" +
                                        @"  ""receiverGender"" : " + gender + "," + "\n" +
                                        @"  ""receiverCountryCode"": " + receiverCountryCode + "," + "\n" +
                                        @"  ""receiverMobileNumber"": " + Bph_no + "," + "\n" +
                                        @"  ""payoutAmount"": " + Convert.ToDouble(dt_crosspay.Rows[0]["AmountInPKR"]) + "," + "\n" +
                                        @"  ""serviceType"" : " + serviceType + "," + "\n" +
                                        @"  ""sourceOfFunds"": " + Profession + "," + "\n" +
                                        @"  ""purposeOfTransfer"": " + purposeMoneyTransfer + "," + "\n" +
                                        @"  ""toCurrencyCode"": " + recevingCurrencyCode + "" + "\n" +
                                        @"}";
                                    }
                                    else if (transactionType == "AC")
                                    {
                                        body_crosspay = @"{" + "\n" +
                                        @"  ""payinDate"" : " + dateTime1 + "," + "\n" +
                                        @"  ""tpTransactionReferenceNumber"" : " + tpTransactionReferenceNumber + "," + "\n" +
                                        @"  ""senderEntityName"" : " + senderEntityName + "," + "\n" +
                                        @"  ""senderType"": " + senderType + "," + "\n" +
                                        @"  ""senderFirstName"": " + senderFirstName + "," + "\n" +
                                        @"  ""senderMiddleName"": " + senderMiddleName + "," + "\n" +
                                        @"  ""senderLastName"": " + senderLastName + "," + "\n" +
                                        @"  ""senderAddress1"": " + sender_address + "," + "\n" +
                                        @"  ""senderAddress2"": " + Country_Name + "," + "\n" +
                                        @"  ""senderContactNumber"": " + ph_no + "," + "\n" +
                                        @"  ""senderContactEmail"": " + senderContactEmail + "," + "\n" +
                                        @"  ""senderGender"": " + gender + "," + "\n" +
                                        @"  ""senderDateOfBirth"" : " + senderDateOfBirth + "," + "\n" +
                                        @"  ""senderNationality"" : " + Nationality_Country + "," + "\n" +
                                        @"  ""senderCountryCode"": " + senderCountryCode + "," + "\n" +
                                        @"  ""senderIDType"": " + senderIDType + "," + "\n" +
                                        @"  ""senderIDNumber"": " + SenderID_Number + "," + "\n" +
                                        @"    ""senderPinCode"" : " + senderPinCode + "," + "\n" +
                                       @"    ""senderCity"" : " + senderCity_Name + "," + "\n" +
                                       @"    ""senderState"" : " + sender_street + ", " + "\n" +
                                        @"  ""fromCurrencyCode"": " + fromCurrencyCode + "," + "\n" +
                                        @"  ""receiverType"" : " + receiverType + "," + "\n" +
                                       @"  ""receiverEntityName"" : " + receiverEntityName + "," + "\n" +
                                        @"  ""receiverFirstName"": " + bfname + "," + "\n" +

                                        @"  ""receiverCity"": " + receiverCity + "," + "\n" +
                                        @"  ""receiverState"": " + receiverState + "," + "\n" +
                                        @"  ""receiverStreet"": " + receiverStreet + "," + "\n" +
                                        @"  ""receiverPinCode"": " + receiverPinCode + "," + "\n" +

                                        @"  ""receiverMiddleName"": """"," + "\n" +
                                        @"  ""receiverLastName"": " + blname + "," + "\n" +
                                        @"  ""receiverAddress1"": " + receiverAddress1 + "," + "\n" +
                                        @"  ""receiverAddress2"": " + receiverAddress1 + "," + "\n" +
                                        @"  ""receiverCountryCode"": " + receiverCountryCode + "," + "\n" +
                                        @"  ""receiverMobileNumber"": " + Bph_no + "," + "\n" +
                                        @"  ""receiverGender"" : " + gender + "," + "\n" +
                                        @"  ""payoutAmount"": " + Convert.ToDouble(dt_crosspay.Rows[0]["AmountInPKR"]) + "," + "\n" +
                                        bankTransaction +
                                        @"  ""serviceType"" : " + serviceType + "," + "\n" +
                                        @"  ""sourceOfFunds"": " + Profession + "," + "\n" +
                                        @"  ""purposeOfTransfer"": " + purposeMoneyTransfer + "," + "\n" +
                                        @"  ""toCurrencyCode"": " + recevingCurrencyCode + "" + "\n" +
                                        @"}";
                                    }
                                    else if (transactionType == "MW")
                                    {
                                        body_crosspay = @"{" + "\n" +
                                        @"  ""payinDate"" : " + dateTime1 + "," + "\n" +
                                        @"  ""tpTransactionReferenceNumber"" : " + tpTransactionReferenceNumber + "," + "\n" +
                                        @"  ""senderEntityName"" : " + senderEntityName + "," + "\n" +
                                        @"  ""senderType"": " + senderType + "," + "\n" +
                                        @"  ""senderFirstName"": " + senderFirstName + "," + "\n" +
                                        @"  ""senderMiddleName"": " + senderMiddleName + "," + "\n" +
                                        @"  ""senderLastName"": " + senderLastName + "," + "\n" +
                                        @"  ""senderAddress1"": " + sender_address + "," + "\n" +
                                        @"  ""senderAddress2"": " + Country_Name + "," + "\n" +
                                        @"  ""senderContactNumber"": " + ph_no + "," + "\n" +
                                        @"    ""senderPinCode"" : " + senderPinCode + "," + "\n" +
                                        @"    ""senderCity"" : " + senderCity_Name + "," + "\n" +
                                        @"  ""senderContactEmail"": " + senderContactEmail + "," + "\n" +
                                        @"    ""senderState"" : " + sender_street + ", " + "\n" +
                                        @"  ""senderGender"": " + gender + "," + "\n" +
                                        @"  ""senderDateOfBirth"" : " + senderDateOfBirth + "," + "\n" +
                                        @"  ""senderNationality"" : " + Nationality_Country + "," + "\n" +
                                        @"  ""senderCountryCode"": " + senderCountryCode + "," + "\n" +
                                        @"  ""senderIDType"": " + senderIDType + "," + "\n" +
                                        @"  ""senderIDNumber"": " + SenderID_Number + "," + "\n" +
                                        @"  ""fromCurrencyCode"": " + fromCurrencyCode + "," + "\n" +
                                        @"  ""receiverType"" : " + receiverType + "," + "\n" +
                                        @"  ""receiverFirstName"": " + bfname + "," + "\n" +
                                        @"  ""receiverMiddleName"": """"," + "\n" +
                                        @"  ""receiverLastName"": " + blname + "," + "\n" +
                                        @"  ""receiverAddress1"": " + receiverAddress1 + "," + "\n" +
                                        @"  ""receiverPinCode"" : """"," + "\n" +
                                        @"  ""receiverDateOfBirth"": " + benef_DOB_ymd + "," + "\n" +
                                        @"  ""receiverGender"" : " + gender + "," + "\n" +
                                        @"  ""receiverCountryCode"": " + receiverCountryCode + "," + "\n" +
                                        @"  ""receiverMobileNumber"": " + Bph_no + "," + "\n" +
                                        @"  ""payoutAmount"": " + Convert.ToDouble(dt_crosspay.Rows[0]["AmountInPKR"]) + "," + "\n" +
                                        @"  ""serviceType"" : " + serviceType + "," + "\n" +
                                        @"  ""receiverEntityName"" : " + receiverEntityName + "," + "\n" +
                                        @"  ""walletProviderName"" : " + walletProviderName + "," + "\n" +
                                        @"  ""sourceOfFunds"": " + Profession + "," + "\n" +
                                        @"  ""purposeOfTransfer"": " + purposeMoneyTransfer + "," + "\n" +
                                        @"  ""toCurrencyCode"": " + recevingCurrencyCode + "" + "\n" +
                                        @"}";
                                    }

                                    request.AddParameter("application/json", body_crosspay, ParameterType.RequestBody);
                                    IRestResponse response = client.Execute(request);
                                    Console.WriteLine(response.Content);

                                    CompanyInfo.InsertActivityLogDetails(proceed_method + "Confirm Crosspay remittance all parameter send transfer request parameter: <br/>" + body_crosspay + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money",context);
                                    CompanyInfo.InsertActivityLogDetails(proceed_method + "Confirm Crosspay send transfer responce parameter : <br/>" + response.Content + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", context);

                                    dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                                    string responseCode = dynJson.code;
                                    string messageResponse = dynJson.message;
                                    string transactionReferenceNumber = "";
                                    if (responseCode == "CP0000")
                                        transactionReferenceNumber = dynJson.transactionReferenceNumber;

                                    if (responseCode == "CP0000")
                                    {
                                        dt.Rows[0]["gcc_pinnumber"] = transactionReferenceNumber;
                                        string Query = " Update transaction_mapping_table set APITransaction_ID='" + transactionReferenceNumber + "'  where Transaction_ID =" + obj.Transaction_ID + " and Client_ID=" + obj.Client_ID + " ";
                                        cmd_select = new MySqlCommand(Query);
                                        db_connection.ExecuteQueryDataTableProcedure(cmd_select);
                                    }
                                    else
                                    {
                                        dt.Rows[0]["gcc_pinnumber"] = "";
                                    }

                                }
                                catch (Exception ex)
                                {
                                    CompanyInfo.InsertActivityLogDetails(proceed_method + " Get Crosspay Proceed Error: <br/>" + ex.ToString() + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                }
                                #endregion
                            }

                        }
                        else if (obj.basecurrency == "EUR")
                        {
                            try
                            {
                                CompanyInfo.InsertActivityLogDetails("App - Balmony Transaction.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                int api_id = 0; string apibankname = "", apiurl = "", apiuser = "", apipass = "", accesscode = "", apicompany_id = "",
                                api_fields = "", webAccountNumber = "", debtAcct = "";
                                string cityName1 = "";
                                string stateName = "";
                                string countryName = "";
                                string state_code = "";
                                string city_code = "";
                                string BcityName1 = "";
                                string BstateName = "";
                                string BcountryName = "";
                                string Bstate_code = "";
                                string Bcity_code = "";
                                string Company_Name = "";
                                string CURL = "";
                                MySqlCommand cmd = new MySqlCommand("Get_APIDetails");
                                cmd.CommandType = CommandType.StoredProcedure;
                                string whereclause = " and a.ID=32";
                                cmd.Parameters.AddWithValue("_whereclause", whereclause);
                                cmd.Parameters.AddWithValue("_security_key", CompanyInfo.SecurityKey());
                                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);

                                if (dtt.Rows.Count > 0)
                                {
                                    api_id = Convert.ToInt32(dtt.Rows[0]["ID"]);
                                    apibankname = Convert.ToString(dtt.Rows[0]["Bank_Name"]);
                                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                                    apiuser = Convert.ToString(dtt.Rows[0]["APIUser_ID"]);
                                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                                    accesscode = Convert.ToString(dtt.Rows[0]["APIAccess_Code"]);
                                    apicompany_id = Convert.ToString(dtt.Rows[0]["APICompany_ID"]);
                                    api_fields = Convert.ToString(dtt.Rows[0]["api_Fields"]);
                                    if (api_fields != "" && api_fields != null)
                                    {
                                        Newtonsoft.Json.Linq.JObject objf = Newtonsoft.Json.Linq.JObject.Parse(api_fields);
                                        webAccountNumber = Convert.ToString(objf["webAccountNumber"]);
                                        debtAcct = Convert.ToString(objf["debtAcct"]);
                                    }
                                }

                                cmd = new MySqlCommand("Get_Cust_details");
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("api_id", api_id);
                                cmd.Parameters.AddWithValue("client_id", obj.Client_ID);
                                cmd.Parameters.AddWithValue("transaction_id", obj.Transaction_ID);
                                DataTable dtc = db_connection.ExecuteQueryDataTableProcedure(cmd);
                                CompanyInfo.InsertActivityLogDetails(dtc.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Customer Data", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                CompanyInfo.InsertActivityLogDetails("After dtc table", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Customer Data", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                string IdType = dtc.Rows[0]["Doc_id_code"].ToString();

                                if (IdType == "")
                                {
                                    IdType = "7";//other
                                }

                                IRestResponse response;
                                dynamic json;
                                string referencenum = Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]);

                                string benefcity = "";
                                string benefid = dtc.Rows[0]["Beneficiary_ID"].ToString();

                                cmd = new MySqlCommand("Get_benef_city");
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("_benefid", benefid);
                                DataTable dtcc = db_connection.ExecuteQueryDataTableProcedure(cmd);

                                benefcity = dtcc.Rows[0]["City_Name"].ToString().ToUpper();


                                DateTime timestamp = DateTime.UtcNow;
                                string endpoint = apiurl + "Incoming";
                                string authorizationToken = CreateAuthorizationToken(timestamp, accesscode, apiuser);

                                ServicePointManager.Expect100Continue = true;
                                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                                           | SecurityProtocolType.Tls11
                                           | SecurityProtocolType.Tls12;
                                       //| SecurityProtocolType.Ssl3;
                                var client = new RestClient(apiurl + "Incoming/RatesAndFeesList");
                                client.Timeout = -1;
                                var request = new RestRequest(Method.POST);
                                request.AddHeader("Authorization", "APIAuth " + authorizationToken);
                                response = client.Execute(request);

                                CompanyInfo.InsertActivityLogDetails(apiurl + "Incoming/RatesAndFeesList", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balmony Request", obj.CB_ID, obj.Client_ID, "Send Money", context);

                                json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                                dynamic results = json["Results"];

                                CompanyInfo.InsertActivityLogDetails(response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", context);

                                string targetCountryCode = dtc.Rows[0]["benf_ISO_Code"].ToString();
                                string targetCurrencyCode = dtc.Rows[0]["Currency_Code"].ToString();
                                int targetPaymenttype = Convert.ToInt32(dtc.Rows[0]["PaymentDepositType_ID"]);
                                List<dynamic> matchingRecords = new List<dynamic>();

                                foreach (var item in results)
                                {
                                    if (item.CountryCode?.Value == targetCountryCode && item.CurrencyCode?.Value == targetCurrencyCode)// && item.PaymentTypeID?.Value == targetPaymenttype
                                    {
                                        matchingRecords.Add(item);
                                        break;
                                    }
                                }

                                foreach (var items in matchingRecords)
                                {
                                    if (items.CountryCode.Value == dtc.Rows[0]["benf_ISO_Code"].ToString() && items.CurrencyCode.Value == dtc.Rows[0]["Currency_Code"].ToString())//&& items.PaymentTypeID.Value == Convert.ToInt32(dt.Rows[0]["PaymentType_ID"])
                                    {

                                        long PayerID = (long)items.PayerID.Value;
                                        int PaymentTypeID = 0; int PaymentDepositType_ID = 0;
                                        if (items.PaymentTypeID.Value == 1)
                                        {
                                            PaymentDepositType_ID = 1;
                                        }
                                        if (items.PaymentTypeID.Value == 3)
                                        {
                                            PaymentDepositType_ID = 2;
                                        }
                                        if (items.PaymentTypeID.Value == null)
                                        {
                                            PaymentDepositType_ID = Convert.ToInt32(dtc.Rows[0]["PaymentDepositType_ID"]);
                                        }

                                        string Sex = "";
                                        if (dtc.Rows[0]["Title_ID"].ToString() == "1")
                                        {
                                            Sex = "M";
                                        }
                                        if (dtc.Rows[0]["Title_ID"].ToString() == "2")
                                        {
                                            Sex = "F";
                                        }
                                        if (dtc.Rows[0]["Title_ID"].ToString() == "3")
                                        {
                                            Sex = "F";
                                        }
                                        if (dtc.Rows[0]["Title_ID"].ToString() == "4")
                                        {
                                            Sex = "F";
                                        }

                                        client = new RestClient(apiurl + "Incoming/PayerNetworkList");
                                        client.Timeout = -1;
                                        request = new RestRequest(Method.POST);
                                        request.AddHeader("Authorization", "APIAuth " + authorizationToken);
                                        request.AddHeader("Content-Type", "application/json");
                                        var body = @"{
                            " + "\n" +
                                        @"        ""PayerID"" : """ + PayerID + @"""
                            " + "\n" +
                                        @"}";

                                        request.AddParameter("application/json", body, ParameterType.RequestBody);
                                        response = client.Execute(request);

                                        CompanyInfo.InsertActivityLogDetails(apiurl + "Incoming/PayerNetworkList" + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balmony Request", obj.CB_ID, obj.Client_ID, "Send Money",context);

                                        json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);

                                        CompanyInfo.InsertActivityLogDetails(response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", context);

                                        dynamic responses = json["Results"];
                                        var reslt = json["Results"];

                                        foreach (var itms in responses)
                                        {
                                            if (itms != null)
                                            {
                                                var currencies = itms["Currencies"];
                                                if (currencies.HasValues)
                                                {
                                                    string currencyCode = currencies[0].ToString();
                                                    string desiredCurrencyCode = dtc.Rows[0]["Currency_Code"].ToString();
                                                    string CountryCode = dtc.Rows[0]["benf_ISO_Code"].ToString();

                                                    if (itms["CountryCode"].ToString() == CountryCode && currencyCode == desiredCurrencyCode)


                                                    {
                                                        string name = dtc.Rows[0]["Beneficiary_Name"].ToString();


                                                        string bname = Convert.ToString(name).Trim(); string bfname = bname; string blname = " ";
                                                        if (bname.Contains(" "))
                                                        {
                                                            string[] spli = bname.Split(' ');
                                                            if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; }
                                                        }


                                                        //string bname = Convert.ToString(items.PayerName.Value).Trim(); string bfname = bname; string blname = " ";
                                                        //if (bname.Contains(" "))
                                                        //{
                                                        //    string[] spli = bname.Split(' ');
                                                        //    if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; }
                                                        //}

                                                        int citycode = 0;
                                                        citycode = Convert.ToInt32(dtc.Rows[0]["City_ID"]);
                                                        string city_name = Convert.ToString(dtc.Rows[0]["City_Name"]).ToUpper();
                                                        string Birthcountrycode = Convert.ToString(dtc.Rows[0]["ISO_Code"]);
                                                        DataTable dtb = CompanyInfo.get(obj.Client_ID, context);
                                                        if (dtb.Rows.Count > 0)
                                                        {
                                                            CURL = Convert.ToString(dtb.Rows[0]["RootURL"]);
                                                            Company_Name = Convert.ToString(dtb.Rows[0]["Company_Name"]);
                                                        }

                                                        string excelFilePath = CURL + "assets/xlfile/World-Countries-States-Cities.xlsx";
                                                        // Provide the city code and birth country code to match
                                                        string cityNameToMatch = city_name; // Example city code
                                                        string birthCountryCodeToMatch = Birthcountrycode; // Example birth country code
                                                        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                                                        // Read the Excel file for sender
                                                        using (ExcelPackage package = new ExcelPackage(new FileInfo(excelFilePath)))
                                                        {
                                                            ExcelWorksheet worksheet = package.Workbook.Worksheets[0]; // Assuming data is in the first sheet

                                                            // Iterate through each row in the Excel sheet
                                                            for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                                                            {
                                                                string cityName = Convert.ToString(worksheet.Cells[row, 6].Value).ToUpper(); // CityCode column
                                                                string countryCode = Convert.ToString(worksheet.Cells[row, 1].Value).ToUpper(); // CountryCode column

                                                                // Check if the city code and country code match the provided values
                                                                if (cityName == cityNameToMatch && countryCode == birthCountryCodeToMatch)
                                                                {
                                                                    // If the condition matches, print or process the data
                                                                    countryName = Convert.ToString(worksheet.Cells[row, 2].Value); // CountryName column
                                                                    stateName = Convert.ToString(worksheet.Cells[row, 4].Value); // StateName column
                                                                    cityName1 = Convert.ToString(worksheet.Cells[row, 6].Value); // CityName column
                                                                    city_code = Convert.ToString(worksheet.Cells[row, 5].Value);
                                                                    state_code = Convert.ToString(worksheet.Cells[row, 3].Value);
                                                                    CompanyInfo.InsertActivityLogDetails("Inside cityname match", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", context);

                                                                }
                                                            }
                                                        }

                                                        // for beneficiery city details


                                                        //string Bcity_name = Convert.ToString(dtc.Rows[0]["City_Name"]).ToUpper();
                                                        string BBirthcountrycode = Convert.ToString(dtc.Rows[0]["benf_ISO_Code"]);
                                                        // Provide the city code and birth country code to match
                                                        string BcityNameToMatch = benefcity; // Example city code
                                                        string BbirthCountryCodeToMatch = BBirthcountrycode; // Example birth country code
                                                        using (ExcelPackage package = new ExcelPackage(new FileInfo(excelFilePath)))
                                                        {
                                                            ExcelWorksheet worksheet = package.Workbook.Worksheets[0]; // Assuming data is in the first sheet

                                                            // Iterate through each row in the Excel sheet
                                                            for (int row = 2; row <= worksheet.Dimension.End.Row; row++)
                                                            {
                                                                string cityName = Convert.ToString(worksheet.Cells[row, 6].Value).ToUpper(); // CityCode column
                                                                string countryCode = Convert.ToString(worksheet.Cells[row, 1].Value).ToUpper(); // CountryCode column

                                                                // Check if the city code and country code match the provided values
                                                                if (cityName == BcityNameToMatch && countryCode == BbirthCountryCodeToMatch)
                                                                {
                                                                    // If the condition matches, print or process the data
                                                                    BcountryName = Convert.ToString(worksheet.Cells[row, 2].Value); // CountryName column
                                                                    BstateName = Convert.ToString(worksheet.Cells[row, 4].Value); // StateName column
                                                                    BcityName1 = Convert.ToString(worksheet.Cells[row, 6].Value); // CityName column
                                                                    Bcity_code = Convert.ToString(worksheet.Cells[row, 5].Value);
                                                                    Bstate_code = Convert.ToString(worksheet.Cells[row, 3].Value);
                                                                    CompanyInfo.InsertActivityLogDetails("Inside bcityname match", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", context);

                                                                }
                                                            }
                                                        }

                                                        CompanyInfo.InsertActivityLogDetails("beging create transaction call", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", context);

                                                        string dobString = dtc.Rows[0]["Sender_DOB"].ToString();

                                                        // Parse the date string into a DateTime object
                                                        DateTime dob;
                                                        if (DateTime.TryParseExact(dobString, "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out dob))
                                                        {
                                                            // Format the DateTime object into ISO 8601 format with time as midnight UTC
                                                            dobString = dob.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ");

                                                            // Display the formatted DOB
                                                            Console.WriteLine($"Formatted DOB: {dobString}");
                                                        }
                                                        else
                                                        {
                                                            Console.WriteLine("Invalid date format.");
                                                        }





                                                        client = new RestClient(apiurl + "Incoming/Create");
                                                        client.Timeout = -1;
                                                        request = new RestRequest(Method.POST);
                                                        request.AddHeader("Accept", "application/json");
                                                        request.AddHeader("Authorization", "APIAuth " + authorizationToken);
                                                        request.AddHeader("Content-Type", "application/json");
                                                        body = @"{
    ""TransferID"": """ + dtc.Rows[0]["ReferenceNo"].ToString() + @""",
    ""Reference"": """ + dtc.Rows[0]["ReferenceNo"].ToString() + @""",
    ""TransferPIN"": """",
    ""TransConfirmation"": null,
    ""TransferReasonID"": 3,
    ""Sender"": {
        ""AgencyReference"": """ + dtc.Rows[0]["WireTransfer_ReferanceNo"].ToString() + @""",
        ""FirstName"": """ + dtc.Rows[0]["First_Name"].ToString() + @""",
        ""MiddleName"": null,
        ""LastName"": """ + dtc.Rows[0]["Last_Name"].ToString() + @""",
        ""SecondLastName"": null,
        ""Address1"": """ + dtc.Rows[0]["sender_address"].ToString() + @""",
        ""CountryCode"": """ + dtc.Rows[0]["ISO_Code"].ToString() + @""",
        
        ""StateName"": """ + stateName + @""",
       
        ""CityName"": """ + cityName1 + @""",
        ""ZipCode"": """ + dtc.Rows[0]["Post_Code"].ToString() + @""",
        ""DOB"": """ + dobString + @""",
        ""PhoneNumber"": """ + dtc.Rows[0]["Mobile_Number"].ToString() + @""",
        ""CellPhoneNumber"": null,
        ""PrimaryPhoneNumber"": null,
        ""PhoneNumberCountryCode"": null,
        ""Email"": """ + dtc.Rows[0]["Email_ID"].ToString() + @""",
        ""Sex"": """ + Sex + @""",
        ""BirthCityName"": null,
        ""BirthCountryCode"": """ + Birthcountrycode + @""",
        ""CitizenshipCountryCode"": """ + dtc.Rows[0]["Nationality_Code"].ToString() + @""",
        ""ProfessionID"": 70,
        ""PEPTypeID"": 2,
        ""SenderTypeID"": 1,
        ""Documents"": [],
        ""IDs"": [
            {
                ""IDIssuedDate"": """ + dtc.Rows[0]["Issue_Datedmy"].ToString() + @""",
                ""IDExpirationDate"": """ + dtc.Rows[0]["SenderID_ExpiryDateymd"].ToString() + @""",
                ""IssuedCountryCode"": """ + Birthcountrycode + @""",
                ""Authority"": null,
                ""IDCopy"": true,
                ""IDType"": """ + IdType + @""",
                ""IDNo"": """ + dtc.Rows[0]["SenderID_Number"].ToString() + @"""
            }
        ]
    },
    ""Beneficiary"": {
        ""AgencyReference"": """",
        ""FirstName"": """ + bfname + @""",
        ""MiddleName"": null,
        ""LastName"": """ + blname + @""",
        ""SecondLastName"": null,
        ""Address1"": """ + dtc.Rows[0]["Beneficiary_Address1"].ToString() + @""",
        ""CountryCode"": """ + itms.CountryCode.Value + @""",
        
        ""CityName"": """ + BcityName1 + @""",
        ""ZipCode"": null,
        ""PhoneNumber"": null,
        ""CellPhoneNumber"": """ + dtc.Rows[0]["Beneficiary_Mobile"].ToString() + @""",
        ""PrimaryPhoneNumber"": null,
        ""Email"": null,
        ""RelationshipToSenderID"": 10,
        ""IDs"": [
            {
                ""IDCopy"": true,
                ""IDType"": """ + IdType + @""",
                ""IDNo"": """ + dtc.Rows[0]["SenderID_Number"].ToString() + @"""
            }
        ]
    },
    ""AmountAndFees"": {
        ""PaymentAmount"": """ + dtc.Rows[0]["AmountInPKR"].ToString() + @""",
        ""OriginalAmount"": """ + dtc.Rows[0]["AmountInGBP"].ToString() + @""",
        ""Rate"": """ + dtc.Rows[0]["Exchange_Rate"].ToString() + @""",
        ""RateID"": 1,
        ""PayerCurrencyCode"": """ + dtc.Rows[0]["FromCurrency_Code"].ToString() + @""",
        ""PaymentCurrencyCode"": """ + dtc.Rows[0]["Currency_Code"].ToString() + @"""
    },
    ""Payment"": {
        ""PayerBranchReference"": """ + itms.PayerBranchID.Value + @""",
        ""PaymentTypeID"": """ + PaymentDepositType_ID + @""",";

                                                        if (itms != null)
                                                        {
                                                            var LocationPoints = itms["LocationPoints"];
                                                            foreach (var LocationPoint in LocationPoints)
                                                            {
                                                                body += @"
        ""LocationCode"": """ + LocationPoint["LocationPointID"].ToString() + @""",";
                                                                break;
                                                            }
                                                        }
                                                        body += @"
    ";

                                                        if (PaymentDepositType_ID == 1)
                                                        {
                                                            body += @"
        ""BankAccount"": {
            ""Code"": """ + dtc.Rows[0]["Iban_ID"].ToString() + @""",
            ""Name"": """ + dtc.Rows[0]["Bank_Name"].ToString() + @""",
            ""BranchCode"": """ + itms.PayerBranchID.Value + @""",
            ""BranchName"": """ + itms.PayerBranchName.Value + @""",
            ""AccountType"": 1,
            ""AccountNo"": """ + dtc.Rows[0]["Account_Number"].ToString() + @"""
        },
   ";
                                                        }

                                                        body += @"    
    ""Notes"": [ null ],
    ""CreationDate"": """ + dtc.Rows[0]["transaction_date"].ToString() + @"""
}";

                                                        request.AddParameter("application/json", body, ParameterType.RequestBody);
                                                        response = client.Execute(request);

                                                        CompanyInfo.InsertActivityLogDetails(apiurl + "Incoming/Create" + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balmony Request", obj.CB_ID, obj.Client_ID, "Send Money", context);

                                                        json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);

                                                        CompanyInfo.InsertActivityLogDetails(response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Response", obj.CB_ID, obj.Client_ID, "Send Money", context);

                                                        string TransactionReference = json.Reference;
                                                        if (json.StatusID == 1)
                                                        {

                                                            string Query = " Update transaction_mapping_table set APITransaction_ID='" + json.TransferPIN + "'  where Transaction_ID =" + obj.Transaction_ID + " and Client_ID=" + obj.Client_ID + " ";
                                                            MySqlCommand cmd_select = new MySqlCommand(Query);
                                                            db_connection.ExecuteQueryDataTableProcedure(cmd_select);

                                                        }
                                                        else
                                                        {


                                                        }


                                                    }
                                                }

                                            }
                                        }
                                    }
                                }

                                dt.Rows.Add(0, "success", Cust_ReferanceNo);
                            }
                            catch (Exception ex)
                            {
                                CompanyInfo.InsertActivityLogDetails(ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Balemoney Error", obj.CB_ID, obj.Client_ID, "Send Money", context);

                            }

                        }

                        else
                        {
                            dt.Rows[0]["gcc_pinnumber"] = "";
                        }
                        #endregion

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        dt.Rows.Add(2, ex.ToString(), Cust_ReferanceNo);
                        //Error Log Handled
                        //Model.ErrorLog objError = new Model.ErrorLog();
                        //objError.User = new Model.User();
                        //objError.Error = "Api : Login --" + ex.ToString();
                        //objError.Date = DateTime.Now;
                        //objError.User_ID = 1;
                        //objError.Client_ID = obj.Client_ID;

                        //Service.srvErrorLog srvError = new Service.srvErrorLog();
                        //srvError.Create(objError);
                        CompanyInfo.InsertErrorLogTracker("InsertTransaction Error:" + ex.ToString(), 0, 0, 0, 0, "InsertTransaction", Convert.ToInt32(obj.Branch_ID), Convert.ToInt32(obj.Client_ID), "", _srvTransactionContext);
                    }
                    finally
                    {
                        try
                        {
                            if (con.State != ConnectionState.Closed)
                                con.Close();
                        }
                        catch { }
                    }

                }
            }
            else
            {
                dt.Rows.Add(3, obj.ReferenceNo, Cust_ReferanceNo, obj.Transaction_ID);
            }

            }
            catch(Exception ex){

            }
            finally
            {
               
            _cmdSession = new MySqlCommand("UpdateTransactionJourney");
            _cmdSession.CommandType = CommandType.StoredProcedure;
            _cmdSession.Parameters.AddWithValue("_Token", token);
            _cmdSession.Parameters.AddWithValue("_SendMoneyToken", DBNull.Value);
            _cmdSession.Parameters.AddWithValue("_RewardToken", DBNull.Value);
            _cmdSession.Parameters.AddWithValue("_SOFdocupload", DBNull.Value);
            _cmdSession.Parameters.AddWithValue("_sendmoneyhashexpire", DBNull.Value);
            _cmdSession.Parameters.AddWithValue("_TransactionStartdate", DBNull.Value);
                if (check_validity == null)
                {
                    _cmdSession.Parameters.AddWithValue("_chk_validity", DBNull.Value);

                }
                else
                {
                    _cmdSession.Parameters.AddWithValue("_chk_validity", DBNull.Value);

                }
                _cmdSession.Parameters.AddWithValue("_flag", 4);
                _cmdSession.Parameters.AddWithValue("_uploadSOF", 1);
                string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmdSession));
            }
             
        return dt;
    }
        public string check_avg_txn(Model.Transaction t, int status, Double base_amt)
        {
            string watchlist_reason = "";
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            try
            {
                DateTime cut_dt = new DateTime();
                DateTime start_dt = new DateTime(), End_dt = new DateTime();
                DateTime from_dt = new DateTime(), to_dt = new DateTime();
                string newstartdate = ""; string newenddate = "";
                Int32 days = 0;
                MySqlCommand cmd11 = new MySqlCommand("check_avg_threshold");
                cmd11.CommandType = CommandType.StoredProcedure;
                if (status == 1)
                {

                    cmd11.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                }
                DataTable dt11 = db_connection.ExecuteQueryDataTableProcedure(cmd11);

                if (dt11.Rows.Count > 0)
                {
                    start_dt = Convert.ToDateTime(dt11.Rows[0]["Start_date"]);
                }
                DateTime dateTime = DateTime.Now;
                dateTime = Convert.ToDateTime(t.Record_Insert_DateTime);
                MySqlCommand cmd1 = new MySqlCommand("Get_Config_master");
                cmd1.CommandType = CommandType.StoredProcedure;
                DataTable dt_config = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                if (dt_config.Rows.Count > 0)
                {
                    days = Convert.ToInt32(dt_config.Rows[0]["Rolling_limit"]);
                }

                DateTime regdate = Convert.ToDateTime(start_dt);
                DateTime dt1 = regdate.Date.AddDays(days);
                if (dateTime.Date > dt1.Date)
                {
                    //Update Date to the Customer Transfer Limit
                    for (DateTime dd = dt1; dd <= dateTime.AddDays(days); dd = dd.AddDays(days))
                    {
                        if (newstartdate == null || newstartdate == "")
                        {
                            if (dd.AddDays(days) >= DateTime.Now)
                            {

                                from_dt = Convert.ToDateTime(newstartdate);
                                to_dt = dd.AddDays(days);
                                newstartdate = dd.ToString("yyyy-MM-dd"); //newenddate = Convert.ToString(dd.AddMonths(month));
                                newenddate = to_dt.ToString("yyyy-MM-dd");
                                MySqlCommand cmd_update = new MySqlCommand("update_avg_threshold");
                                cmd_update.CommandType = CommandType.StoredProcedure;
                                cmd_update.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                cmd_update.Parameters.AddWithValue("_start_dt", newstartdate);
                                cmd_update.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                int i = Convert.ToInt32(db_connection.ExecuteScalarProcedure(cmd_update));
                            }
                        }
                    }
                }
                else
                {
                    newstartdate = regdate.ToString("yyyy-MM-dd");
                    newenddate = dt1.ToString("yyyy-MM-dd");
                }
                MySqlCommand cmd = new MySqlCommand("check_avg_value");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_start_dt", (newstartdate));
                cmd.Parameters.AddWithValue("_end_dt", (newenddate));
                if (status == 1)
                {
                    cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                }
                cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                cmd.Parameters.AddWithValue("_status", status);
                cmd.Parameters.AddWithValue("_whereclause", " and 1=1 ");

                DataTable dt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                if (dt.Rows.Count > 0)
                {
                    if (dt.Rows[0]["avg_value"] != "" && dt.Rows[0]["avg_value"] != null)
                    {
                        double avg_value = Convert.ToDouble(dt.Rows[0]["avg_value"]);
                        double base_amt_new = 0.00;
                        if (status == 1)
                        {
                            base_amt_new = t.AmountInGBP;
                        }

                        double difference = base_amt_new - avg_value;
                        double percentage_difference = (difference / avg_value) * 100;
                        if (percentage_difference >= Convert.ToDouble(dt_config.Rows[0]["Min_avg_value"]) && percentage_difference <= Convert.ToDouble(dt_config.Rows[0]["Max_avg_value"]))
                        {
                            watchlist_reason = "Customer Added to Watchlist as Average transaction value :" + avg_value + " is exceeded with " + percentage_difference + "%";

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Check Average Txn Error : " + ex.ToString(), 0, 0, 0, 0, "Send-Insert Transfer", 0, 0, "Send Money", _srvTransactionContext);
            }
            return watchlist_reason;
        }
        public string GenerateReferenceNo(int Client_ID, int CB_ID)
        {
            string refNo1 = "";
            try
            {
                DataTable dt1 = CompanyInfo.get(Client_ID, _srvTransactionContext);
                MySqlCommand cmd = new MySqlCommand("getTxnRef_InitialChar");
                cmd.CommandType = CommandType.StoredProcedure;
                int size = Convert.ToInt32(dt1.Rows[0]["trn_ref_no_length"].ToString());
                var rng = new Random(Environment.TickCount);
                cmd.Parameters.AddWithValue("_Client_ID", Client_ID);
                cmd.Parameters.AddWithValue("_CB_ID", CB_ID);
                string initialchars = Convert.ToString(db_connection.ExecuteScalarProcedure(cmd));
                var refNo = initialchars + string.Concat(Enumerable.Range(0, size).Select((index) => rng.Next(10).ToString()));
                refNo1 = Convert.ToString(refNo);
                string ReferenceNo = refNo1;
                MySqlCommand cmd1 = new MySqlCommand("CheckDuplicateRefNo");
                cmd1.CommandType = CommandType.StoredProcedure;
                cmd1.Parameters.AddWithValue("_Client_ID", Client_ID);
                cmd1.Parameters.AddWithValue("_ReferenceNo", ReferenceNo);
                DataTable dt = (db_connection.ExecuteQueryDataTableProcedure(cmd1));
                if (dt.Rows.Count > 0)
                {
                    refNo1 = null;
                    GenerateReferenceNo(Client_ID, CB_ID);
                }
                else { }

            }
            catch { }
            return refNo1;
        }
        public void update_to_watchlist(Model.Transaction t, string watchlist_reason)
        {
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            MySqlCommand cmd_chk_field = new MySqlCommand("update_watchlist_flag");
            cmd_chk_field.CommandType = CommandType.StoredProcedure;
            cmd_chk_field.Parameters.AddWithValue("_Customerid", Convert.ToInt32(Customer_ID));
            cmd_chk_field.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            cmd_chk_field.Parameters.AddWithValue("_Branch_ID", t.CB_ID);
            cmd_chk_field.Parameters.AddWithValue("_function_name", "Send_money");
            cmd_chk_field.Parameters.AddWithValue("_reason", watchlist_reason);
            cmd_chk_field.Parameters.AddWithValue("_Multiple_attempt", "0");
            cmd_chk_field.Parameters.AddWithValue("_RecordDate", t.Record_Insert_DateTime);
            int i = Convert.ToInt32(db_connection.ExecuteScalarProcedure(cmd_chk_field));
        }

        public DataTable InsertTemp_new(Model.Transaction obj, HttpContext context)
        {
            _srvTransactionContext = context;
            List<Model.Transaction> _lst = new List<Model.Transaction>();
            string value = context.Session.GetString("chk_validity");
            string Cust_ReferanceNo = "";
            DataTable dt = new DataTable();
            dt.Columns.Add("Status", typeof(int));
            dt.Columns.Add("Refno", typeof(string));
            dt.Columns.Add("CustRefno", typeof(string));
            dt.Columns.Add("redirectUrl", typeof(string)); dt.Columns.Add("apireference", typeof(string));

            using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
            {
                if (con.State != ConnectionState.Open)
                    con.Open();
                //MySqlTransaction transaction;
                //transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
                try
                {
                    int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                    obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID, _srvTransactionContext);

                    //string stringtohash = "myMTSHashingStarts" + obj.Beneficiary_ID + obj.Customer_ID + obj.AmountInGBP + obj.AmountInPKR + obj.Transfer_Fees +
                    //    obj.Exchange_Rate + obj.PaymentDepositType_ID + obj.PType_ID + obj.DeliveryType_Id + "myMTSHashingEnds";
                    //string chkhash = CompanyInfo.GetHash(stringtohash);
                    //chkhash = chkhash + "sendmoneystep2.5passed";//check if send money details step passed
                    //string sendmoneyhash = Convert.ToString(HttpContext.Current.Session["SendMoneyToken"]);
                    //if (sendmoneyhash != chkhash)//sendmoneyhash != null && sendmoneyhash != "" && 
                    //{
                    //    CompanyInfo.InsertActivityLogDetails("App - Invalid Data or Bad Request.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTemp", obj.CB_ID, obj.Client_ID, "Send Money");
                    //    dt.Rows.Add(7, "Invalid Data or Bad Request. Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    //    //return invalid or mismatched request
                    //}
                    //DateTime sendmoneyhashexpire = (DateTime)(HttpContext.Current.Session["sendmoneyhashexpire"]);
                    //if (sendmoneyhash == chkhash && sendmoneyhashexpire < Convert.ToDateTime(obj.Record_Insert_DateTime))// && sendmoneyhashexpire != null
                    //{
                    //    CompanyInfo.InsertActivityLogDetails("App - Transaction Timeout.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTemp", obj.CB_ID, obj.Client_ID, "Send Money");
                    //    dt.Rows.Add(7, "Transaction Timeout. Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    //    //return - link expired
                    //}
                    //string rewardtoken = Convert.ToString(HttpContext.Current.Session["RewardToken"]);
                    //if (obj.Wallet_Perm == 0 && rewardtoken != (obj.Wallet_Amount.ToString("N2") + "" + obj.Transfer_Cost.ToString("N2"))
                    //    || obj.Discount_Perm == 0 && rewardtoken != (obj.Discount_Amount.ToString("N2") + "" + obj.Transfer_Cost.ToString("N2")))
                    //{
                    //    CompanyInfo.InsertActivityLogDetails("App - Invalid Reward Data or Bad Request.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTemp", obj.CB_ID, obj.Client_ID, "Send Money");
                    //    dt.Rows.Add(7, "Invalid Data or Bad Request.  Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    //}

                    #region checklimits
                    DateTime dateTime = Convert.ToDateTime(obj.Record_Insert_DateTime);
                    MySqlCommand _cmdl = new MySqlCommand("GetPermissions");
                    _cmdl.CommandType = CommandType.StoredProcedure;
                    _cmdl.Parameters.AddWithValue("_whereclause", "");
                    _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                    DataTable dttp = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                    //Check Daily Transfer Count perm
                    int chkdailycount = 1;
                    DataRow[] dr = dttp.Select("PID=59");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkdailycount = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    //Check daily limit perm
                    int chkdailylimit = 1;
                    dr = dttp.Select("PID=26");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkdailylimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    DataTable dds = null;
                    if (chkdailylimit == 0 || chkdailycount == 0)
                    {
                        _cmdl = new MySqlCommand("customer_transferamount_minmax");
                        _cmdl.CommandType = CommandType.StoredProcedure;
                        _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        dds = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                    }
                    //Check Daily Transfer Count
                    if (chkdailycount == 0)
                    {
                        if (dds.Rows.Count > 0)
                        {
                            int TotalDailyTransfer_count = Convert.ToInt32(dds.Rows[0]["Daily_Transfer_Count"]);
                            _cmdl = new MySqlCommand("CustTotal_Amount");
                            _cmdl.CommandType = CommandType.StoredProcedure;
                            _cmdl.Parameters.AddWithValue("_From_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                            _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmdl.Parameters.AddWithValue("_To_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                            _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                            _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                            DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                            if ((sd.Rows.Count + 1) > TotalDailyTransfer_count)
                            {
                                string notification_icon = "tranfer-limit-exceeded.jpg";
                                string notification_message = "<span class='cls-admin'>Daily transfer count <strong class='cls-cancel'>reached. Customer is on confirmation page.</strong></span><span class='cls-customer'></span>";
                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                //daily_transfer_count = 1;// count exceeded
                                //daily_transfer_msg = "We are unable to process your transfer request at the moment. Please contact Support Team with your transfer request.";
                                //transaction.Commit();
                                dt.Rows.Add(4, "Your daily transfer count limit reached.", Cust_ReferanceNo, "");
                                return dt;
                            }
                        }
                    }
                    ////Check daily limit 
                    //if (chkdailylimit == 0)
                    //{
                    //    if (dds.Rows.Count > 0)
                    //    {
                    //        double Daily_Transfer_Limit = Convert.ToDouble(dds.Rows[0]["Daily_Transfer_Limit"]);
                    //        //get todays total transaction amount
                    //        DateTime From_Date = dateTime.Date;
                    //        DateTime To_Date = dateTime.Date;
                    //        _cmdl = new MySqlCommand("CustTotal_Amount");
                    //        _cmdl.CommandType = CommandType.StoredProcedure;
                    //        _cmdl.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                    //        _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    //        _cmdl.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                    //        _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                    //        _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                    //        DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);

                    //        double total = 0;
                    //        if (sd.Rows.Count > 0)
                    //        {
                    //            for (int j = 0; j < sd.Rows.Count; j++)
                    //            {
                    //                double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                    //                double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                    //                total = total + AmountInGBP + fees;                                
                    //            }
                    //        }

                    //        if ((total + obj.AmountInGBP) > Daily_Transfer_Limit)
                    //        {
                    //            string notification_icon = "tranfer-limit-exceeded.jpg";
                    //            string notification_message = "<span class='cls-admin'>Daily transfer limit<strong class='cls-cancel'> reached.</strong></span><span class='cls-customer'></span>";
                    //            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0);                                
                    //            transaction.Commit();
                    //            dt.Rows.Add(4, "Your daily Limit is exceeded.", Cust_ReferanceNo, "");
                    //            return dt;
                    //        }
                    //    }
                    //}
                    #endregion checklimits

                    obj.TransactionStatus_ID = 1; obj.TransactionType_ID = 1;
                    obj.Delete_Status = 0;
                    // mark payment status pending if payment type is wire transfer
                    obj.PaymentReceived_ID = 2;
                    obj.PartPay_Flag = 1;
                    if (obj.auth_code == "undefined")
                    {
                        obj.auth_code = "";
                    }
                    obj.ManualRateChangedFlag = 1;
                    if (Convert.ToString(obj.Purpose_ID) == "10")
                    {
                        obj.Other_Purpose = Convert.ToString(obj.Purpose);
                    }
                    else
                    {
                        obj.Other_Purpose = "";
                    }
                    using (MySqlCommand cmd = new MySqlCommand("Insert_TempTransfer", con))
                    {
                        //    Query = "insert into TemporaryTransaction_Table(Customer_ID,Beneficiary_ID,TransactionType_ID,PaymentType_ID,TransactionStatus_ID,
                        //AmountInGBP,Exchange_Rate,AmountInPKR,Purpose_ID,Transfer_Fees,Record_Insert_DateTime,Delete_Status,PaymentDepositType_ID
                        //,paymentReceived_ID,ReferenceNo,User_ID,CB_ID,Country_ID,Currency_Code,Transaction_From_Flag,auth_code,DeliveryType_Id,Actual_ExchangeRate,
                        //ManualRateChangedFlag,RateUpdateReason_ID,MsgToAgent,PartPay_Flag,SourceComment_Flag,SourceComment,Other_Purpose,Client_ID,
                        //HDelivery_Flag,HDelivery_Address,CollectionPoint_ID,FromCurrency_Code,SOFID,PaymentGateway_Flag,Wallet_ID,Wallet_Amount,Discount_ID,Discount_Amount,Transfer_Cost) " +
                        //"values(" + iRepository.Id + "," + iRepository.Beneficiary_ID + "," + iRepository.TransactionType_ID + "," + iRepository.PType_ID + "," + iRepository.TransactionStatus_ID + "," + (iRepository.AmountInBase).ToString("0.00") + "," + iRepository.Rate + "," + (iRepository.AmountInForeign).ToString("0.00") + "," + iRepository.Purpose_ID + "," + (iRepository.Transfer_Fees).ToString("0.00") + ",'" + iRepository.Record_Insert_DateTime + "'," + iRepository.Delete_Status + "," + iRepository.PaymentDepositType_ID + "," + iRepository.paymentReceived_ID + ",'" + iRepository.ReferenceNo + "'" +
                        //"," + iRepository.User_ID + "," + iRepository.CB_ID + "," + iRepository.Country_ID + ",'" + iRepository.Currency_Code + "','" + iRepository.Transaction_From_Flag + "','" + iRepository.auth_code + "'," + iRepository.DeliveryType_ID + "," + iRepository.Actual_ExchangeRate + "," + iRepository.ManualRateChangedFlag + "," + iRepository.RateUpdateReason_ID + ",'" + iRepository.MsgToAgent.Replace("'", "''").Trim() + "'," + iRepository.PartPay_Flag + "," + iRepository.SourceComment_Flag + ",'" + iRepository.SourceComment.Replace("'", "''").Trim() + "','" + iRepository.Other_Purpose.Replace("'", "''") + "'," + iRepository.Client_ID + "," + iRepository.HomeDeliveryflag + ",'" + iRepository.HomeDeliveryAddress.Replace("'", "''").Trim() + "',0,'" + iRepository.BaseCurrency + "'," + iRepository.SourceId + "," + iRepository.PaymentGateway_Flag + "," + iRepository.wallet_id + "," + iRepository.Wallet_Amount + "," + iRepository.Discount_ID + "," + iRepository.Discount_Amount + "," + iRepository.Transfer_Cost + ");select last_insert_id();";

                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        cmd.Parameters.AddWithValue("_Beneficiary_ID", obj.Beneficiary_ID);
                        cmd.Parameters.AddWithValue("_TransactionType_ID", obj.TransactionType_ID);
                        cmd.Parameters.AddWithValue("_PType_ID", obj.PType_ID);
                        cmd.Parameters.AddWithValue("_TransactionStatus_ID", obj.TransactionStatus_ID);
                        cmd.Parameters.AddWithValue("_AmountInBase", obj.AmountInGBP.ToString("0.00"));

                        cmd.Parameters.AddWithValue("_Rate", obj.Exchange_Rate.ToString("0.0000"));
                        cmd.Parameters.AddWithValue("_AmountInForeign", obj.AmountInPKR.ToString("0.00"));

                        cmd.Parameters.AddWithValue("_Purpose_ID", obj.Purpose_ID);
                        cmd.Parameters.AddWithValue("_Transfer_Fees", obj.Transfer_Fees.ToString("0.00"));

                        cmd.Parameters.AddWithValue("_ExtraTransfer_Fees", obj.ExtraTransfer_Fees.ToString("0.00"));
                        cmd.Parameters.AddWithValue("_offer_rate_flag", obj.offer_rate_flag);//vyankatesh

                        cmd.Parameters.AddWithValue("_improved_rate_flag", obj.improved_rate_flag); //vyankatesh 02-09
                        cmd.Parameters.AddWithValue("_Benf_BankDetails_ID", obj.Benf_BankDetails_ID);  //vyankatesh 11-12-24
                        cmd.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                        cmd.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                        cmd.Parameters.AddWithValue("_PaymentDepositType_ID", obj.PaymentDepositType_ID);
                        cmd.Parameters.AddWithValue("_paymentReceived_ID", obj.PaymentReceived_ID);
                        if (obj.PaymentGateway_ID > 0 || obj.PType_ID == 6)
                        {
                            obj.ReferenceNo = GenerateReferenceNo(obj.Client_ID, obj.CB_ID);
                            //obj.PaymentGateway_Flag = obj.PaymentGateway_ID;
                        }
                        if (obj.PaymentGateway_ID > 0 || obj.PType_ID == 8)
                        {
                            obj.ReferenceNo = GenerateReferenceNo(obj.Client_ID, obj.CB_ID);
                            //obj.PaymentGateway_Flag = obj.PaymentGateway_ID;
                        }
                        cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                        cmd.Parameters.AddWithValue("_User_ID", obj.User_ID);
                        cmd.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                        cmd.Parameters.AddWithValue("_Country_ID", obj.Country_ID);
                        cmd.Parameters.AddWithValue("_Currency_Code", obj.Currency_Code);
                        cmd.Parameters.AddWithValue("_Transaction_From_Flag", obj.Transaction_From_Flag);
                        cmd.Parameters.AddWithValue("_auth_code", obj.auth_code);
                        cmd.Parameters.AddWithValue("_DeliveryType_ID", obj.DeliveryType_Id);
                        cmd.Parameters.AddWithValue("_Actual_ExchangeRate", obj.Actual_ExchangeRate);
                        cmd.Parameters.AddWithValue("_ManualRateChangedFlag", obj.ManualRateChangedFlag);
                        cmd.Parameters.AddWithValue("_RateUpdateReason_ID", obj.RateUpdateReason_ID);

                        cmd.Parameters.AddWithValue("_MsgToAgent", obj.MsgToAgent);
                        cmd.Parameters.AddWithValue("_PartPay_Flag", obj.PartPay_Flag);

                        cmd.Parameters.AddWithValue("_SourceComment_Flag", obj.SourceComment_Flag);
                        string sofstr = obj.SourceComment;
                        if (obj.SourceComment != "" && obj.SourceComment != null)
                            sofstr = obj.SourceComment.Replace("null", "");
                        cmd.Parameters.AddWithValue("_SourceComment", sofstr);
                        cmd.Parameters.AddWithValue("_Other_Purpose", obj.Other_Purpose);
                        cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        cmd.Parameters.AddWithValue("_HomeDeliveryflag", obj.HDelivery_Flag);
                        cmd.Parameters.AddWithValue("_HomeDeliveryAddress", obj.HDelivery_Address);

                        cmd.Parameters.AddWithValue("_CollectionPoint_ID", obj.CollectionPoint_ID);
                        cmd.Parameters.AddWithValue("_API_ID", obj.BranchListAPI_ID);
                        cmd.Parameters.AddWithValue("_API_BranchDetails", obj.APIBranch_Details);

                        cmd.Parameters.AddWithValue("_BaseCurrency", obj.FromCurrency_Code);
                        cmd.Parameters.AddWithValue("_SOFID", obj.SOFID);
                        cmd.Parameters.AddWithValue("_PayByCard_ID", obj.PayByCard_ID);
                        cmd.Parameters.AddWithValue("_PaymentGateway_Flag", obj.PaymentGateway_ID);


                        if (obj.PType_ID == 6)
                        {   // For New Update
                            cmd.Parameters.RemoveAt("_PayByCard_ID"); cmd.Parameters.RemoveAt("_PaymentGateway_Flag");
                            cmd.Parameters.AddWithValue("_PayByCard_ID", obj.PType_ID);
                            cmd.Parameters.AddWithValue("_PaymentGateway_Flag", obj.payWithBankGatewayId);
                        }

                        if (obj.Wallet_Perm == 0)
                        {
                            cmd.Parameters.AddWithValue("_wallet_id", obj.Wallet_ID);
                            cmd.Parameters.AddWithValue("_Wallet_Amount", obj.Wallet_Amount);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("_wallet_id", 0);
                            cmd.Parameters.AddWithValue("_Wallet_Amount", 0);
                        }
                        if (obj.Discount_Perm == 0)
                        {
                            cmd.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                            cmd.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("_Discount_ID", 0);
                            cmd.Parameters.AddWithValue("_Discount_Amount", 0);
                        }
                        if (obj.Till_ID <= 0 || obj.Till_ID == null) { obj.Till_ID = 1; }
                        cmd.Parameters.AddWithValue("_Till_ID", obj.Till_ID);
                        cmd.Parameters.AddWithValue("_Transfer_Cost", obj.Transfer_Cost);
                        cmd.Parameters.AddWithValue("_NameOnCard", obj.NameOnCard);
                        string browserinfo = "";
                        string IPAddress1 = context.Connection.RemoteIpAddress.ToString();
                        browserinfo = "IP Address: " + IPAddress1;
                        try
                        {
                            DataTable dtc = CompanyInfo.get(obj.Client_ID, _srvTransactionContext);
                            ServicePointManager.Expect100Continue = true;
                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls13;
                            //| SecurityProtocolType.Tls11
                            //| SecurityProtocolType.Tls12
                            //| SecurityProtocolType.Ssl3;
                            var client = new RestClient("https://tools.keycdn.com/geo.json?host=" + IPAddress1);
                            client.Timeout = -1;
                            var request = new RestRequest(Method.GET);
                            client.UserAgent = "keycdn-tools:" + Convert.ToString(dtc.Rows[0]["company_website"]); //dtc.Rows[0]["Company_URL_Customer"] //keycdn-tools:https://www.calyx-solutions.com
                            request.AddHeader("Accept-Encoding", "gzip, deflate, br");
                            IRestResponse response = client.Execute(request);

                            GeoLocation GeoLocationList = Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(response.Content);
                            browserinfo = Newtonsoft.Json.JsonConvert.SerializeObject(GeoLocationList.data.geo);
                        }
                        catch (Exception ex)
                        {
                            browserinfo = "IP Address: " + IPAddress1;
                        }
                        cmd.Parameters.AddWithValue("_Location_Details", browserinfo);
                        cmd.Parameters.AddWithValue("_Comment", obj.Comment);

                        if (obj.PaymentGateway_ID > 0 && obj.ReferenceNo != null && obj.ReferenceNo != "" || obj.PaymentGateway_ID == 0)
                        {
                            obj.Transaction_ID = Convert.ToInt32(cmd.ExecuteScalar());
                            cmd.Dispose();
                        }


                        if (obj.Transaction_ID > 0)
                        {
                            //Get Customer Details                    
                            MySqlCommand cmd3 = new MySqlCommand("customer_details_by_param");//Customer_getallcustdetails
                            cmd3.CommandType = CommandType.StoredProcedure;
                            cmd3.Connection = con;
                            string _whereclause = " and cr.Client_ID=" + obj.Client_ID;
                            if (Customer_ID > 0)
                            {
                                _whereclause = " and cr.Customer_ID=" + Customer_ID;
                            }
                            cmd3.Parameters.AddWithValue("_whereclause", _whereclause);
                            cmd3.Parameters.AddWithValue("_SecurityKey", CompanyInfo.SecurityKey());
                            DataTable ct = db_connection.ExecuteQueryDataTableProcedure(cmd3);
                            Cust_ReferanceNo = Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]);

                            if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                            {
                                string setpayurl = "";
                                if (obj.PType_ID == 3)
                                {
                                    double setpayamt = obj.AmountInGBP + obj.Transfer_Fees + obj.ExtraTransfer_Fees;
                                    if ((obj.Wallet_Currency_type == 1 && obj.Wallet_Perm == 0) || obj.Discount_Perm == 0)
                                    {
                                        setpayamt = obj.Transfer_Cost;
                                    }
                                    if (obj.PaymentGateway_ID == 1)
                                    {
                                        DateTime utcNow = DateTime.UtcNow;
                                        var britishZone = TimeZoneInfo.FindSystemTimeZoneById("UTC");
                                        var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                        var sitesecuritytimestamp = d.ToString("yyyy-MM-dd HH:mm:ss");
                                        //var context = _srvTransactionContext;
                                        // string base_url = context.Request.Url.ToString();
                                        string base_url = "";
                                        string sitesecurity = TrustPaymentHashing(obj, HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)), sitesecuritytimestamp, base_url);

                                        string newstr = TrustPaymentwithoutHashing(obj, HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)), sitesecuritytimestamp, base_url);

                                        CompanyInfo.InsertActivityLogDetails(obj.ReferenceNo + " UTC Now -" + sitesecuritytimestamp + " 2. " + utcNow.ToString("yyyy-MM-dd hh:mm:ss") + " D - " + sitesecuritytimestamp, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                                        MySqlCommand cmdnn = new MySqlCommand("Get_PaymentGateway");
                                        cmdnn.CommandType = CommandType.StoredProcedure;
                                        cmdnn.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        cmdnn.Parameters.AddWithValue("_whereclause", " and ID=1");
                                        DataTable dtjj = (db_connection.ExecuteQueryDataTableProcedure(cmdnn));
                                        string site_sec_pwd = "", site_ref = "";
                                        if (dtjj.Rows.Count > 0)
                                        {
                                            string API_Codes = Convert.ToString(dtjj.Rows[0]["APIUnique_Codes"]);
                                            if (API_Codes != "" && API_Codes != null)
                                            {
                                                Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                                                site_ref = Convert.ToString(o["sitereference"]);
                                            }
                                        }

                                        DateTime? custdob = null;
                                        string custiso2 = "";
                                        int countryid = 0;
                                       
                                        try
                                        {
                                            string Customer_iid = "";
                                            //if (Customer_ID == 0)
                                            //{
                                            //    Customer_ID = Convert.ToString(CompanyInfo.Decrypt(obj.Customer_ID, true));
                                            //}
                                            using (MySqlCommand _cmd = new MySqlCommand("GetCustDetailsByID"))
                                            {
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("cust_ID", Customer_ID);

                                                DataTable dd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                                if (dd.Rows.Count > 0 && dd.Rows[0]["DateOf_Birth"] != DBNull.Value)
                                                {
                                                    custdob = Convert.ToDateTime(dd.Rows[0]["DateOf_Birth"]).Date;
                                                    countryid = Convert.ToInt32(dd.Rows[0]["Country_ID"]);

                                                    if (countryid > 0)
                                                    {
                                                        MySqlCommand _cmdd = new MySqlCommand("GetCountry_ISO_Code1");
                                                        _cmdd.CommandType = CommandType.StoredProcedure;
                                                        _cmdd.Parameters.AddWithValue("_Country_ID", countryid);
                                                        DataTable ddd = db_connection.ExecuteQueryDataTableProcedure(_cmdd);
                                                        if (ddd.Rows.Count > 0)
                                                        {
                                                            custiso2 = Convert.ToString(ddd.Rows[0]["ISO_Code"]);
                                                        }
                                                    }
                                                }
                                            }
                                            
                                        }
                                        catch (Exception ex)
                                        {
                                            Console.WriteLine($"Error: {ex.Message}");
                                            // Consider logging the exception.
                                        }
                                        string dobString = custdob?.ToString("yyyy-MM-dd") ?? "";


                                        string extraField = "&Post_Code=" + Convert.ToString(ct.Rows[0]["Post_Code"]) + "&First_Name=" + Convert.ToString(ct.Rows[0]["First_Name"]) + "&Last_Name=" + Convert.ToString(ct.Rows[0]["Last_Name"]) + "&Street=" + Convert.ToString(ct.Rows[0]["Street"]);
                                        //extraField += "&amt=" + setpayamt.ToString() + "&site_ref=" + site_ref + "&Country_Name=" + Convert.ToString(ct.Rows[0]["Country_Name"]) + "&City_Name=" + Convert.ToString(ct.Rows[0]["City_Name"]) + "&Address=" + Convert.ToString(ct.Rows[0]["Address"]) + "&newstr=" + newstr;
                                        extraField += "&amt=" + setpayamt.ToString() + "&site_ref=" + site_ref + "&Country_Name=" + Convert.ToString(ct.Rows[0]["Country_Name"]) + "&City_Name=" + Convert.ToString(ct.Rows[0]["City_Name"]) + "&Address=" + Convert.ToString(ct.Rows[0]["Address"]) + "&custdob=" + HttpUtility.UrlEncode(Convert.ToString(dobString)) + "&custiso2=" + HttpUtility.UrlEncode(custiso2) + "&site_ref2=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(site_ref.ToString(), true)); ;
                                        
                                        setpayurl = "online-pay.html?ReferenceNo=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) + "&mainamount=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(setpayamt.ToString(), true)) + "&CustID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                                            "&LoginName=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)) + "&ClientID=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.Client_ID.ToString(), true)) + "&sitesecurity=h" + sitesecurity + "&sitesecuritytimestamp=" + HttpUtility.UrlEncode(sitesecuritytimestamp) + extraField;
                                    }
                                    else if (obj.PaymentGateway_ID == 2)
                                    {
                                        setpayurl = "world-pay.html?ReferenceNo=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) + "&mainamount=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(setpayamt.ToString(), true)) + "&CustID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                                            "&LoginName=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)) + "&ClientID=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.Client_ID.ToString(), true)) + "";
                                    }
                                    else if (obj.PaymentGateway_ID == 3)
                                    {
                                        setpayurl = "judo-pay.html?ReferenceNo=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) + "&mainamount=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(setpayamt.ToString(), true)) + "&CustID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                                            "&LoginName=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)) + "&ClientID=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.Client_ID.ToString(), true)) + "&CustomerRef=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]), true)) + "";
                                    }
                                    else if (obj.PaymentGateway_ID == 8)
                                    {
                                        DateTime utcNow = DateTime.UtcNow;
                                        var britishZone = TimeZoneInfo.FindSystemTimeZoneById("UTC");
                                        var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                        var sitesecuritytimestamp = d.ToString("yyyy-MM-dd HH:mm:ss");
                                        //  var context = HttpContext.Current;
                                        string base_url = "";
                                        setpayurl = PayCrossHashing(obj, HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)), sitesecuritytimestamp, base_url, context);
                                        CompanyInfo.InsertActivityLogDetails(obj.ReferenceNo + " UTC Now -" + sitesecuritytimestamp + " 2. " + utcNow.ToString("yyyy-MM-dd hh:mm:ss") + " D - " + sitesecuritytimestamp, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                        // setpayurl = "online-pay.html?ReferenceNo=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) + "&mainamount=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(setpayamt.ToString(), true)) + "&CustID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                                        //"&LoginName=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)) + "&ClientID=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.Client_ID.ToString(), true)) + "&sitesecurity=h" + sitesecurity + "&sitesecuritytimestamp=" + HttpUtility.UrlEncode(sitesecuritytimestamp);

                                    }
                                    else if (obj.PaymentGateway_ID == 9) //changes by rushikesh
                                    {
                                        DateTime utcNow = DateTime.UtcNow;
                                        string returnURLAxcessms = "";
                                        var britishZone = TimeZoneInfo.FindSystemTimeZoneById("UTC");
                                        var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                        var sitesecuritytimestamp = d.ToString("yyyy-MM-dd HH:mm:ss");
                                        //  var context = HttpContext.Current;
                                        string base_url = "";
                                        setpayurl = GetAxcessms_URL(obj, obj.ReferenceNo, obj.AmountInGBP, obj.PType_ID);


                                    }
                                }
                                dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, setpayurl);

                                if (obj.PType_ID == 6)
                                {
                                    obj.Customer_Reference = Cust_ReferanceNo;

                                    MySqlCommand cmdactive_instantbnkapi = new MySqlCommand("Get_activeinstantBankAPIDetails");
                                    cmdactive_instantbnkapi.CommandType = CommandType.StoredProcedure;
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_status", 0);// API Status

                                    int payWithBankGatewayId = obj.payWithBankGatewayId;
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_payWithBankGatewayId", payWithBankGatewayId);

                                    DataTable dttcmdactive_instantbnkapi = db_connection.ExecuteQueryDataTableProcedure(cmdactive_instantbnkapi);
                                    int api_id_active_bnk_id = 0;
                                    if (dttcmdactive_instantbnkapi.Rows.Count > 0)
                                    {
                                        api_id_active_bnk_id = Convert.ToInt32(dttcmdactive_instantbnkapi.Rows[0]["bank_api_id"]);
                                    }

                                    if (api_id_active_bnk_id == 8)//pradip
                                    {  // Trust payment Pay with bank
                                        dt.Clear();
                                        string returnURLTrustpay = bankpaymentTrustPay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLTrustpay);
                                    }
                                    if (api_id_active_bnk_id == 7)
                                    {
                                        try
                                        {
                                            dt.Clear();
                                            string returnURL = "";// bankpaymentVolumePay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                            returnURL = LeatherbackPaymentURL(dt, obj, context);
                                            dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURL);
                                        }
                                        catch (Exception ex)
                                        {
                                            CompanyInfo.InsertActivityLogDetails("Leatherback erroe: ", obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "webpaymentJudoPay", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                        }
                                    }
                                    if (api_id_active_bnk_id == 1)
                                    {
                                        string custISOCode = Convert.ToString(ct.Rows[0]["ISO_Code"]);//yogesh sir 231124

                                        string URL = PayvyneTest(obj, custISOCode);
                                        dt.Clear();
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, URL);
                                    }
                                    if (api_id_active_bnk_id == 3)
                                    {   // Judopay Pay with Bank
                                        dt.Clear();
                                        string returnURLJudopay = webpaymentJudoPay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                        string[] words = returnURLJudopay.Split(' ');
                                        returnURLJudopay = Convert.ToString(words[0]);
                                        string judoReferenceNumber = Convert.ToString(words[1]);
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLJudopay, judoReferenceNumber);
                                    }
                                    if (api_id_active_bnk_id == 4)
                                    {  // VolumePay
                                        dt.Clear();
                                        string returnURLVolumepay = bankpaymentVolumePay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLVolumepay);
                                    }
                                    if (api_id_active_bnk_id == 5)
                                    {  // Ecommpay
                                        dt.Clear();
                                        string returnURLVolumepay = "";// bankpaymentVolumePay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);

                                        Service.srvSendMoney srv = new Service.srvSendMoney();
                                        DataTable li_ecommpay = srv.GetEcommpayPayLink(obj, obj.ReferenceNo, obj.AmountInGBP, obj.PType_ID, context);
                                        if (li_ecommpay != null)
                                        {
                                            if (li_ecommpay.Rows.Count > 0)
                                            {
                                                returnURLVolumepay = li_ecommpay.Rows[0][1].ToString();
                                            }
                                        }
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLVolumepay);
                                    }
                                    if (api_id_active_bnk_id == 9)
                                    {  // TrueLayer
                                        dt.Clear();
                                        string returnURLTrueLayer = GetTrueLayerLink(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLTrueLayer);
                                    }
                                    if (api_id_active_bnk_id == 10)//rushikesh 151124
                                    {  // Fire
                                        dt.Clear();
                                        string returnURLFire = "";

                                        Service.srvSendMoney srv = new Service.srvSendMoney();
                                        DataTable li_fire = srv.GetFireLink(obj, obj.ReferenceNo, obj.AmountInGBP, obj.PType_ID);
                                        if (li_fire != null)
                                        {
                                            if (li_fire.Rows.Count > 0)
                                            {
                                                returnURLFire = li_fire.Rows[0][1].ToString();
                                            }
                                        }
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLFire);
                                    }
                                    if (api_id_active_bnk_id == 11)
                                    {  // MTBS
                                        dt.Clear();
                                        string returnURLFire = "";

                                        Service.srvSendMoney srv = new Service.srvSendMoney();
                                        DataTable li_fire = srv.GetMTBSPaymentLink(obj);
                                        if (li_fire != null)
                                        {
                                            if (li_fire.Rows.Count > 0)
                                            {
                                                returnURLFire = li_fire.Rows[0][1].ToString();
                                            }
                                        }
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLFire);
                                    }
                                }

                                //insert into requestresponse_table (RequestResponse_Flag,ReferenceNo,Parameter,Customer_ID,Record_Insert_DateTime,Client_ID,Branch_ID) 
                                //values(" + iRepository.status + ",'" + iRepository.ReferenceNo + "','" + iRepository.Remark + "'," + iRepository.Customer_ID + ",'" + iRepository.Record_Insert_DateTime + "'," + iRepository.Client_ID + "," + iRepository.CB_ID + ");
                                MySqlCommand cmd1 = new MySqlCommand("Insert_RequestResponse");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                cmd1.Connection = con;
                                cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                cmd1.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                cmd1.Parameters.AddWithValue("_Remark", "Order Reference=" + obj.ReferenceNo + " & mainamount=" + Convert.ToDouble(obj.AmountInGBP) + Convert.ToDouble(obj.Transfer_Fees).ToString("N2") + " & currencyiso3a=" + obj.FromCurrency_Code + " & Customer ID=" + Customer_ID + "");
                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                cmd1.Parameters.AddWithValue("_status", 0);// 0 for request and 1 for response
                                cmd1.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                double Transfer_Cost = Convert.ToDouble(obj.Transfer_Cost);

                                int msg = cmd1.ExecuteNonQuery();
                                cmd1.Dispose();
                            }
                            else
                            {
                                dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, "");
                            }

                            //CompanyInfo.InsertActivityLogDetails("App - Money Transfer Transaction processed successfully. Transaction Reference - " + obj.ReferenceNo + ".", obj.User_ID, obj.Transaction_ID, obj.User_ID, obj.Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "Send Money");                                                               
                            //CompanyInfo.InsertActivityLogDetails("App - Transaction Details : Reference: " + obj.ReferenceNo + ", Sender Name: " + Convert.ToString(ct.Rows[0]["First_Name"]) + ", Receiver Name: " + Convert.ToString(bt.Rows[0]["Beneficiary_Address"]) + "," +
                            //    " Amount: " + obj.AmountInGBP + " " + obj.FromCurrency_Code + ", <br />Exchange Rate: " + obj.Exchange_Rate + ", Amount in Foreign Currency: " + obj.AmountInPKR + " " + obj.Currency_Code + ", Transfer Fees:" + obj.Transfer_Fees + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, obj.Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Insert Transaction");                               

                            //DataTable dtc = CompanyInfo.get(obj.Client_ID);

                        }
                        else
                        {
                            dt.Rows.Add(1, obj.ReferenceNo, Cust_ReferanceNo, "");
                        }
                    }

                    //transaction.Commit();

                }
                catch (Exception ex)
                {
                    //transaction.Rollback();
                    dt.Rows.Add(2, ex.ToString(), Cust_ReferanceNo, "");
                    ////Error Log Handled
                    //Model.ErrorLog objError = new Model.ErrorLog();
                    //objError.User = new Model.User();
                    //objError.Error = "Api : Temp Transaction --" + ex.ToString();
                    //objError.Date = DateTime.Now;
                    //objError.User_ID = 1;
                    //objError.Client_ID = obj.Client_ID;

                    //Service.srvErrorLog srvError = new Service.srvErrorLog();
                    //srvError.Create(objError);
                    CompanyInfo.InsertErrorLogTracker("Api : Temp Transaction --" + ex.ToString(), 0, 0, 0, 0, "InsertTemp", Convert.ToInt32(obj.Branch_ID), Convert.ToInt32(obj.Client_ID), "", _srvTransactionContext);

                }
                finally
                {
                    try
                    {
                        if (con.State != ConnectionState.Closed)
                            con.Close();
                    }
                    catch { }
                }

            }
            return dt;
        }


        public DataTable InsertTemp(Model.Transaction obj, HttpContext context)
        {
            _srvTransactionContext = context;
            List<Model.Transaction> _lst = new List<Model.Transaction>();
            string value = context.Session.GetString("chk_validity");
            string Cust_ReferanceNo = "";
            DataTable dt = new DataTable();
            dt.Columns.Add("Status", typeof(int));
            dt.Columns.Add("Refno", typeof(string));
            dt.Columns.Add("CustRefno", typeof(string));
            dt.Columns.Add("redirectUrl", typeof(string)); dt.Columns.Add("apireference", typeof(string));

            if (obj.testingpurpose == 0 ||  true)
            {
                bool validTransaction = checkValidTransactionCase(obj);
                if (validTransaction != true)
                {                   
                    string webstring = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build().GetSection("ConnectionStrings")["WEB_DB_CONN"];
                    webstring = webstring.ToLower();
                    if (webstring.IndexOf("csremit", 0, StringComparison.OrdinalIgnoreCase) != -1)
                    {
                        /*dt.Rows.Add(30, "", "", "", "");
                        return dt;*/
                    }
                }
            }


            using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
            {
                if (con.State != ConnectionState.Open)
                    con.Open();
                //MySqlTransaction transaction;
                //transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
                try
                {
                    int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                    obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID, _srvTransactionContext);

                    //string stringtohash = "myMTSHashingStarts" + obj.Beneficiary_ID + obj.Customer_ID + obj.AmountInGBP + obj.AmountInPKR + obj.Transfer_Fees +
                    //    obj.Exchange_Rate + obj.PaymentDepositType_ID + obj.PType_ID + obj.DeliveryType_Id + "myMTSHashingEnds";
                    //string chkhash = CompanyInfo.GetHash(stringtohash);
                    //chkhash = chkhash + "sendmoneystep2.5passed";//check if send money details step passed
                    //string sendmoneyhash = Convert.ToString(HttpContext.Current.Session["SendMoneyToken"]);
                    //if (sendmoneyhash != chkhash)//sendmoneyhash != null && sendmoneyhash != "" && 
                    //{
                    //    CompanyInfo.InsertActivityLogDetails("App - Invalid Data or Bad Request.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTemp", obj.CB_ID, obj.Client_ID, "Send Money");
                    //    dt.Rows.Add(7, "Invalid Data or Bad Request. Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    //    //return invalid or mismatched request
                    //}
                    //DateTime sendmoneyhashexpire = (DateTime)(HttpContext.Current.Session["sendmoneyhashexpire"]);
                    //if (sendmoneyhash == chkhash && sendmoneyhashexpire < Convert.ToDateTime(obj.Record_Insert_DateTime))// && sendmoneyhashexpire != null
                    //{
                    //    CompanyInfo.InsertActivityLogDetails("App - Transaction Timeout.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTemp", obj.CB_ID, obj.Client_ID, "Send Money");
                    //    dt.Rows.Add(7, "Transaction Timeout. Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    //    //return - link expired
                    //}
                    //string rewardtoken = Convert.ToString(HttpContext.Current.Session["RewardToken"]);
                    //if (obj.Wallet_Perm == 0 && rewardtoken != (obj.Wallet_Amount.ToString("N2") + "" + obj.Transfer_Cost.ToString("N2"))
                    //    || obj.Discount_Perm == 0 && rewardtoken != (obj.Discount_Amount.ToString("N2") + "" + obj.Transfer_Cost.ToString("N2")))
                    //{
                    //    CompanyInfo.InsertActivityLogDetails("App - Invalid Reward Data or Bad Request.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTemp", obj.CB_ID, obj.Client_ID, "Send Money");
                    //    dt.Rows.Add(7, "Invalid Data or Bad Request.  Please try again.", Cust_ReferanceNo, obj.Transaction_ID); return dt;
                    //}

                    #region checklimits
                    DateTime dateTime = Convert.ToDateTime(obj.Record_Insert_DateTime);
                    MySqlCommand _cmdl = new MySqlCommand("GetPermissions");
                    _cmdl.CommandType = CommandType.StoredProcedure;
                    _cmdl.Parameters.AddWithValue("_whereclause", "");
                    _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                    DataTable dttp = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                    //Check Daily Transfer Count perm
                    int chkdailycount = 1;
                    DataRow[] dr = dttp.Select("PID=59");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkdailycount = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    //Check daily limit perm
                    int chkdailylimit = 1;
                    dr = dttp.Select("PID=26");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkdailylimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    DataTable dds = null;
                    if (chkdailylimit == 0 || chkdailycount == 0)
                    {
                        _cmdl = new MySqlCommand("customer_transferamount_minmax");
                        _cmdl.CommandType = CommandType.StoredProcedure;
                        _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        dds = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                    }
                    //Check Daily Transfer Count
                    if (chkdailycount == 0)
                    {
                        if (dds.Rows.Count > 0)
                        {
                            int TotalDailyTransfer_count = Convert.ToInt32(dds.Rows[0]["Daily_Transfer_Count"]);
                            _cmdl = new MySqlCommand("CustTotal_Amount");
                            _cmdl.CommandType = CommandType.StoredProcedure;
                            _cmdl.Parameters.AddWithValue("_From_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                            _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmdl.Parameters.AddWithValue("_To_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                            _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                            _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                            DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                            if ((sd.Rows.Count + 1) > TotalDailyTransfer_count)
                            {
                                string notification_icon = "tranfer-limit-exceeded.jpg";
                                string notification_message = "<span class='cls-admin'>Daily transfer count <strong class='cls-cancel'>reached. Customer is on confirmation page.</strong></span><span class='cls-customer'></span>";
                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0,_srvTransactionContext);
                                //daily_transfer_count = 1;// count exceeded
                                //daily_transfer_msg = "We are unable to process your transfer request at the moment. Please contact Support Team with your transfer request.";
                                //transaction.Commit();
                                dt.Rows.Add(4, "Your daily transfer count limit reached.", Cust_ReferanceNo, "");
                                return dt;
                            }
                        }
                    }
                    ////Check daily limit 
                    //if (chkdailylimit == 0)
                    //{
                    //    if (dds.Rows.Count > 0)
                    //    {
                    //        double Daily_Transfer_Limit = Convert.ToDouble(dds.Rows[0]["Daily_Transfer_Limit"]);
                    //        //get todays total transaction amount
                    //        DateTime From_Date = dateTime.Date;
                    //        DateTime To_Date = dateTime.Date;
                    //        _cmdl = new MySqlCommand("CustTotal_Amount");
                    //        _cmdl.CommandType = CommandType.StoredProcedure;
                    //        _cmdl.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                    //        _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    //        _cmdl.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                    //        _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                    //        _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                    //        DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);

                    //        double total = 0;
                    //        if (sd.Rows.Count > 0)
                    //        {
                    //            for (int j = 0; j < sd.Rows.Count; j++)
                    //            {
                    //                double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                    //                double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                    //                total = total + AmountInGBP + fees;                                
                    //            }
                    //        }

                    //        if ((total + obj.AmountInGBP) > Daily_Transfer_Limit)
                    //        {
                    //            string notification_icon = "tranfer-limit-exceeded.jpg";
                    //            string notification_message = "<span class='cls-admin'>Daily transfer limit<strong class='cls-cancel'> reached.</strong></span><span class='cls-customer'></span>";
                    //            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0);                                
                    //            transaction.Commit();
                    //            dt.Rows.Add(4, "Your daily Limit is exceeded.", Cust_ReferanceNo, "");
                    //            return dt;
                    //        }
                    //    }
                    //}
                    #endregion checklimits

                    obj.TransactionStatus_ID = 1; obj.TransactionType_ID = 1;
                    obj.Delete_Status = 0;
                    // mark payment status pending if payment type is wire transfer
                    obj.PaymentReceived_ID = 2;
                    obj.PartPay_Flag = 1;
                    if (obj.auth_code == "undefined")
                    {
                        obj.auth_code = "";
                    }
                    obj.ManualRateChangedFlag = 1;
                    if (Convert.ToString(obj.Purpose_ID) == "10")
                    {
                        obj.Other_Purpose = Convert.ToString(obj.Purpose);
                    }
                    else
                    {
                        obj.Other_Purpose = "";
                    }
                    using (MySqlCommand cmd = new MySqlCommand("Insert_TempTransfer", con))
                    {
                        //    Query = "insert into TemporaryTransaction_Table(Customer_ID,Beneficiary_ID,TransactionType_ID,PaymentType_ID,TransactionStatus_ID,
                        //AmountInGBP,Exchange_Rate,AmountInPKR,Purpose_ID,Transfer_Fees,Record_Insert_DateTime,Delete_Status,PaymentDepositType_ID
                        //,paymentReceived_ID,ReferenceNo,User_ID,CB_ID,Country_ID,Currency_Code,Transaction_From_Flag,auth_code,DeliveryType_Id,Actual_ExchangeRate,
                        //ManualRateChangedFlag,RateUpdateReason_ID,MsgToAgent,PartPay_Flag,SourceComment_Flag,SourceComment,Other_Purpose,Client_ID,
                        //HDelivery_Flag,HDelivery_Address,CollectionPoint_ID,FromCurrency_Code,SOFID,PaymentGateway_Flag,Wallet_ID,Wallet_Amount,Discount_ID,Discount_Amount,Transfer_Cost) " +
                        //"values(" + iRepository.Id + "," + iRepository.Beneficiary_ID + "," + iRepository.TransactionType_ID + "," + iRepository.PType_ID + "," + iRepository.TransactionStatus_ID + "," + (iRepository.AmountInBase).ToString("0.00") + "," + iRepository.Rate + "," + (iRepository.AmountInForeign).ToString("0.00") + "," + iRepository.Purpose_ID + "," + (iRepository.Transfer_Fees).ToString("0.00") + ",'" + iRepository.Record_Insert_DateTime + "'," + iRepository.Delete_Status + "," + iRepository.PaymentDepositType_ID + "," + iRepository.paymentReceived_ID + ",'" + iRepository.ReferenceNo + "'" +
                        //"," + iRepository.User_ID + "," + iRepository.CB_ID + "," + iRepository.Country_ID + ",'" + iRepository.Currency_Code + "','" + iRepository.Transaction_From_Flag + "','" + iRepository.auth_code + "'," + iRepository.DeliveryType_ID + "," + iRepository.Actual_ExchangeRate + "," + iRepository.ManualRateChangedFlag + "," + iRepository.RateUpdateReason_ID + ",'" + iRepository.MsgToAgent.Replace("'", "''").Trim() + "'," + iRepository.PartPay_Flag + "," + iRepository.SourceComment_Flag + ",'" + iRepository.SourceComment.Replace("'", "''").Trim() + "','" + iRepository.Other_Purpose.Replace("'", "''") + "'," + iRepository.Client_ID + "," + iRepository.HomeDeliveryflag + ",'" + iRepository.HomeDeliveryAddress.Replace("'", "''").Trim() + "',0,'" + iRepository.BaseCurrency + "'," + iRepository.SourceId + "," + iRepository.PaymentGateway_Flag + "," + iRepository.wallet_id + "," + iRepository.Wallet_Amount + "," + iRepository.Discount_ID + "," + iRepository.Discount_Amount + "," + iRepository.Transfer_Cost + ");select last_insert_id();";

                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        cmd.Parameters.AddWithValue("_Beneficiary_ID", obj.Beneficiary_ID);
                        cmd.Parameters.AddWithValue("_TransactionType_ID", obj.TransactionType_ID);
                        cmd.Parameters.AddWithValue("_PType_ID", obj.PType_ID);
                        cmd.Parameters.AddWithValue("_TransactionStatus_ID", obj.TransactionStatus_ID);
                        cmd.Parameters.AddWithValue("_AmountInBase", obj.AmountInGBP.ToString("0.00"));

                        cmd.Parameters.AddWithValue("_Rate", obj.Exchange_Rate.ToString("0.0000"));
                        cmd.Parameters.AddWithValue("_AmountInForeign", obj.AmountInPKR.ToString("0.00"));
                        cmd.Parameters.AddWithValue("_Benf_BankDetails_ID", obj.Benf_BankDetails_ID); // multiple beneficiary bank details
                        cmd.Parameters.AddWithValue("_Purpose_ID", obj.Purpose_ID);
                        cmd.Parameters.AddWithValue("_Transfer_Fees", obj.Transfer_Fees.ToString("0.00"));

                        cmd.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                        cmd.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                        cmd.Parameters.AddWithValue("_PaymentDepositType_ID", obj.PaymentDepositType_ID);
                        cmd.Parameters.AddWithValue("_paymentReceived_ID", obj.PaymentReceived_ID);
                        if (obj.PaymentGateway_ID > 0 || obj.PType_ID == 6 || obj.PType_ID == 10 || obj.PType_ID == 11)
                        {
                            obj.ReferenceNo = GenerateReferenceNo(obj.Client_ID, obj.CB_ID);
                            //obj.PaymentGateway_Flag = obj.PaymentGateway_ID;
                        }
                        cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                        cmd.Parameters.AddWithValue("_User_ID", obj.User_ID);
                        cmd.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                        cmd.Parameters.AddWithValue("_Country_ID", obj.Country_ID);
                        cmd.Parameters.AddWithValue("_Currency_Code", obj.Currency_Code);
                        cmd.Parameters.AddWithValue("_Transaction_From_Flag", obj.Transaction_From_Flag);
                        cmd.Parameters.AddWithValue("_auth_code", obj.auth_code);
                        cmd.Parameters.AddWithValue("_DeliveryType_ID", obj.DeliveryType_Id);
                        cmd.Parameters.AddWithValue("_Actual_ExchangeRate", obj.Actual_ExchangeRate);
                        cmd.Parameters.AddWithValue("_ManualRateChangedFlag", obj.ManualRateChangedFlag);
                        cmd.Parameters.AddWithValue("_RateUpdateReason_ID", obj.RateUpdateReason_ID);

                        cmd.Parameters.AddWithValue("_MsgToAgent", obj.MsgToAgent);
                        cmd.Parameters.AddWithValue("_PartPay_Flag", obj.PartPay_Flag);
                        cmd.Parameters.AddWithValue("_improved_rate_flag", obj.improved_rate_flag); //vyankatesh 02-09
                        cmd.Parameters.AddWithValue("_SourceComment_Flag", obj.SourceComment_Flag);
                        string sofstr = obj.SourceComment;
                        if (obj.SourceComment != "" && obj.SourceComment != null)
                            sofstr = obj.SourceComment.Replace("null", "");
                        cmd.Parameters.AddWithValue("_SourceComment", sofstr);
                        cmd.Parameters.AddWithValue("_Other_Purpose", obj.Other_Purpose);
                        cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        cmd.Parameters.AddWithValue("_HomeDeliveryflag", obj.HDelivery_Flag);
                        cmd.Parameters.AddWithValue("_HomeDeliveryAddress", obj.HDelivery_Address);

                        cmd.Parameters.AddWithValue("_CollectionPoint_ID", obj.CollectionPoint_ID);
                        cmd.Parameters.AddWithValue("_API_ID", obj.BranchListAPI_ID);
                        cmd.Parameters.AddWithValue("_API_BranchDetails", obj.APIBranch_Details);

                        cmd.Parameters.AddWithValue("_BaseCurrency", obj.FromCurrency_Code);
                        cmd.Parameters.AddWithValue("_SOFID", obj.SOFID);
                        cmd.Parameters.AddWithValue("_PayByCard_ID", obj.PayByCard_ID);
                        cmd.Parameters.AddWithValue("_PaymentGateway_Flag", obj.PaymentGateway_ID);
                        cmd.Parameters.AddWithValue("_ExtraTransfer_Fees", obj.ExtraTransfer_Fees.ToString("0.00"));
                        cmd.Parameters.AddWithValue("_offer_rate_flag", obj.offer_rate_flag);
                        if (obj.PType_ID == 6)
                        {   // For New Update
                            cmd.Parameters.RemoveAt("_PayByCard_ID"); cmd.Parameters.RemoveAt("_PaymentGateway_Flag");
                            cmd.Parameters.AddWithValue("_PayByCard_ID", obj.PType_ID);
                            cmd.Parameters.AddWithValue("_PaymentGateway_Flag", obj.payWithBankGatewayId);
                        }

                        if (obj.Wallet_Perm == 0)
                        {
                            cmd.Parameters.AddWithValue("_wallet_id", obj.Wallet_ID);
                            cmd.Parameters.AddWithValue("_Wallet_Amount", obj.Wallet_Amount);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("_wallet_id", 0);
                            cmd.Parameters.AddWithValue("_Wallet_Amount", 0);
                        }
                        if (obj.Discount_Perm == 0)
                        {
                            cmd.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                            cmd.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("_Discount_ID", 0);
                            cmd.Parameters.AddWithValue("_Discount_Amount", 0);
                        }
                        if (obj.Till_ID <= 0 || obj.Till_ID == null) { obj.Till_ID = 1; }
                        cmd.Parameters.AddWithValue("_Till_ID", obj.Till_ID);
                        cmd.Parameters.AddWithValue("_Transfer_Cost", obj.Transfer_Cost);
                        cmd.Parameters.AddWithValue("_NameOnCard", obj.NameOnCard);
                        string browserinfo = "";
                        string IPAddress1 = context.Connection.RemoteIpAddress.ToString();
                        browserinfo = "IP Address: " + IPAddress1;
                        try
                        {
                            DataTable dtc = CompanyInfo.get(obj.Client_ID, _srvTransactionContext);
                            ServicePointManager.Expect100Continue = true;
                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls13;
                            //| SecurityProtocolType.Tls11
                            //| SecurityProtocolType.Tls12
                            //| SecurityProtocolType.Ssl3;
                            var client = new RestClient("https://tools.keycdn.com/geo.json?host=" + IPAddress1);
                            client.Timeout = -1;
                            var request = new RestRequest(Method.GET);
                            client.UserAgent = "keycdn-tools:" + Convert.ToString(dtc.Rows[0]["company_website"]); //dtc.Rows[0]["Company_URL_Customer"] //keycdn-tools:https://www.calyx-solutions.com
                            request.AddHeader("Accept-Encoding", "gzip, deflate, br");
                            IRestResponse response = client.Execute(request);

                            GeoLocation GeoLocationList = Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(response.Content);
                            browserinfo = Newtonsoft.Json.JsonConvert.SerializeObject(GeoLocationList.data.geo);
                        }
                        catch (Exception ex)
                        {
                            browserinfo = "IP Address: " + IPAddress1;
                        }
                        cmd.Parameters.AddWithValue("_Location_Details", browserinfo);
                        cmd.Parameters.AddWithValue("_Comment", obj.Comment);

                        if (obj.PaymentGateway_ID > 0 && obj.ReferenceNo != null && obj.ReferenceNo != "" || obj.PaymentGateway_ID == 0)
                        {
                            obj.Transaction_ID = Convert.ToInt32(cmd.ExecuteScalar());
                            cmd.Dispose();
                        }


                        if (obj.Transaction_ID > 0)
                        {
                            //Get Customer Details                    
                            MySqlCommand cmd3 = new MySqlCommand("customer_details_by_param");//Customer_getallcustdetails
                            cmd3.CommandType = CommandType.StoredProcedure;
                            cmd3.Connection = con;
                            string _whereclause = " and cr.Client_ID=" + obj.Client_ID;
                            if (Customer_ID > 0)
                            {
                                _whereclause = " and cr.Customer_ID=" + Customer_ID;
                            }
                            cmd3.Parameters.AddWithValue("_whereclause", _whereclause);
                            cmd3.Parameters.AddWithValue("_SecurityKey", CompanyInfo.SecurityKey());
                            DataTable ct = db_connection.ExecuteQueryDataTableProcedure(cmd3);
                            Cust_ReferanceNo = Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]);

                            if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                            {
                                string setpayurl = "";
                                if (obj.PType_ID == 3)
                                {
                                    double setpayamt = obj.AmountInGBP + obj.Transfer_Fees;
                                    if (obj.Wallet_Perm == 0 || obj.Discount_Perm == 0)
                                    {
                                        setpayamt = obj.Transfer_Cost;
                                    }
                                    if (obj.PaymentGateway_ID == 1)
                                    {
                                        DateTime utcNow = DateTime.UtcNow;
                                        var britishZone = TimeZoneInfo.FindSystemTimeZoneById("UTC");
                                        var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                        var sitesecuritytimestamp = d.ToString("yyyy-MM-dd HH:mm:ss");
                                        //var context = _srvTransactionContext;
                                       // string base_url = context.Request.Url.ToString();
                                        string base_url = "";
                                        string sitesecurity = TrustPaymentHashing(obj, HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)), sitesecuritytimestamp, base_url);
                                        
                                        string newstr = TrustPaymentwithoutHashing(obj, HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)), sitesecuritytimestamp, base_url);

                                        CompanyInfo.InsertActivityLogDetails(obj.ReferenceNo + " UTC Now -" + sitesecuritytimestamp + " 2. " + utcNow.ToString("yyyy-MM-dd hh:mm:ss") + " D - " + sitesecuritytimestamp, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                                        MySqlCommand cmdnn = new MySqlCommand("Get_PaymentGateway");
                                        cmdnn.CommandType = CommandType.StoredProcedure;
                                        cmdnn.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        cmdnn.Parameters.AddWithValue("_whereclause", " and ID=1");
                                        DataTable dtjj = (db_connection.ExecuteQueryDataTableProcedure(cmdnn));
                                        string site_sec_pwd = "", site_ref = "";
                                        if (dtjj.Rows.Count > 0)
                                        {
                                            string API_Codes = Convert.ToString(dtjj.Rows[0]["APIUnique_Codes"]);
                                            if (API_Codes != "" && API_Codes != null)
                                            {
                                                Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);                                                
                                                site_ref = Convert.ToString(o["sitereference"]);
                                            }
                                        }

                                        DateTime? custdob = null;
                                        string custiso2 = "";
                                        int countryid = 0;

                                        try
                                        {
                                            string Customer_iid = "";
                                         
                                            using (MySqlCommand _cmd = new MySqlCommand("GetCustDetailsByID"))
                                            {
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("cust_ID", Customer_ID);

                                                DataTable dd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                                if (dd.Rows.Count > 0 && dd.Rows[0]["DateOf_Birth"] != DBNull.Value)
                                                {
                                                    custdob = Convert.ToDateTime(dd.Rows[0]["DateOf_Birth"]).Date;
                                                    countryid = Convert.ToInt32(dd.Rows[0]["Country_ID"]);

                                                    if (countryid > 0)
                                                    {
                                                        MySqlCommand _cmdd = new MySqlCommand("GetCountry_ISO_Code1");
                                                        _cmdd.CommandType = CommandType.StoredProcedure;
                                                        _cmdd.Parameters.AddWithValue("_Country_ID", countryid);
                                                        DataTable ddd = db_connection.ExecuteQueryDataTableProcedure(_cmdd);
                                                        if (ddd.Rows.Count > 0)
                                                        {
                                                            custiso2 = Convert.ToString(ddd.Rows[0]["ISO_Code"]);
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                        string dobString = custdob?.ToString("yyyy-MM-dd") ?? "";

                                        string appurl = "";
                                        DataTable dtComapanydetails = (DataTable)CompanyInfo.GetBaseCurrencywisebankdetails(obj.Client_ID, obj.FromCurrency_Code, 0, 0);
                                        if (dtComapanydetails != null && dtComapanydetails.Rows.Count > 0)
                                        {

                                            foreach (DataRow drCompanyDetails in dtComapanydetails.Rows)
                                            {
                                                appurl = Convert.ToString(drCompanyDetails["Company_URL_Customer"]); 
                                            }
                                        }

                                        string extraField = "&Post_Code=" + Convert.ToString(ct.Rows[0]["Post_Code"]) + "&First_Name=" + Convert.ToString(ct.Rows[0]["First_Name"]) + "&Last_Name=" + Convert.ToString(ct.Rows[0]["Last_Name"]) + "&Street=" + Convert.ToString(ct.Rows[0]["Street"]) ;
                                        // extraField +=  "&amt="+ setpayamt.ToString() + "&site_ref="+ site_ref  + "&Country_Name=" + Convert.ToString(ct.Rows[0]["Country_Name"]) + "&City_Name=" + Convert.ToString(ct.Rows[0]["City_Name"])+"&Address=" + Convert.ToString(ct.Rows[0]["Address"])+ "&newstr=" + newstr;
                                        extraField += "&amt=" + setpayamt.ToString() + "&site_ref=" + site_ref + "&Country_Name=" + Convert.ToString(ct.Rows[0]["Country_Name"]) + "&City_Name=" + Convert.ToString(ct.Rows[0]["City_Name"]) + "&Address=" + Convert.ToString(ct.Rows[0]["Address"])+"&custappurl="+ appurl + "&custdob=" + HttpUtility.UrlEncode(Convert.ToString(dobString)) + "&custiso2=" + HttpUtility.UrlEncode(custiso2) + "&site_ref2=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(site_ref.ToString(), true)); ;

                                        setpayurl = "online-pay.html?ReferenceNo=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) + "&mainamount=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(setpayamt.ToString(), true)) + "&CustID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                                            "&LoginName=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)) + "&ClientID=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.Client_ID.ToString(), true)) + "&sitesecurity=h" + sitesecurity + "&sitesecuritytimestamp=" + HttpUtility.UrlEncode(sitesecuritytimestamp)+ extraField;
                                    }
                                    else if (obj.PaymentGateway_ID == 2)
                                    {
                                        setpayurl = "world-pay.html?ReferenceNo=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) + "&mainamount=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(setpayamt.ToString(), true)) + "&CustID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                                            "&LoginName=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)) + "&ClientID=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.Client_ID.ToString(), true)) + "";
                                    }
                                    else if (obj.PaymentGateway_ID == 3)
                                    {
                                        setpayurl = "judo-pay.html?ReferenceNo=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) + "&mainamount=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(setpayamt.ToString(), true)) + "&CustID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                                            "&LoginName=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)) + "&ClientID=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.Client_ID.ToString(), true)) + "&CustomerRef=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]), true)) + "";
                                    }
                                    else if (obj.PaymentGateway_ID == 8)
                                    {
                                        DateTime utcNow = DateTime.UtcNow;
                                        var britishZone = TimeZoneInfo.FindSystemTimeZoneById("UTC");
                                        var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                        var sitesecuritytimestamp = d.ToString("yyyy-MM-dd HH:mm:ss");
                                        //  var context = HttpContext.Current;
                                        string base_url = "";
                                        setpayurl = PayCrossHashing(obj, HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)), sitesecuritytimestamp, base_url,context);
                                        CompanyInfo.InsertActivityLogDetails(obj.ReferenceNo + " UTC Now -" + sitesecuritytimestamp + " 2. " + utcNow.ToString("yyyy-MM-dd hh:mm:ss") + " D - " + sitesecuritytimestamp, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "Send Money",context);
                                        // setpayurl = "online-pay.html?ReferenceNo=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) + "&mainamount=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(setpayamt.ToString(), true)) + "&CustID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                                        //"&LoginName=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)) + "&ClientID=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.Client_ID.ToString(), true)) + "&sitesecurity=h" + sitesecurity + "&sitesecuritytimestamp=" + HttpUtility.UrlEncode(sitesecuritytimestamp);

                                    }
                                    else if (obj.PaymentGateway_ID == 9) //changes by rushikesh
                                    {
                                        DateTime utcNow = DateTime.UtcNow;
                                        string returnURLAxcessms = "";
                                        var britishZone = TimeZoneInfo.FindSystemTimeZoneById("UTC");
                                        var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                        var sitesecuritytimestamp = d.ToString("yyyy-MM-dd HH:mm:ss");
                                        //  var context = HttpContext.Current;
                                        string base_url = "";
                                        setpayurl = GetAxcessms_URL(obj, obj.ReferenceNo, obj.AmountInGBP, obj.PType_ID);

                                    }
                                    dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, setpayurl);
                                }
                                

                                if (obj.PType_ID == 6)
                                {
                                    obj.Customer_Reference = Cust_ReferanceNo;

                                    MySqlCommand cmdactive_instantbnkapi = new MySqlCommand("Get_activeinstantBankAPIDetails");
                                    cmdactive_instantbnkapi.CommandType = CommandType.StoredProcedure;
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_status", 0);// API Status

                                    int payWithBankGatewayId = obj.payWithBankGatewayId;
                                    cmdactive_instantbnkapi.Parameters.AddWithValue("_payWithBankGatewayId", payWithBankGatewayId);

                                    DataTable dttcmdactive_instantbnkapi = db_connection.ExecuteQueryDataTableProcedure(cmdactive_instantbnkapi);
                                    int api_id_active_bnk_id = 0;
                                    if (dttcmdactive_instantbnkapi.Rows.Count > 0)
                                    {
                                        api_id_active_bnk_id = Convert.ToInt32(dttcmdactive_instantbnkapi.Rows[0]["bank_api_id"]);
                                    }

                                    if (api_id_active_bnk_id == 8)//pradip
                                    {  // Trust payment Pay with bank
                                        dt.Clear();
                                        string returnURLTrustpay = bankpaymentTrustPay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLTrustpay);
                                    }
                                    if (api_id_active_bnk_id == 7)
                                    {
                                        try
                                        {
                                            dt.Clear();
                                            string returnURL = "";// bankpaymentVolumePay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                            returnURL = LeatherbackPaymentURL(dt, obj,context);
                                            dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURL);
                                        }
                                        catch (Exception ex)
                                        {
                                            CompanyInfo.InsertActivityLogDetails("Leatherback erroe: ", obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "webpaymentJudoPay", obj.CB_ID, obj.Client_ID, "Send Money", context);
                                        }
                                    }
                                    if (api_id_active_bnk_id == 1)
                                    {
                                        string custISOCode = Convert.ToString(ct.Rows[0]["ISO_Code"]);

                                        string URL = PayvyneTest(obj, custISOCode);
                                        dt.Clear();
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, URL);
                                    }
                                    if (api_id_active_bnk_id == 3)
                                    {   // Judopay Pay with Bank
                                        dt.Clear();
                                        string returnURLJudopay = webpaymentJudoPay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                        string[] words = returnURLJudopay.Split(' ');
                                        returnURLJudopay = Convert.ToString(words[0]);
                                        string judoReferenceNumber = Convert.ToString(words[1]);
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLJudopay, judoReferenceNumber);
                                    }
                                    if (api_id_active_bnk_id == 4)
                                    {  // VolumePay
                                        dt.Clear();
                                        string returnURLVolumepay = bankpaymentVolumePay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLVolumepay);
                                    }
                                    if (api_id_active_bnk_id == 5)
                                    {  // Ecommpay
                                        dt.Clear();
                                        string returnURLVolumepay = "";// bankpaymentVolumePay(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);

                                        Service.srvSendMoney srv = new Service.srvSendMoney();
                                        DataTable li_ecommpay = srv.GetEcommpayPayLink(obj, obj.ReferenceNo, obj.AmountInGBP, obj.PType_ID, context);
                                        if (li_ecommpay != null)
                                        {
                                            if (li_ecommpay.Rows.Count > 0)
                                            {
                                                returnURLVolumepay = li_ecommpay.Rows[0][1].ToString();
                                            }
                                        }
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLVolumepay);
                                    }
                                    if (api_id_active_bnk_id == 9)
                                    {  // TrueLayer
                                        dt.Clear();
                                        string returnURLTrueLayer = GetTrueLayerLink(obj.ReferenceNo, Cust_ReferanceNo, obj.TotalAmount.ToString(), obj, api_id_active_bnk_id);
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLTrueLayer);
                                    }
                                    if (api_id_active_bnk_id == 10)//rushikesh 151124
                                    {  // Fire
                                        dt.Clear();
                                        string returnURLFire = "";

                                        Service.srvSendMoney srv = new Service.srvSendMoney();
                                        DataTable li_fire = srv.GetFireLink(obj, obj.ReferenceNo, obj.AmountInGBP, obj.PType_ID);
                                        if (li_fire != null)
                                        {
                                            if (li_fire.Rows.Count > 0)
                                            {
                                                returnURLFire = li_fire.Rows[0][1].ToString();
                                            }
                                        }
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLFire);
                                    }
                                    if (api_id_active_bnk_id == 11)
                                    {  // MTBS
                                        dt.Clear();
                                        string returnURLFire = "";

                                        Service.srvSendMoney srv = new Service.srvSendMoney();
                                        DataTable li_fire = srv.GetMTBSPaymentLink(obj);
                                        if (li_fire != null)
                                        {
                                            if (li_fire.Rows.Count > 0)
                                            {
                                                returnURLFire = li_fire.Rows[0][1].ToString();
                                            }
                                        }
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLFire);
                                    }
                                    if (api_id_active_bnk_id == 13)
                                    {  // Payceller
                                        dt.Clear();
                                        string returnURLpayceller = "";

                                        Service.srvSendMoney srv = new Service.srvSendMoney();
                                        DataTable li_fire = srv.GetPaycellerPaymentLink(obj,context);
                                        if (li_fire != null)
                                        {
                                            if (li_fire.Rows.Count > 0)
                                            {
                                                returnURLpayceller = li_fire.Rows[0][1].ToString();
                                            }
                                        }
                                        dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLpayceller);
                                    }
                                }

								if (obj.PType_ID == 10)//Google Pay Rushikesh
                                {
                                    DateTime utcNow = DateTime.UtcNow;
                                    string returnURLEmerchantgooglepay = "";
                                    var britishZone = TimeZoneInfo.FindSystemTimeZoneById("UTC");
                                    var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                    var sitesecuritytimestamp = d.ToString("yyyy-MM-dd HH:mm:ss");
                                   // string base_url = context.Request.Url.ToString();
                                    DataTable li_Emerchantgooglepay = GetEmerchantpayPaymentLink(obj, obj.ReferenceNo, obj.AmountInGBP, obj.PType_ID, context);
                                    if (li_Emerchantgooglepay != null)
                                    {
                                        if (li_Emerchantgooglepay.Rows.Count > 0)
                                        {
                                            returnURLEmerchantgooglepay = li_Emerchantgooglepay.Rows[0][1].ToString();
                                        }
                                    }
                                    dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLEmerchantgooglepay);

                                }
                                if (obj.PType_ID == 11)//Apple Pay Rushikesh
                                {
                                    DateTime utcNow = DateTime.UtcNow;
                                    string returnURLEmerchantapplepay = "";
                                    var britishZone = TimeZoneInfo.FindSystemTimeZoneById("UTC");
                                    var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                    var sitesecuritytimestamp = d.ToString("yyyy-MM-dd HH:mm:ss");
                                  
                                    DataTable li_Emerchantapplepay = GetEmerchantpayPaymentLink(obj, obj.ReferenceNo, obj.AmountInGBP, obj.PType_ID,context);
                                    if (li_Emerchantapplepay != null)
                                    {
                                        if (li_Emerchantapplepay.Rows.Count > 0)
                                        {
                                            returnURLEmerchantapplepay = li_Emerchantapplepay.Rows[0][1].ToString();
                                        }
                                    }
                                    dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, returnURLEmerchantapplepay);
                                }
                                //insert into requestresponse_table (RequestResponse_Flag,ReferenceNo,Parameter,Customer_ID,Record_Insert_DateTime,Client_ID,Branch_ID) 
                                //values(" + iRepository.status + ",'" + iRepository.ReferenceNo + "','" + iRepository.Remark + "'," + iRepository.Customer_ID + ",'" + iRepository.Record_Insert_DateTime + "'," + iRepository.Client_ID + "," + iRepository.CB_ID + ");
                                MySqlCommand cmd1 = new MySqlCommand("Insert_RequestResponse");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                cmd1.Connection = con;
                                cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                cmd1.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                cmd1.Parameters.AddWithValue("_Remark", "Order Reference=" + obj.ReferenceNo + " & mainamount=" + Convert.ToDouble(obj.AmountInGBP) + Convert.ToDouble(obj.Transfer_Fees).ToString("N2") + " & currencyiso3a=" + obj.FromCurrency_Code + " & Customer ID=" + Customer_ID + "");
                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                cmd1.Parameters.AddWithValue("_status", 0);// 0 for request and 1 for response
                                cmd1.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                double Transfer_Cost = Convert.ToDouble(obj.Transfer_Cost);

                                int msg = cmd1.ExecuteNonQuery();
                                cmd1.Dispose();
                            }
                            else
                            {
                                dt.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo, "");
                            }

                            //CompanyInfo.InsertActivityLogDetails("App - Money Transfer Transaction processed successfully. Transaction Reference - " + obj.ReferenceNo + ".", obj.User_ID, obj.Transaction_ID, obj.User_ID, obj.Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "Send Money");                                                               
                            //CompanyInfo.InsertActivityLogDetails("App - Transaction Details : Reference: " + obj.ReferenceNo + ", Sender Name: " + Convert.ToString(ct.Rows[0]["First_Name"]) + ", Receiver Name: " + Convert.ToString(bt.Rows[0]["Beneficiary_Address"]) + "," +
                            //    " Amount: " + obj.AmountInGBP + " " + obj.FromCurrency_Code + ", <br />Exchange Rate: " + obj.Exchange_Rate + ", Amount in Foreign Currency: " + obj.AmountInPKR + " " + obj.Currency_Code + ", Transfer Fees:" + obj.Transfer_Fees + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, obj.Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Insert Transaction");                               

                            //DataTable dtc = CompanyInfo.get(obj.Client_ID);

                        }
                        else
                        {
                            dt.Rows.Add(1, obj.ReferenceNo, Cust_ReferanceNo, "");
                        }
                    }

                    //transaction.Commit();
                    
                }
                catch (Exception ex)
                {
                    //transaction.Rollback();
                    dt.Rows.Add(2, ex.ToString(), Cust_ReferanceNo, "");
                    ////Error Log Handled
                    //Model.ErrorLog objError = new Model.ErrorLog();
                    //objError.User = new Model.User();
                    //objError.Error = "Api : Temp Transaction --" + ex.ToString();
                    //objError.Date = DateTime.Now;
                    //objError.User_ID = 1;
                    //objError.Client_ID = obj.Client_ID;

                    //Service.srvErrorLog srvError = new Service.srvErrorLog();
                    //srvError.Create(objError);
                    CompanyInfo.InsertErrorLogTracker("Api : Temp Transaction --" + ex.ToString(), 0, 0, 0, 0, "InsertTemp", Convert.ToInt32(obj.Branch_ID), Convert.ToInt32(obj.Client_ID), "", _srvTransactionContext);

                }
                finally
                {
                    try
                    {
                        if (con.State != ConnectionState.Closed)
                            con.Close();
                    }
                    catch { }
                }

            }
            return dt;
        }

        #region trustpayment

        public string TrustPaymentwithoutHashing(Model.Transaction obj, string login_name, string sitesecuritytimestamp, string base_url)
        {
            string hash_site_security = "";
            try
            {
                MySqlCommand cmd = new MySqlCommand("Get_PaymentGateway");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_whereclause", " and ID=1");
                DataTable dt = (db_connection.ExecuteQueryDataTableProcedure(cmd));
                string site_sec_pwd = "", site_ref = "";
                if (dt.Rows.Count > 0)
                {
                    string API_Codes = Convert.ToString(dt.Rows[0]["APIUnique_Codes"]);

                    if (API_Codes != "" && API_Codes != null)
                    {
                        Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                        site_sec_pwd = Convert.ToString(o["sitesecurity"]);
                        site_ref = Convert.ToString(o["sitereference"]);
                    }
                  
                    base_url = "";

                    double setpayamt = obj.AmountInGBP + obj.Transfer_Fees;
                    if (obj.Discount_Perm == 0)
                    {
                        setpayamt = setpayamt - obj.Discount_Amount;
                    }
                    else if (obj.Wallet_Perm == 0)
                    {
                        setpayamt = setpayamt - obj.Wallet_Amount;
                    }
                    string hash_site_security_encrypt = "";
                    string success_url = "";
                    string decline_url = "";
                    var extrapara = "?PayGateway=" + HttpUtility.UrlEncode(obj.PaymentGateway_ID.ToString()) + "" +
                        "&C_ID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                        "&LoginName=" + login_name + "" +
                        "&Client_ID=" + obj.Client_ID + "" +
                        "&BID=" + obj.Branch_ID + "";
                    success_url = base_url + "/pay-by-card-success.html" + extrapara + "";
                    decline_url = base_url + "/pay-by-card-success.html" + extrapara + "";
                   
                    hash_site_security = site_ref +"_" + obj.FromCurrency_Code + "_" + setpayamt.ToString("0.00") + "_" + obj.ReferenceNo + "_" + sitesecuritytimestamp + "_" + site_sec_pwd;//+ obj.Customer_ID + success_url + decline_url + sitesecuritytimestamp + site_sec_pwd;//;
                    string stringToHash = hash_site_security;// "GBP100.00test_site123452019-05-28 14:22:37PASSWORD";
                    return stringToHash;
                                      
                }
            }
            catch (Exception ex)
            {
                

                CompanyInfo.InsertErrorLogTracker("Api : TrustPaymentHashError --" + ex.ToString(), 0, 0, 0, 0, "TrustPaymentHashing", Convert.ToInt32(obj.Branch_ID), Convert.ToInt32(obj.Client_ID), "", _srvTransactionContext);

                return hash_site_security;
            }
            return hash_site_security;
        }
        public string TrustPaymentHashing(Model.Transaction obj, string login_name, string sitesecuritytimestamp, string base_url)
        {
            string hash_site_security = "";
            try
            {
                MySqlCommand cmd = new MySqlCommand("Get_PaymentGateway");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_whereclause", " and ID=1");
                DataTable dt = (db_connection.ExecuteQueryDataTableProcedure(cmd));
                string site_sec_pwd = "", site_ref = "";
                if (dt.Rows.Count > 0)
                {
                    string API_Codes = Convert.ToString(dt.Rows[0]["APIUnique_Codes"]);

                    if (API_Codes != "" && API_Codes != null)
                    {
                        Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                        site_sec_pwd = Convert.ToString(o["sitesecurity"]);
                        site_ref = Convert.ToString(o["sitereference"]);
                    }
                    //var context = HttpContext.Current;
                    //base_url = base_url.Replace(context.Request.Url.PathAndQuery.ToString(), "");
                    base_url = "";

                    double setpayamt = obj.AmountInGBP + obj.Transfer_Fees;
                    if (obj.Discount_Perm == 0)
                    {
                        setpayamt = setpayamt - obj.Discount_Amount;
                    }
                    else if (obj.Wallet_Perm == 0)
                    {
                        setpayamt = setpayamt - obj.Wallet_Amount;
                    }
                    string hash_site_security_encrypt = "";
                    string success_url = "";
                    string decline_url = "";
                    var extrapara = "?PayGateway=" + HttpUtility.UrlEncode(obj.PaymentGateway_ID.ToString()) + "" +
                        "&C_ID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                        "&LoginName=" + login_name + "" +
                        "&Client_ID=" + obj.Client_ID + "" +
                        "&BID=" + obj.Branch_ID + "";
                    success_url = base_url + "/pay-by-card-success.html" + extrapara + "";
                    decline_url = base_url + "/pay-by-card-success.html" + extrapara + "";
                    //success- link + "pay-by-card-success.html" + extrapara + ""
                    //decline- link + "Review-Transfer.html" + extrapara + ""
                    //hash_site_security = obj.FromCurrency_Code + setpayamt + site_ref + success_url +decline_url+ HttpUtility.UrlEncode(obj.Customer_ID) + sitesecuritytimestamp + site_sec_pwd;//+ obj.ReferenceNo + obj.Customer_ID;
                    //hash_site_security = site_ref + obj.FromCurrency_Code + Math.Round(setpayamt,2) + obj.ReferenceNo + obj.Customer_ID + success_url + sitesecuritytimestamp + site_sec_pwd;//;
                    //sitereference,currencyiso3a,mainamount,orderreference,stextraurlredirectfields,successfulurlredirect,declinedurlredirect,sitesecuritytimestamp,Password
                    hash_site_security = site_ref + obj.FromCurrency_Code + setpayamt.ToString("0.00") + obj.ReferenceNo + sitesecuritytimestamp + site_sec_pwd;//+ obj.Customer_ID + success_url + decline_url + sitesecuritytimestamp + site_sec_pwd;//;
                    string stringToHash = hash_site_security;// "GBP100.00test_site123452019-05-28 14:22:37PASSWORD";
                    byte[] bytesToHash = Encoding.UTF8.GetBytes(stringToHash);
                    SHA256Managed sha256 = new SHA256Managed();
                    byte[] hashBytes = sha256.ComputeHash(bytesToHash);
                    string hashString = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
                    return hashString;
                    //using (System.Security.Cryptography.SHA256 sha256Hash = System.Security.Cryptography.SHA256.Create())
                    //{
                    //    // ComputeHash - returns byte array  
                    //    byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(hash_site_security));

                    //    // Convert byte array to a string   
                    //    StringBuilder builder = new StringBuilder();
                    //    for (int i = 0; i < bytes.Length; i++)
                    //    {
                    //        builder.Append(bytes[i].ToString("x2"));
                    //    }
                    //    hash_site_security_encrypt = builder.ToString();
                    //    return hash_site_security_encrypt;
                    //}

                    /*
                     sitesecuritytimestamp =“2019-05-28 14:22:37”
                    1. sitereference,
                    2. currencyiso3a,
                    3. mainamount,
                    4. orderreference,
                    5. stextraurlredirectfields,
                    6. successfulurlredirect,
                    7. declinedurlredirect
                    setpayurl = "online-pay.html?ReferenceNo=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) 
                    + "&mainamount=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(setpayamt.ToString(), true)) 
                    + "&CustID=" + HttpUtility.UrlEncode(obj.Customer_ID) 
                    + "&LoginName=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["Email_ID"]), true)) 
                    + "&ClientID=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.Client_ID.ToString(), true)) + "";

                    if (queryString["ReferenceNo"] != "" && queryString["ReferenceNo"] != null) {
                        $("#orderreference").val(queryString["ReferenceNo"]);
                    }
                    else { window.location = "Review-Transfer"; }
                    if (queryString["mainamount"] != "" && queryString["mainamount"] != null) {
                        $("#mainamount").val(queryString["mainamount"]);
                    } else { window.location = "Review-Transfer"; }

                    var extrapara = "?PayGateway=" + encodeURIComponent(sessionStorage.getItem("PayGateway_ID")) + "";

                    if (queryString["CustID"] != "" && queryString["CustID"] != null) {
                        $("#stextraurlredirectfields").val(queryString["CustID"]);
                        extrapara = extrapara + "&C_ID=" + encodeURIComponent(queryString["CustID"]) + "";
                    } else { window.location = "Review-Transfer"; }

                    if (queryString["LoginName"] != "" && queryString["LoginName"] != null) {
                        if (extrapara != "" && extrapara != null)
                            extrapara = extrapara + "&LoginName=" + queryString["LoginName"] + "";
                        else
                            extrapara = "?LoginName=" + queryString["LoginName"] + "";
                    }
                    if (queryString["ClientID"] != "" && queryString["ClientID"] != null) {
                        if (extrapara != "" && extrapara != null)
                            extrapara = extrapara + "&Client_ID=" + queryString["ClientID"] + "";
                        else
                            extrapara = "?Client_ID=" + queryString["ClientID"] + "";
                    }
                    if (extrapara != "" && extrapara != null)
                        extrapara = extrapara + "&BID=" + sessionStorage.getItem("Branch_ID") + "";
                    else
                        extrapara = "?BID=" + sessionStorage.getItem("Branch_ID") + "";

                    var link = window.location.href.split("online-pay")[0];// + "/app/";
                    //var link_ = link.substring(0, link.length - 1);

                    if (queryString["OnlineFlag"] != "" && queryString["OnlineFlag"] != null || queryString["OnlineFlag"] == 0) {
                        if (extrapara != "" && extrapara != null)
                            extrapara = extrapara + "&OnlineFlag=0&mainamount=" + $("#mainamount").val() + "&currency=" + queryString["currency"] + "";
                        else
                            extrapara = "?OnlineFlag=0&mainamount=" + $("#mainamount").val() + "&currency=" + queryString["currency"] + "";

                        $("#successfulurlredirect").val(link + "card-payment-success" + extrapara + "");
                    }
                    else {
                        $("#successfulurlredirect").val(link + "pay-by-card-success.html" + extrapara + "");
                    }
                    $("#errorurlredirect").val(link + "Review-Transfer.html" + extrapara + "");
                    $("#declinedurlredirect").val(link + "Review-Transfer.html" + extrapara + "");

                    */

                }
            }
            catch (Exception ex)
            {
                //Model.ErrorLog objError = new Model.ErrorLog();
                //objError.User = new Model.User();
                //objError.Error = "Api : TrustPaymentHashError --" + ex.ToString();
                //objError.Date = DateTime.Now;
                //objError.User_ID = 1;
                //objError.Client_ID = obj.Client_ID;
                //objError.Function_Name = "TrustPaymentHashing";
                //Service.srvErrorLog srvError = new Service.srvErrorLog();
                //srvError.Create(objError);

                CompanyInfo.InsertErrorLogTracker("Api : TrustPaymentHashError --" + ex.ToString(), 0, 0, 0, 0, "TrustPaymentHashing", Convert.ToInt32(obj.Branch_ID), Convert.ToInt32(obj.Client_ID), "", _srvTransactionContext);

                return hash_site_security;
            }
            return hash_site_security;
        }

        #endregion

        #region Payvyne
        public class Payvyne
        {
            public string access_token { get; set; }
            public string token_type { get; set; }
            public string expires_in { get; set; }
            public string scope { get; set; }
            public string merchantId { get; set; }
            public string iss { get; set; }
            public string merchant { get; set; }
            public string mfa_required { get; set; }
            public string iat { get; set; }
            public string jti { get; set; }
            public string redirectUrl { get; set; }
            public string requestId { get; set; }
            public string mediaType { get; set; }
            public string sub { get; set; }
            public string paymentStatus { get; set; }
            public string paymentId { get; set; }
            public string exp { get; set; }
            public string status { get; set; }
            public string id { get; set; }
        }

        public string PayvyneToken(DataTable dtt)
        {
            HttpContext context = null;
            int api_id = 0; string apiurl = "", apiuser = "", apipass = "";
            string merchant_id = "";
            try
            {
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                    //accesscode = Convert.ToString(dtt.Rows[0]["ProfileID"]);//unique code
                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    merchant_id = Convert.ToString(o["merchant_id"]);
                }
                ServicePointManager.Expect100Continue = true;
                /*ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Tls12
                       | SecurityProtocolType.Ssl3;*/

                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Tls12
                       ;

                var client = new RestClient(apiurl + "oauth/token");
                client.Timeout = -1;
                var request = new RestRequest(Method.POST);
                request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
                request.AddParameter("grant_type", "client_credentials");
                request.AddParameter("client_id", apiuser);
                request.AddParameter("client_secret", apipass);
                IRestResponse response = client.Execute(request);
                Console.WriteLine(response.Content);
                Payvyne json = Newtonsoft.Json.JsonConvert.DeserializeObject<Payvyne>(response.Content);

                return json.access_token;
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("App side Pay Vyne Token error : " + ex.ToString(), 0, 0, 0, 0, "PayvyneToken", 0, 0, "Send Money", context);
                return "";
            }
        }
        public string PayvyneTest(Model.Transaction obj, string custISOCode)
        {
            HttpContext context = null;
            try
            {
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", 1);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", merchant_id = "", destinationAccount = "";
                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                string linkExpireTime = "0"; string CallBackURL = "";
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                    //accesscode = Convert.ToString(dtt.Rows[0]["ProfileID"]);//unique code
                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    merchant_id = Convert.ToString(o["merchant_id"]);
                    destinationAccount = Convert.ToString(o["destinationAccount"]);
                    linkExpireTime = Convert.ToString(o["expiretime"]);
                    CallBackURL = Convert.ToString(o["returnurl"]);
                }
                double transfer_cost = obj.TotalAmount;
                if (obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                {
                    if (Convert.ToString(obj.Wallet_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }

                if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                {
                    if (Convert.ToString(obj.Discount_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }
                ServicePointManager.Expect100Continue = true;
                /*ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Tls12
                       | SecurityProtocolType.Ssl3;*/
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Tls12
                      ;
                string token = PayvyneToken(dtt);
                //var client = new RestClient(apiurl + "v1/payments");
                var client = new RestClient(apiurl + "v1/partners/payments/");
                client.Timeout = -1;
                var request = new RestRequest(Method.POST);
                request.AddHeader("Authorization", "Bearer " + token);
                request.AddHeader("Content-Type", "application/json");

                merchant_id = "\"" + Convert.ToString(merchant_id).Trim() + "\"";
                string transfer_cost_ = "\"" + Convert.ToString(transfer_cost) + "\"";
                transfer_cost_ = "\"" + Convert.ToString(transfer_cost.ToString("0.00")) + "\"";
                string FromCurrency_Code = "\"" + Convert.ToString(obj.FromCurrency_Code) + "\"";
                destinationAccount = "\"" + Convert.ToString(destinationAccount) + "\"";
                CallBackURL = "\"" + CallBackURL + "\"";
                string description = "\"" + obj.Username + "\"";
                string customerReference = "\"" + obj.Customer_Reference + "\"";
                string merchantReference = "\"" + obj.ReferenceNo + "\"";
                string countryCode = "\"" + custISOCode + "\"";

                var body = @"{" +
                        @"    ""merchantId"":   " + merchant_id + "   ," +
                        @"    ""amount"":  " + transfer_cost_ + "  ," + "\n" +
                        @"    ""currency"": " + FromCurrency_Code + "," + "\n" +
                        @"    ""destinationAccount"": " + destinationAccount + "," + "\n" +
                        @"    ""callbackUrl"": " + CallBackURL + "," + "\n" +
                        @"    ""mediaType"": ""URL""," + "\n" +
                        @"    ""countries"": [" + countryCode + "]," + "\n" +
                        @"    ""description"": " + description + "," + "\n" +
                        @"    ""customerReference"": " + customerReference + "," + "\n" +
                        @"    ""merchantReference"": " + merchantReference + "," + "\n" +
                        @"    ""expiration"": {" + "\n" +
                        @"        ""unit"": ""MINUTES""," + "\n" +
                        @"        ""value"": " + linkExpireTime + " " + "\n" +
                        @"    }" + "\n" +
                        @"}";


                obj.Worldpay_Response = body;
                obj.Delete_Status = 0;
                SaveRequestResponse(obj);
                CompanyInfo.InsertActivityLogDetails("App - Payvyne Request Generate Payment url:" + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "PayvyneTest" + obj.ReferenceNo, obj.CB_ID, obj.Client_ID, "PayvynePaymentRedirect", context);
                request.AddParameter("application/json", body, ParameterType.RequestBody);
                IRestResponse response = client.Execute(request);
                Payvyne json = Newtonsoft.Json.JsonConvert.DeserializeObject<Payvyne>(response.Content);
                CompanyInfo.InsertActivityLogDetails("App - Payvyne Response Generate Payment url:" + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "PayvyneTest" + obj.ReferenceNo, obj.CB_ID, obj.Client_ID, "PayvynePaymentRedirect", context);
                obj.Worldpay_Response = response.Content;
                obj.Delete_Status = 1;
                SaveRequestResponse(obj);
                obj.Delete_Status = 0;
                string URL = json.redirectUrl;

                string unique_id = json.requestId; ;
                try
                {
                    MySqlCommand cmd1 = new MySqlCommand("Insert_instantbankingpartner_ref");
                    cmd1.CommandType = CommandType.StoredProcedure;
                    cmd1.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                    cmd1.Parameters.AddWithValue("_payinpartnernumber", unique_id);
                    cmd1.Parameters.AddWithValue("_apiid", 1);
                    cmd1.Parameters.AddWithValue("_record_datetime", obj.Record_Insert_DateTime);
                    int msg = db_connection.ExecuteNonQueryProcedure(cmd1);
                }
                catch (Exception ex)
                {
                    CompanyInfo.InsertActivityLogDetails("PayvynePaymentRedirect Error while save ref number: " + ex.ToString() + "  and unique_id : " + unique_id, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "PayvyneTest", obj.CB_ID, obj.Client_ID, "Send Money", context);
                }
                return URL;
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("App side PayvyneTest error : " + ex.ToString(), 0, 0, 0, 0, "PayvyneTest", 0, 0, "Send Money", context);
                return "";
            }
        }

        public DataTable PayvynePaymentStatus(Model.Transaction obj)
        {
            DataTable dt = new DataTable();
            try
            {
                dt.Columns.Add("paymentStatus", typeof(string));
                dt.Columns.Add("paymentId", typeof(string));
                dt.Columns.Add("cardpayment", typeof(string));
                dt.Columns.Add("cardtransaction", typeof(string));
                string payvyne_id = obj.payvyne_trans_id;
                string bankGatewayId = obj.bankGateway;
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", bankGatewayId);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "";
                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                string merchant_id = "";
                string apptoken = "", secretapi = ""; string judostatus = "", judoreference = "", judoResponse = "", paybycard = "F";
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                    //accesscode = Convert.ToString(dtt.Rows[0]["ProfileID"]);//unique code
                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    try
                    {
                        Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                        merchant_id = Convert.ToString(o["merchant_id"]);
                    }
                    catch (Exception exx) { }
                    apptoken = apiuser;
                    secretapi = apipass;
                }
                //string token = PayvyneToken(dtt);
                ServicePointManager.Expect100Continue = true;
                /* ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                        | SecurityProtocolType.Tls11
                        | SecurityProtocolType.Tls12
                        | SecurityProtocolType.Ssl3;*/

                if (bankGatewayId == "7")
                {
                    string leatherbackStatus = LeatherbackPaymentStatus(dt, obj);

                    dt.Rows.Add(leatherbackStatus, payvyne_id);

                }

                if (bankGatewayId == "8")
                {
                    Service.srvSendMoney srv = new Service.srvSendMoney();
                    DataTable li_ecommpay = srv.GetTrustPayStatus(obj);//
                    string transactionStatus = "", responseStatus = "";
                    if (li_ecommpay != null)
                    {
                        if (li_ecommpay.Rows.Count > 0)
                        {
                            transactionStatus = Convert.ToString(li_ecommpay.Rows[0][1]);
                            if (transactionStatus == "100") { transactionStatus = "SETTLED"; }
                            else if (transactionStatus == "10") { transactionStatus = "PROCESSING"; }
                            else if (transactionStatus == "3" || transactionStatus == "30000" || transactionStatus == "70000"
                                || transactionStatus == "71000" || transactionStatus == "60010" || transactionStatus == "60034" || transactionStatus == "99999")
                            {
                                //    If the errorcode is “30000”, this indicates a field error.
                                //    If the errorcode is “70000”, this indicates a payment was declined by your bank.
                                //    If the errorcode is “71000”, this indicates a soft decline was returned by the card issuer.
                                //    If the errorcode is “60010”, “60034” or “99999”, there has been a problem processing the request and the final status is not known.
                                transactionStatus = "FAILED";
                            }
                            else { transactionStatus = "FAILED"; }
                            responseStatus = Convert.ToString(li_ecommpay.Rows[0][3]);
                            // return successfully transactionStatus="10";
                        }
                    }

                    if (transactionStatus != "FAILED")
                    {
                       // using (MySqlConnection con = new MySqlConnection(_MTS.WebConnSetting()))

                        using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))                            
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                string where = "";
                                if (obj.Client_ID != null && obj.Client_ID != -1)
                                {
                                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                                }
                                if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                {
                                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                }
                                if (Customer_ID > 0)
                                {
                                    where = where + " and  aa.customer_Id=" + Customer_ID;
                                }
                                cmd1.Parameters.AddWithValue("_whereclause", where);
                                DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                //using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                //{
                                //    cmd.CommandType = CommandType.StoredProcedure;
                                //    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                //    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                //    cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                //    int status = cmd.ExecuteNonQuery();
                                //}
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                try
                                {
                                    if (con.State != ConnectionState.Closed)
                                        con.Close();
                                }
                                catch { }
                            }
                        }
                    }
                    obj.Worldpay_Response = "Trustpay Payment Response :" + responseStatus;
                    obj.Delete_Status = 1;
                    SaveRequestResponse(obj);
                    obj.Delete_Status = 0;


                    dt.Rows.Add(transactionStatus, 8);
                }
                if (bankGatewayId == "9")
                {
                    Service.srvSendMoney srv = new Service.srvSendMoney();
                    DataTable li_ecommpay = srv.GetTrueLayerStatus(obj, payvyne_id);
                    string transactionStatus = "", responseStatus = "";
                    if (li_ecommpay != null)
                    {
                        if (li_ecommpay.Rows.Count > 0)
                        {
                            transactionStatus = Convert.ToString(li_ecommpay.Rows[0][0]);

                        }
                    }

                    if (transactionStatus != "succeeded" && transactionStatus != "pending" && transactionStatus != "awaiting 3ds result" &&
                                transactionStatus != "awaiting merchant auth" && transactionStatus != "awaiting redirect result" &&
                                transactionStatus != "awaiting customer action" && transactionStatus != "awaiting clarification"
                                && transactionStatus != "awaiting confirmation" && transactionStatus != "awaiting customer")
                    {
                        using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                string where = "";
                                if (obj.Client_ID != null && obj.Client_ID != -1)
                                {
                                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                                }
                                if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                {
                                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                }
                                if (Customer_ID > 0)
                                {
                                    where = where + " and  aa.customer_Id=" + Customer_ID;
                                }
                                cmd1.Parameters.AddWithValue("_whereclause", where);
                                DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                    int status = cmd.ExecuteNonQuery();
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                try
                                {
                                    if (con.State != ConnectionState.Closed)
                                        con.Close();
                                }
                                catch { }
                            }
                        }
                    }
                    obj.Worldpay_Response = "Ecommpay Payment Response :" + responseStatus;
                    obj.Delete_Status = 1;
                    SaveRequestResponse(obj);
                    obj.Delete_Status = 0;

                    if (transactionStatus == "succeeded") { transactionStatus = "SETTLED"; }
                    if (transactionStatus == "pending") { transactionStatus = "COMPLETED"; }

                    dt.Rows.Add(transactionStatus, 2);
                }
                if (bankGatewayId == "10")//fire //rushikesh
                {
                    Service.srvSendMoney srv = new Service.srvSendMoney();
                    DataTable li_fire = srv.GetFireStatus(obj, payvyne_id);
                    string transactionStatus = "", responseStatus = "";
                    if (li_fire != null)
                    {
                        if (li_fire.Rows.Count > 0)
                        {
                            transactionStatus = Convert.ToString(li_fire.Rows[0][0]);

                        }
                    }

                    if (transactionStatus == "NOT_AUTHORISED")
                    {
                        responseStatus = "Failed";
                        using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                string where = "";
                                if (obj.Client_ID != null && obj.Client_ID != -1)
                                {
                                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                                }
                                if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                {
                                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                }
                                if (Customer_ID > 0)
                                {
                                    where = where + " and  aa.customer_Id=" + Customer_ID;
                                }
                                cmd1.Parameters.AddWithValue("_whereclause", where);
                                DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                    int status = cmd.ExecuteNonQuery();
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                try
                                {
                                    if (con.State != ConnectionState.Closed)
                                        con.Close();
                                }
                                catch { }
                            }
                        }
                    }
                    obj.Worldpay_Response = "Fire Payment Response :" + responseStatus;
                    obj.Delete_Status = 1;
                    SaveRequestResponse(obj);
                    obj.Delete_Status = 0;

                    if (transactionStatus == "SETTLED" || transactionStatus == "FUNDS_CONFIRMED") { transactionStatus = "SETTLED"; }
                    if (transactionStatus == "FUNDS_CONFIRMED" ||
                                transactionStatus == "AUTHORISED") { transactionStatus = "COMPLETED"; }

                    dt.Rows.Add(transactionStatus, 2);
                }
                if (bankGatewayId == "11")
                {
                    Service.srvSendMoney srv = new Service.srvSendMoney();
                    DataTable li_fire = srv.GetMTBSStatus(obj, payvyne_id);
                    string transactionStatus = "", responseStatus = "";
                    if (li_fire != null)
                    {
                        if (li_fire.Rows.Count > 0)
                        {
                            transactionStatus = Convert.ToString(li_fire.Rows[0][0]);

                        }
                    }

                    if (transactionStatus.ToLower() == "failed")
                    {
                        responseStatus = "Failed";
                        using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                string where = "";
                                if (obj.Client_ID != null && obj.Client_ID != -1)
                                {
                                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                                }
                                if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                {
                                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                }
                                if (Customer_ID > 0)
                                {
                                    where = where + " and  aa.customer_Id=" + Customer_ID;
                                }
                                cmd1.Parameters.AddWithValue("_whereclause", where);
                                DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                    int status = cmd.ExecuteNonQuery();
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                try
                                {
                                    if (con.State != ConnectionState.Closed)
                                        con.Close();
                                }
                                catch { }
                            }
                        }
                    }
                    obj.Worldpay_Response = "MTBS Payment Response :" + responseStatus;
                    obj.Delete_Status = 1;
                    SaveRequestResponse(obj);
                    obj.Delete_Status = 0;

                    if (transactionStatus.ToLower() == "settled") { transactionStatus = "SETTLED"; }
                    if (transactionStatus.ToLower() == "successful") { transactionStatus = "COMPLETED"; }

                    dt.Rows.Add(transactionStatus, 2);
                }
                if (bankGatewayId == "13")
                {
                    Service.srvSendMoney srv = new Service.srvSendMoney();
                    DataTable li_fire = srv.GetPaycellerStatus(obj, payvyne_id);
                    string transactionStatus = "", responseStatus = "";
                    if (li_fire != null)
                    {
                        if (li_fire.Rows.Count > 0)
                        {
                            transactionStatus = Convert.ToString(li_fire.Rows[0][0]);

                        }
                    }

                    if (transactionStatus.ToLower() == "failed")
                    {
                        responseStatus = "Failed";
                        using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                string where = "";
                                if (obj.Client_ID != null && obj.Client_ID != -1)
                                {
                                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                                }
                                if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                {
                                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                }
                                if (Customer_ID > 0)
                                {
                                    where = where + " and  aa.customer_Id=" + Customer_ID;
                                }
                                cmd1.Parameters.AddWithValue("_whereclause", where);
                                DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                    int status = cmd.ExecuteNonQuery();
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                try
                                {
                                    if (con.State != ConnectionState.Closed)
                                        con.Close();
                                }
                                catch { }
                            }
                        }
                    }
                    obj.Worldpay_Response = "Payceller Payment Response :" + responseStatus;
                    obj.Delete_Status = 1;
                    SaveRequestResponse(obj);
                    obj.Delete_Status = 0;

                    if (transactionStatus == "SETTLED") { transactionStatus = "SETTLED"; }
                    else if (transactionStatus == "PENDING" || transactionStatus == "PROCESSING" || transactionStatus == "COMPLETED") { transactionStatus = "COMPLETED"; }
                    else if (transactionStatus == "EXPIRED" || transactionStatus == "CANCELLED" || transactionStatus == "FAILED") { transactionStatus = "FAILED"; }

                    dt.Rows.Add(transactionStatus, 2);
                }
                if (bankGatewayId == "5")
                {
                    Service.srvSendMoney srv = new Service.srvSendMoney();
                    DataTable li_ecommpay = srv.GetEcommpayPayStatus(obj);
                    string transactionStatus = "", responseStatus = "";
                    if (li_ecommpay != null)
                    {
                        if (li_ecommpay.Rows.Count > 0)
                        {
                            transactionStatus = Convert.ToString(li_ecommpay.Rows[0][1]);
                            responseStatus = Convert.ToString(li_ecommpay.Rows[0][3]);
                        }
                    }

                    if (transactionStatus != "success" && transactionStatus != "processing" && transactionStatus != "awaiting 3ds result" &&
                                transactionStatus != "awaiting merchant auth" && transactionStatus != "awaiting redirect result" &&
                                transactionStatus != "awaiting customer action" && transactionStatus != "awaiting clarification"
                                && transactionStatus != "awaiting confirmation" && transactionStatus != "awaiting customer")
                    {
                        using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                string where = "";
                                if (obj.Client_ID != null && obj.Client_ID != -1)
                                {
                                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                                }
                                if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                {
                                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                }
                                if (Customer_ID > 0)
                                {
                                    where = where + " and  aa.customer_Id=" + Customer_ID;
                                }
                                cmd1.Parameters.AddWithValue("_whereclause", where);
                                DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                    int status = cmd.ExecuteNonQuery();
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                try
                                {
                                    if (con.State != ConnectionState.Closed)
                                        con.Close();
                                }
                                catch { }
                            }
                        }
                    }
                    obj.Worldpay_Response = "Ecommpay Payment Response :" + responseStatus;
                    obj.Delete_Status = 1;
                    SaveRequestResponse(obj);
                    obj.Delete_Status = 0;

                    if (transactionStatus == "success") { transactionStatus = "SETTLED"; }
                    if (transactionStatus == "processing" || transactionStatus == "awaiting 3ds result" ||
                                transactionStatus == "awaiting merchant auth" || transactionStatus == "awaiting redirect result" ||
                                transactionStatus == "awaiting customer action" || transactionStatus == "awaiting clarification"
                                || transactionStatus == "awaiting confirmation" || transactionStatus == "awaiting customer") { transactionStatus = "COMPLETED"; }

                    dt.Rows.Add(transactionStatus, 2);
                }


                if (bankGatewayId == "4")
                { // VolumePay
                    string applicationId = "";
                    if (dtt.Rows.Count > 0)
                    {
                        string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                        Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                        applicationId = Convert.ToString(o["applicationId"]);
                    }

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                        | SecurityProtocolType.Tls11
                        | SecurityProtocolType.Tls12
                         ;

                    string statusAPIURL = apipass;
                    var clientVolumePay = new RestClient(statusAPIURL + payvyne_id + "/status");
                    clientVolumePay.Timeout = -1;
                    var requestVolumePay = new RestRequest(Method.GET);
                    requestVolumePay.AddHeader("x-application-id", applicationId);
                    IRestResponse responseVolumePay = clientVolumePay.Execute(requestVolumePay);
                    CompanyInfo.InsertActivityLogDetails("Get Status VolumePay StatusRequest URL. : " + statusAPIURL + payvyne_id + "/status"+ "  and applicationId:"+ applicationId, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "PayvynePaymentStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                    CompanyInfo.InsertActivityLogDetails("Get Status VolumePay Request Ref No. : " + payvyne_id, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "PayvynePaymentStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                    CompanyInfo.InsertActivityLogDetails("Get Status VolumePay Request URL Response: " + responseVolumePay.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "PayvynePaymentStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                    string paymentId = "", volumestatus = "";
                    if (responseVolumePay != null)
                    {
                        string resresult = responseVolumePay.Content;
                        if (resresult != "" && resresult != null)
                        {
                            Newtonsoft.Json.Linq.JObject obj2 = Newtonsoft.Json.Linq.JObject.Parse(responseVolumePay.Content);
                            paymentId = Convert.ToString(obj2["paymentId"]);
                            volumestatus = Convert.ToString(obj2["paymentStatus"]).ToUpper();
                        }
                    }

                    if ((volumestatus != "AWAITING_AUTHORIZATION" || volumestatus != "PENDING" || volumestatus != "COMPLETED") && volumestatus != "")
                    {
                        using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                string where = "";
                                if (obj.Client_ID != null && obj.Client_ID != -1)
                                {
                                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                                }
                                if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                {
                                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                }
                                if (Customer_ID > 0)
                                {
                                    where = where + " and  aa.customer_Id=" + Customer_ID;
                                }
                                cmd1.Parameters.AddWithValue("_whereclause", where);
                                DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                    //int status = cmd.ExecuteNonQuery();
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                try
                                {
                                    if (con.State != ConnectionState.Closed)
                                        con.Close();
                                }
                                catch { }
                            }
                        }
                    }
                    obj.Worldpay_Response = "VolumePay Payment Response :" + responseVolumePay.Content;
                    obj.Delete_Status = 1;
                    SaveRequestResponse(obj);
                    obj.Delete_Status = 0;
                    dt.Rows.Add(volumestatus, payvyne_id);
                }

                if (bankGatewayId == "3")
                { //JudoPay Code Get Status                    
                    var client2 = new RestClient(apiurl + payvyne_id);
                    client2.Timeout = -1;
                    CompanyInfo.InsertActivityLogDetails("App - Judopay Request. Payment ID : " + payvyne_id, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "JudoPayPaymentStatus", _srvTransactionContext);
                    var request2 = new RestRequest(Method.GET);
                    request2.AddHeader("accept", "application/json");
                    request2.AddHeader("Api-Version", "6.20");
                    var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(apptoken + ":" + secretapi);
                    string auth = System.Convert.ToBase64String(plainTextBytes);
                    request2.AddHeader("Authorization", "Basic " + auth);

                    IRestResponse response2 = client2.Execute(request2);
                    CompanyInfo.InsertActivityLogDetails("Get Status JudoPay Request Ref No. : " + payvyne_id, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "PayvynePaymentStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                    CompanyInfo.InsertActivityLogDetails("Get Status JudoPay Request URL Response: " + response2.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "PayvynePaymentStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                    if (response2 != null)
                    {
                        string resresult = judoResponse = response2.Content;
                        if (resresult != "" && resresult != null)
                        {
                            Newtonsoft.Json.Linq.JObject obj2 = Newtonsoft.Json.Linq.JObject.Parse(response2.Content);
                            judostatus = Convert.ToString(obj2["status"]);
                            judoreference = Convert.ToString(obj2["reference"]);
                            string cardData = "";
                            try
                            {
                                cardData = Convert.ToString(obj2["receipt"]["cardDetails"]);
                                if (cardData != "")
                                {
                                    dt.Rows.Add(judostatus, judoreference, "T", obj.ReferenceNo);

                                    using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                                    {
                                        if (con.State != ConnectionState.Open)
                                            con.Open();
                                        try
                                        {
                                            MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            string where = "";
                                            if (obj.Client_ID != null && obj.Client_ID != -1)
                                            {
                                                where = where + " and aa.Client_ID = " + obj.Client_ID;
                                            }
                                            if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                            {
                                                where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                            }
                                            if (Customer_ID > 0)
                                            {
                                                where = where + " and  aa.customer_Id=" + Customer_ID;
                                            }
                                            cmd1.Parameters.AddWithValue("_whereclause", where);
                                            DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                            using (cmd = new MySqlCommand("change_paymentid_TempTransaction", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                                int status = cmd.ExecuteNonQuery();
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                        finally
                                        {
                                            try
                                            {
                                                if (con.State != ConnectionState.Closed)
                                                    con.Close();
                                            }
                                            catch { }
                                        }
                                    }


                                    return dt;
                                }
                            }
                            catch { }

                        }
                    }
                }

                if (bankGatewayId == "1")
                {
                    string token = PayvyneToken(dtt);
                    var client = new RestClient(apiurl + "v1/partners/payments/" + payvyne_id);
                    CompanyInfo.InsertActivityLogDetails("App - Payvyne Request. Payment ID : " + payvyne_id, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "PayvynePaymentStatus", _srvTransactionContext);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    request.AddHeader("Authorization", "Bearer " + token);
                    request.AddHeader("Content-Type", "application/json");
                    IRestResponse response = client.Execute(request);
                    Console.WriteLine(response.Content);
                    Payvyne json = Newtonsoft.Json.JsonConvert.DeserializeObject<Payvyne>(response.Content);
                    CompanyInfo.InsertActivityLogDetails("App - Payvyne Response. " + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "PayvynePaymentStatus", _srvTransactionContext);
                    if (json.status != "SETTLED" && json.status != "COMPLETED" && json.status != "PROCESSING")
                    {
                        using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                string where = "";
                                if (obj.Client_ID != null && obj.Client_ID != -1)
                                {
                                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                                }
                                if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                {
                                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                }
                                if (Customer_ID > 0)
                                {
                                    where = where + " and  aa.customer_Id=" + Customer_ID;
                                }
                                cmd1.Parameters.AddWithValue("_whereclause", where);
                                DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                    int status = cmd.ExecuteNonQuery();
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                try
                                {
                                    if (con.State != ConnectionState.Closed)
                                        con.Close();
                                }
                                catch { }
                            }
                        }
                    }
                    obj.Worldpay_Response = "Payvyne Payment Response :" + response.Content;
                    obj.Delete_Status = 1;
                    SaveRequestResponse(obj);
                    obj.Delete_Status = 0;
                    dt.Rows.Add(json.status, json.id);
                }

                if (bankGatewayId == "3")
                {   // Judo Pay Code
                    if (judostatus != "Open" || judostatus != "Success")
                    {
                        using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                        {
                            if (con.State != ConnectionState.Open)
                                con.Open();
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("View_IncompleteTransfer");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                string where = "";
                                if (obj.Client_ID != null && obj.Client_ID != -1)
                                {
                                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                                }
                                if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                                {
                                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                                }
                                if (Customer_ID > 0)
                                {
                                    where = where + " and  aa.customer_Id=" + Customer_ID;
                                }
                                cmd1.Parameters.AddWithValue("_whereclause", where);
                                DataTable ds = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                    //int status = cmd.ExecuteNonQuery();
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                try
                                {
                                    if (con.State != ConnectionState.Closed)
                                        con.Close();
                                }
                                catch { }
                            }
                        }
                    }
                    obj.Worldpay_Response = "JudoPay Payment Response :" + judoResponse;
                    obj.Delete_Status = 1;
                    SaveRequestResponse(obj);
                    obj.Delete_Status = 0;
                    dt.Rows.Add(judostatus, judoreference);
                }

                return dt;
            }
            catch (Exception ex)
            {
              
                CompanyInfo.InsertErrorLogTracker("Api : Payvyne --" + ex.ToString(), 0, 0, 0, 0, "Payvyne", Convert.ToInt32(obj.Branch_ID), Convert.ToInt32(obj.Client_ID), "", _srvTransactionContext);

                dt.Rows.Add("err", "0");
                return dt;
            }
        }

        public int SaveRequestResponse(Model.Transaction t)
        {
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            t.Record_Insert_DateTime = CompanyInfo.gettime(t.Client_ID, Customer_ID.ToString(), t.Country_ID, _srvTransactionContext);
            MySqlCommand cmd1 = new MySqlCommand("Insert_RequestResponse");
            cmd1.CommandType = CommandType.StoredProcedure;
            cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
            cmd1.Parameters.AddWithValue("_ReferenceNo", t.ReferenceNo);
            cmd1.Parameters.AddWithValue("_Remark", t.Worldpay_Response);
            cmd1.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            cmd1.Parameters.AddWithValue("_status", t.Delete_Status);// 0 for request and 1 for response
            cmd1.Parameters.AddWithValue("_CB_ID", t.CB_ID);
            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", t.Record_Insert_DateTime);
            int msg = db_connection.ExecuteNonQueryProcedure(cmd1);
            return msg;
        }
        #endregion

        #region Nuvei
        public DataTable GetNuveiLink(Model.Transaction t, string refNumber, double sendingAmt, int PType_ID, HttpContext context)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("RedirectURL", typeof(string));
            string masterLogText = " App side ";
            try
            {
                DataTable dtc = CompanyInfo.get(t.Client_ID, context);

                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 6");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add(1, "");
                }
                else
                {
                    string orderNumber = refNumber;
                    var topSecret = refNumber;

                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]).Trim();
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]).Trim();
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);

                    string redirect_success_url = Convert.ToString(o["redirect_success_url"]).Trim();
                    string redirect_fail_url = Convert.ToString(o["redirect_fail_url"]).Trim();
                    string redirect_pending_url = Convert.ToString(o["redirect_pending_url"]).Trim();
                    string redirect_back_url = Convert.ToString(o["redirect_back_url"]).Trim();

                    string merchantId = Convert.ToString(o["merchantId"]).Trim();
                    string siteId = Convert.ToString(o["siteId"]).Trim();
                    string SecretKey = Convert.ToString(o["secretKey"]).Trim();
                    string user_token_id = Convert.ToString(o["user_token_id"]).Trim();
                    string version = Convert.ToString(o["version"]).Trim();
                    string notify_url = Convert.ToString(o["notify_url"]).Trim();
                    double transFees = 0.00;
                    try
                    {
                        transFees = Convert.ToDouble(t.Transfer_Fees);
                    }
                    catch { }

                    //string payment_amount = Convert.ToString(sendingAmt);
                    string payment_amount = Convert.ToString((sendingAmt + transFees));

                    string force_payment_method = Convert.ToString(o["force_payment_method"]);
                    string payment_currency = Convert.ToString(t.FromCurrency_Code).Trim();

                    /*if (PType_ID == 6)
                    {
                        redirect_success_url = redirect_success_url.Replace("pay-by-card-success.html", "Success.html");
                        redirect_fail_url = redirect_fail_url.Replace("pay-by-card-success.html", "Success.html");
                    }*/
                    //


                    string Customer_Reference = Convert.ToString(CompanyInfo.Decrypt(t.Customer_ID, true));
                    MySqlCommand _cmdcustd = new MySqlCommand("GetCustDetailsByID");
                    _cmdcustd.CommandType = CommandType.StoredProcedure;
                    _cmdcustd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmdcustd.Parameters.AddWithValue("_whereclause", " and ID = 6   ");
                    _cmdcustd.Parameters.AddWithValue("cust_ID", Convert.ToInt32(Customer_Reference));
                    DataTable dcustd = db_connection.ExecuteQueryDataTableProcedure(_cmdcustd);
                    string custEmailAddress = Convert.ToString(dcustd.Rows[0]["Email_ID"]).Trim();

                    DateTime currentDateTime = DateTime.Parse(t.Record_Insert_DateTime);// DateTime.Now;
                    string time_stamp = currentDateTime.ToString("yyyy-mm-dd.HH:mm:ss");

                    string isocode = "GB";
                    MySqlCommand cmdp = new MySqlCommand("getiso_data");
                    cmdp.CommandType = CommandType.StoredProcedure;
                    cmdp.Parameters.AddWithValue("_Cust_ID", Customer_Reference);
                    DataTable dtiso = db_connection.ExecuteQueryDataTableProcedure(cmdp);
                    if (dtiso.Rows.Count > 0)
                    {
                        try
                        {
                            isocode = Convert.ToString(dtiso.Rows[0]["isocode"]);
                        }
                        catch (Exception ex) { }
                    }

                    string checksum = sha256_hash(SecretKey + refNumber + merchantId + siteId + payment_amount + payment_currency + payment_amount + payment_currency + user_token_id + time_stamp + version + notify_url + redirect_success_url + redirect_fail_url + "1" + custEmailAddress + redirect_pending_url + redirect_back_url + isocode);
                    string pymtBaseURL = apiurl + "merchant_unique_id=" + refNumber + "&merchant_id=" + merchantId + "&merchant_site_id=" + siteId + "&total_amount=" + payment_amount + "&item_name_1=" + payment_currency + "&item_amount_1=" + payment_amount + "&currency=" + payment_currency + "&user_token_id=" + user_token_id + "&time_stamp=" + time_stamp + "&version=" + version + "&notify_url=" + notify_url + "&success_url=" + redirect_success_url + "&error_url=" + redirect_fail_url + "&item_quantity=1&email=" + custEmailAddress + "&pending_url=" + redirect_pending_url + "&back_url=" + redirect_back_url + "&isocode=" + isocode + "&checksum=" + checksum;

                    CompanyInfo.InsertActivityLogDetails(masterLogText + "Nuvei Request URL : " + pymtBaseURL, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetNuveiLink", t.CB_ID, t.Client_ID, "Send Money", context);

                    dt.Rows.Add("", pymtBaseURL);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails(masterLogText + " Nuvei PayLink Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetNuveiLink", t.CB_ID, t.Client_ID, "Send Money", context);
            }

            return dt;
        }
        public static String sha256_hash(String value)
        {
            StringBuilder Sb = new StringBuilder();

            using (SHA256 hash = SHA256Managed.Create())
            {
                Encoding enc = Encoding.UTF8;
                Byte[] result = hash.ComputeHash(enc.GetBytes(value));

                foreach (Byte b in result)
                    Sb.Append(b.ToString("x2"));
            }

            return Sb.ToString();
        }
        #endregion

        #region Ecommpay
        public DataTable GetECommpayOrderNumberDetails(Model.Transaction t, string whereclause, string decrypted)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Success", typeof(string));
            dt.Columns.Add("Client_ID", typeof(string));
            dt.Columns.Add("User_ID", typeof(string));
            dt.Columns.Add("CB_ID", typeof(string));
            dt.Columns.Add("transactionref", typeof(string));
            dt.Columns.Add("mainamount", typeof(string));
            dt.Columns.Add("currency", typeof(string));

            try
            {
                MySqlCommand _cmd = new MySqlCommand("View_transfers");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_whereclause", whereclause);

                DataTable dtorderDetails = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                string CB_ID = "", User_ID = "", Client_ID = "", mainamount = "", currency = "";
                if (dtorderDetails.Rows.Count > 0)
                {
                    CB_ID = Convert.ToString(dtorderDetails.Rows[0]["CB_ID"]);
                    User_ID = Convert.ToString(dtorderDetails.Rows[0]["User_ID"]);
                    Client_ID = Convert.ToString(dtorderDetails.Rows[0]["Client_ID"]);
                    decrypted = Convert.ToString(decrypted);
                    mainamount = Convert.ToString(Convert.ToDouble(dtorderDetails.Rows[0]["AmountInGBP"]) + Convert.ToDouble(dtorderDetails.Rows[0]["Transfer_Fees"]));
                    currency = Convert.ToString(dtorderDetails.Rows[0]["FromCurrency_Code"]);
                    dt.Rows.Add(true, Client_ID, User_ID, CB_ID, decrypted, mainamount, currency);
                }
                CompanyInfo.InsertActivityLogDetails("Ecommpay GetOrderNumberDetails whereclause: " + whereclause + " decrypted:" + decrypted, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetOrderNumberDetails", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Ecommpay GetOrderNumberDetails Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetOrderNumberDetails", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                dt.Rows.Add(false, "", "", "", "", "", "");
            }

            return dt;
        }
        public DataTable GetEcommpayPayStatus(Model.Transaction t)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("Status", typeof(string));
            dt.Columns.Add("order_status", typeof(string));
            dt.Columns.Add("responsestatus", typeof(string));
            dt.Columns.Add("mainamount", typeof(string));
            dt.Columns.Add("currency", typeof(string));
            try
            {
                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway_Ecommpay");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 5");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add(false, "", "", "");
                }
                else
                {
                    string refNumber = t.ReferenceNo;

                    if (refNumber == null)
                    {
                        try { refNumber = t.payvyne_trans_id; } catch (Exception ex) { refNumber = null; }
                    }

                    // Get this information for customer pay through url
                    string whereclause = " and aa.ReferenceNo = '" + refNumber + "' ";
                    Service.srvSendMoney srv = new Service.srvSendMoney();
                    DataTable dtorderDetails = srv.GetECommpayOrderNumberDetails(t, whereclause, refNumber);
                    string mainamount = "", currency = "";
                    if (dtorderDetails.Rows.Count > 0)
                    {
                        mainamount = Convert.ToString(dtorderDetails.Rows[0]["mainamount"]);
                        currency = Convert.ToString(dtorderDetails.Rows[0]["currency"]);
                    }

                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string SecretKey = Convert.ToString(o["SecretKey"]);
                    int ProjectId = Convert.ToInt32(o["ProjectId"]);
                    string redirect_success_url = Convert.ToString(o["redirect_success_url"]);
                    string redirect_fail_url = Convert.ToString(o["redirect_fail_url"]);
                    string payment_description = Convert.ToString("Test");
                    int ProjectIdforBank = Convert.ToInt32(o["ProjectIdforBank"]);

                    /*
                    string customer_account_id = Convert.ToString(o["customer_account_id"]);
                    string customer_country = Convert.ToString(o["customer_country"]);
                    string recipient_country = Convert.ToString(o["recipient_country"]);
                    string customer_city = Convert.ToString(o["customer_city"]);
                    string customer_first_name = Convert.ToString(o["customer_first_name"]);
                    string customer_last_name = Convert.ToString(o["customer_last_name"]);
                    string customer_ip_address = Convert.ToString(o["customer_ip_address"]);
                    string customer_address = Convert.ToString(o["customer_address"]);
                    string recepient_wallet_owner = Convert.ToString(o["recepient_wallet_owner"]);
                    string recepient_wallet_id = Convert.ToString(o["recepient_wallet_id"]);
                    */

                    #region codeforLatestFiedlds

                    string customer_account_id = "";
                    string customer_country = "";
                    string recipient_country = "";
                    string customer_city = "";
                    string customer_first_name = "";
                    string customer_last_name = "";
                    string customer_ip_address = Convert.ToString(o["customer_ip_address"]);
                    string customer_address = "";
                    string recepient_wallet_owner = "";
                    string recepient_wallet_id = "";

                    int custCityId = 0; int Country_ID = 0; int benfId = 0; int benfCountry = 0;
                    string baseCurrency = ""; int walletId = 0; int branchId = 0, clientId = 0;

                    MySqlCommand cmd_selectorderDetail = new MySqlCommand(" SELECT tmp.*, cust.City_ID, cust.Country_ID,cust.WireTransfer_ReferanceNo as Cust_Reference FROM temporarytransaction_table tmp, " +
                        " customer_registration cust where tmp.ReferenceNo = '" + t.ReferenceNo + "'and tmp.Delete_Status = 0 and tmp.Customer_ID = cust.Customer_ID limit 1 ");
                    int Customer_ID = 0;
                    Double payment_amountvalue = 0.0;
                    DataTable idscustdetails = db_connection.ExecuteQueryDataTableProcedure(cmd_selectorderDetail);
                    if (idscustdetails.Rows.Count > 0)
                    {
                        // Update code as per Ecommpay team
                        int PaymentType_ID = Convert.ToInt32(idscustdetails.Rows[0]["PaymentType_ID"]);
                        if (PaymentType_ID == 6)
                        {
                            ProjectId = ProjectIdforBank;
                        }

                        custCityId = Convert.ToInt32(idscustdetails.Rows[0]["City_ID"]);
                        Customer_ID = Convert.ToInt32(idscustdetails.Rows[0]["Customer_ID"]);
                        Country_ID = Convert.ToInt32(idscustdetails.Rows[0]["Country_ID"]);
                        branchId = Convert.ToInt32(idscustdetails.Rows[0]["CB_ID"]);
                        clientId = Convert.ToInt32(idscustdetails.Rows[0]["Client_ID"]);
                        benfId = Convert.ToInt32(idscustdetails.Rows[0]["Beneficiary_ID"]);
                        baseCurrency = Convert.ToString(idscustdetails.Rows[0]["FromCurrency_Code"]);
                        customer_account_id = Convert.ToString(idscustdetails.Rows[0]["Cust_Reference"]).Trim();
                        payment_amountvalue = ((Convert.ToDouble(idscustdetails.Rows[0]["AmountInGBP"]) + Convert.ToDouble(idscustdetails.Rows[0]["Transfer_Fees"])) * 100);
                    }

                    // Find  currencyId by using Currency code
                    MySqlCommand cmd_selectCurrencyCode = new MySqlCommand(" SELECT Currency_ID FROM currency_master " +
                        "  where Currency_Code = '" + baseCurrency + "'and  Delete_Status = 0   ");
                    DataTable currencydetails = db_connection.ExecuteQueryDataTableProcedure(cmd_selectCurrencyCode);
                    int Currency_ID = 0;
                    if (currencydetails.Rows.Count > 0)
                    {
                        Currency_ID = Convert.ToInt32(currencydetails.Rows[0]["Currency_ID"]);
                    }

                    // Get Wallet Id Details
                    int Wallet_ID = 0;
                    /*    MySqlCommand cmd_selectWalletCurrency = new MySqlCommand(" SELECT Wallet_Reference,Wallet_ID FROM wallet_table " +
                            "  where Currency_ID = '" + Currency_ID + "' and Delete_Status = 0 and Customer_ID= "+ Customer_ID + " and Branch_ID= " + branchId + " and Client_ID = "+ clientId + " "); */

                    MySqlCommand cmd_selectWalletCurrency = new MySqlCommand(" SELECT Wallet_Reference,Wallet_ID FROM wallet_table " +
                       "  where Currency_ID = '" + Currency_ID + "' and Delete_Status = 0 and Customer_ID= " + Customer_ID + " and Client_ID = " + clientId + " ");

                    DataTable walletdetails = db_connection.ExecuteQueryDataTableProcedure(cmd_selectWalletCurrency);

                    if (walletdetails.Rows.Count > 0)
                    {
                        Wallet_ID = Convert.ToInt32(walletdetails.Rows[0]["Wallet_ID"]);
                    }




                    MySqlCommand _cmd_custdetails = new MySqlCommand("GetWallets");
                    _cmd_custdetails.CommandType = CommandType.StoredProcedure;
                    whereclause = " and w.Wallet_ID = " + Wallet_ID + "  and w.Delete_Status=0  ";
                    _cmd_custdetails.Parameters.AddWithValue("_whereclause", whereclause);
                    DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd_custdetails);
                    if (dtwallets.Rows.Count > 0)
                    {

                        customer_first_name = Convert.ToString(dtwallets.Rows[0]["First_Name"]).Trim();
                        customer_last_name = Convert.ToString(dtwallets.Rows[0]["Last_Name"]).Trim();
                        recepient_wallet_owner = customer_first_name + " " + customer_last_name;
                        recepient_wallet_id = Convert.ToString(dtwallets.Rows[0]["Wallet_Reference"]).Trim();
                        customer_address = Convert.ToString(dtwallets.Rows[0]["Nationality"]).Trim();
                    }

                    try
                    {
                        MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                        _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                        string whereclauseiso = " and Country_ID = " + Country_ID + "  ";
                        _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                        _cmd_isoCode.Parameters.AddWithValue("_Client_ID", t.Client_ID);

                        DataTable dtISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                        if (dtISO.Rows.Count > 0)
                        {
                            customer_country = Convert.ToString(dtISO.Rows[0]["ISO_Code"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    try
                    {
                        MySqlCommand _cmd_custCity = new MySqlCommand("sp_select_city_detailsbyid");
                        _cmd_custCity.CommandType = CommandType.StoredProcedure;
                        string whereclausecustCity = "   " + custCityId + "  ";
                        _cmd_custCity.Parameters.AddWithValue("_whereclause", whereclausecustCity);

                        DataTable dtcustCity = db_connection.ExecuteQueryDataTableProcedure(_cmd_custCity);
                        if (dtcustCity.Rows.Count > 0)
                        {
                            customer_city = Convert.ToString(dtcustCity.Rows[0]["City_Name"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    try
                    {
                        MySqlCommand _cmd_benDetails = new MySqlCommand("Beneficiary_Search");
                        _cmd_benDetails.CommandType = CommandType.StoredProcedure;
                        string whereclausebeneficiaryCountry = " and bb.Beneficiary_ID =  " + benfId;
                        _cmd_benDetails.Parameters.AddWithValue("_whereclause", whereclausebeneficiaryCountry);
                        DataTable dtBenCountryId = db_connection.ExecuteQueryDataTableProcedure(_cmd_benDetails);
                        if (dtBenCountryId.Rows.Count > 0)
                        {
                            benfCountry = Convert.ToInt32(dtBenCountryId.Rows[0]["Beneficiary_Country_ID"]);
                        }
                    }
                    catch (Exception ex) { }

                    try
                    {
                        MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                        _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                        string whereclauseiso = " and Country_ID = " + benfCountry + "  ";
                        _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                        _cmd_isoCode.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        DataTable dtbenISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                        if (dtbenISO.Rows.Count > 0)
                        {
                            recipient_country = Convert.ToString(dtbenISO.Rows[0]["ISO_Code"]).Trim();
                        }
                    }
                    catch (Exception ex) { }
                    #endregion


                    payment_description = Convert.ToString(refNumber).Trim();

                    string sessionTimeoutSecs = Convert.ToString(o["sessionTimeoutSecs"]);
                    string requestGuvapay = Convert.ToString(o["request"]);
                    string bank = Convert.ToString(o["bank"]);

                    string payment_currency = baseCurrency;
                    string payment_amount = Convert.ToString(payment_amountvalue);
                    string force_payment_method = Convert.ToString(o["force_payment_method"]);
                    string statusapiurl = Convert.ToString(o["apiurl"]);

                    string Customer_Reference = Convert.ToString(Customer_ID); //t.Customer_Reference.ToString().Trim();

                    //string url = apiurl + "?status=T&PType_ID=0&ProjectId=" + ProjectId + "&SecretKey=" + SecretKey + "&paymentId=" + refNumber.Trim() + "&redirect_success_url=" + redirect_success_url + "&payment_amount=" + payment_amount + "&payment_currency=" + payment_currency + "&customer_id=" + Customer_Reference + "&redirect_fail_url=" + redirect_fail_url + "&force_payment_method=" + force_payment_method + "&payment_description=" + payment_description + "&customer_account_id=" + customer_account_id + "&customer_country=" + customer_country + "&customer_city=" + customer_city + "&customer_first_name=" + customer_first_name + "&customer_last_name=" + customer_last_name + "&customer_ip_address=" + customer_ip_address + "&customer_address=" + customer_address + "&recepient_wallet_owner=" + recepient_wallet_owner + "&recepient_wallet_id=" + recepient_wallet_id + "&recipient_country=" + recipient_country;
                    string url = apiurl + "?status=T&PType_ID=0&ProjectId=" + ProjectId + "&SecretKey=" + SecretKey + "&paymentId=" + refNumber.Trim() + "&redirect_success_url=" + redirect_success_url + "&payment_amount=" + payment_amount + "&payment_currency=" + "test" + "&customer_id=" + "test" + "&redirect_fail_url=" + "test" + "&force_payment_method=" + "test" + "&payment_description=" + "test" + "&customer_account_id=" + "test" + "&customer_country=" + "test" + "&customer_city=" + "test" + "&customer_first_name=" + "test" + "&customer_last_name=" + "test" + "&customer_ip_address=" + "test" + "&customer_address=" + "test" + "&recepient_wallet_owner=" + "test" + "&recepient_wallet_id=" + "test" + "&recipient_country=" + "test" + "&ProjectIdforBank=" + ProjectIdforBank;
                    CompanyInfo.InsertActivityLogDetails("Ecommpay Status Request URL  : " + url, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEcommpayPayStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                    var client = new RestClient(url);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    var body = @"";
                    request.AddParameter("application/json", body, ParameterType.RequestBody);
                    IRestResponse response = client.Execute(request);
                    Console.WriteLine(response.Content);
                    CompanyInfo.InsertActivityLogDetails("Ecommpay Status Request URL Response: " + response.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEcommpayPayStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                    string signature = response.Content.Trim();

                    refNumber = "\"" + Convert.ToString(refNumber).Trim() + "\"";
                    //refNumber =   Convert.ToString(refNumber).Trim()  ;

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var clientstatus = new RestClient(statusapiurl);
                    clientstatus.Timeout = -1;
                    var requeststatus = new RestRequest(Method.POST);
                    requeststatus.AddHeader("Content-Type", "application/json");
                    requeststatus.AddHeader("Accept", "application/json");
                    var bodystatus = @"{" + "\n" +
                    @"    ""general"": {" + "\n" +
                    @"        ""payment_id"": " + refNumber + "," + "\n" +
                    @"        ""project_id"": " + ProjectId + "," + "\n" +
                    @"        ""signature"": " + signature + "                    " + "\n" +
                    @"    }" + "\n" +
                    @"}";
                    requeststatus.AddParameter("application/json", bodystatus, ParameterType.RequestBody);
                    IRestResponse responsestatus = clientstatus.Execute(requeststatus);
                    CompanyInfo.InsertActivityLogDetails("Ecommpay Status Request body : " + bodystatus, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEcommpayPayStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                    CompanyInfo.InsertActivityLogDetails("Ecommpay Status response  : " + responsestatus.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEcommpayPayStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                    string transactionStatus = "";
                    if (responsestatus != null)
                    {
                        string resresultstatus = responsestatus.Content;
                        if (resresultstatus != "" && resresultstatus != null)
                        {
                            Newtonsoft.Json.Linq.JObject obj = Newtonsoft.Json.Linq.JObject.Parse(responsestatus.Content);
                            transactionStatus = Convert.ToString(obj["payment"]["status"]);
                        }
                    }

                    dt.Rows.Add(true, transactionStatus, transactionStatus, responsestatus.Content, mainamount, currency);
                }
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Ecommpay Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "Send-Insert Transfer", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                if (dt.Rows.Count <= 0)
                {
                    dt.Rows.Add(false, "", "", "", "", "");
                }
            }
            return dt;

        }

        public DataTable GetTrustPayStatus(Model.Transaction t)
        {
            HttpContext context = null;
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("Status", typeof(string));
            dt.Columns.Add("order_status", typeof(string));
            dt.Columns.Add("responsestatus", typeof(string));
            dt.Columns.Add("mainamount", typeof(string));
            dt.Columns.Add("currency", typeof(string));
            try
            {
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", t.bankGateway);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiuser = "", apipass = "", accesscode = "", reference = "", currency = "", sitereference = "", merchantName = "";
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add(false, "", "", "");
                }
                else
                {
                    string refNumber = t.ReferenceNo;

                    if (refNumber == null)
                    {
                        try { refNumber = t.payvyne_trans_id; } catch (Exception ex) { refNumber = null; }
                    }

                    // Get this information for customer pay through url
                    string whereclause = " and aa.ReferenceNo = '" + refNumber + "' ";
                    Service.srvSendMoney srv = new Service.srvSendMoney();
                    DataTable dtorderDetails = srv.GetECommpayOrderNumberDetails(t, whereclause, refNumber);
                    string mainamount = "";
                    if (dtorderDetails.Rows.Count > 0)
                    {
                        mainamount = Convert.ToString(dtorderDetails.Rows[0]["mainamount"]);
                        currency = Convert.ToString(dtorderDetails.Rows[0]["currency"]);
                    }

                    api_id = Convert.ToInt32(d.Rows[0]["bank_api_id"]);//8
                    string apiurl = Convert.ToString(d.Rows[0]["API_URL"]);//https://webservices.securetrading.net/json/
                    apiuser = Convert.ToString(d.Rows[0]["UserName"]);//ws@kmoney.co.uk
                    apipass = Convert.ToString(d.Rows[0]["Password"]);//x7g![!Lbrf4!

                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    reference = Convert.ToString(t.ReferenceNo);
                    currency = Convert.ToString(o["currencyiso3a"]);
                    sitereference = Convert.ToString(o["sitereference"]);

                    #region codeforLatestFiedlds

                    string customer_account_id = "";
                    string customer_country = "";
                    string recipient_country = "";
                    string customer_city = "";
                    string customer_first_name = "";
                    string customer_last_name = "";
                    string customer_ip_address = Convert.ToString(o["customer_ip_address"]);
                    string customer_address = "";
                    string recepient_wallet_owner = "";
                    string recepient_wallet_id = "";

                    int custCityId = 0; int Country_ID = 0; int benfId = 0; int benfCountry = 0;
                    string baseCurrency = ""; int walletId = 0; int branchId = 0, clientId = 0;

                    MySqlCommand cmd_selectorderDetail = new MySqlCommand(" SELECT tmp.*, cust.City_ID, cust.Country_ID,cust.WireTransfer_ReferanceNo as Cust_Reference FROM temporarytransaction_table tmp, " +
                        " customer_registration cust where tmp.ReferenceNo = '" + t.ReferenceNo + "'and tmp.Delete_Status = 0 and tmp.Customer_ID = cust.Customer_ID limit 1 ");
                    int Customer_ID = 0;
                    Double payment_amountvalue = 0.0;
                    DataTable idscustdetails = db_connection.ExecuteQueryDataTableProcedure(cmd_selectorderDetail);
                    if (idscustdetails.Rows.Count > 0)
                    {
                        // Update code as per Ecommpay team
                        int PaymentType_ID = Convert.ToInt32(idscustdetails.Rows[0]["PaymentType_ID"]);
                        if (PaymentType_ID == 6)
                        {
                            // ProjectId = ProjectIdforBank;
                        }

                        custCityId = Convert.ToInt32(idscustdetails.Rows[0]["City_ID"]);
                        Customer_ID = Convert.ToInt32(idscustdetails.Rows[0]["Customer_ID"]);
                        Country_ID = Convert.ToInt32(idscustdetails.Rows[0]["Country_ID"]);
                        branchId = Convert.ToInt32(idscustdetails.Rows[0]["CB_ID"]);
                        clientId = Convert.ToInt32(idscustdetails.Rows[0]["Client_ID"]);
                        benfId = Convert.ToInt32(idscustdetails.Rows[0]["Beneficiary_ID"]);
                        baseCurrency = Convert.ToString(idscustdetails.Rows[0]["FromCurrency_Code"]);
                        customer_account_id = Convert.ToString(idscustdetails.Rows[0]["Cust_Reference"]).Trim();
                        payment_amountvalue = ((Convert.ToDouble(idscustdetails.Rows[0]["AmountInGBP"]) + Convert.ToDouble(idscustdetails.Rows[0]["Transfer_Fees"])) * 100);
                    }

                    // Find  currencyId by using Currency code
                    MySqlCommand cmd_selectCurrencyCode = new MySqlCommand(" SELECT Currency_ID FROM currency_master " +
                        "  where Currency_Code = '" + baseCurrency + "'and  Delete_Status = 0   ");
                    DataTable currencydetails = db_connection.ExecuteQueryDataTableProcedure(cmd_selectCurrencyCode);
                    int Currency_ID = 0;
                    if (currencydetails.Rows.Count > 0)
                    {
                        Currency_ID = Convert.ToInt32(currencydetails.Rows[0]["Currency_ID"]);
                    }

                    // Get Wallet Id Details
                    int Wallet_ID = 0;
                    /*    MySqlCommand cmd_selectWalletCurrency = new MySqlCommand(" SELECT Wallet_Reference,Wallet_ID FROM wallet_table " +
                            "  where Currency_ID = '" + Currency_ID + "' and Delete_Status = 0 and Customer_ID= "+ Customer_ID + " and Branch_ID= " + branchId + " and Client_ID = "+ clientId + " "); */

                    MySqlCommand cmd_selectWalletCurrency = new MySqlCommand(" SELECT Wallet_Reference,Wallet_ID FROM wallet_table " +
                       "  where Currency_ID = '" + Currency_ID + "' and Delete_Status = 0 and Customer_ID= " + Customer_ID + " and Client_ID = " + clientId + " ");

                    DataTable walletdetails = db_connection.ExecuteQueryDataTableProcedure(cmd_selectWalletCurrency);

                    if (walletdetails.Rows.Count > 0)
                    {
                        Wallet_ID = Convert.ToInt32(walletdetails.Rows[0]["Wallet_ID"]);
                    }




                    MySqlCommand _cmd_custdetails = new MySqlCommand("GetWallets");
                    _cmd_custdetails.CommandType = CommandType.StoredProcedure;
                    whereclause = " and w.Wallet_ID = " + Wallet_ID + "  and w.Delete_Status=0  ";
                    _cmd_custdetails.Parameters.AddWithValue("_whereclause", whereclause);
                    DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd_custdetails);
                    if (dtwallets.Rows.Count > 0)
                    {

                        customer_first_name = Convert.ToString(dtwallets.Rows[0]["First_Name"]).Trim();
                        customer_last_name = Convert.ToString(dtwallets.Rows[0]["Last_Name"]).Trim();
                        recepient_wallet_owner = customer_first_name + " " + customer_last_name;
                        recepient_wallet_id = Convert.ToString(dtwallets.Rows[0]["Wallet_Reference"]).Trim();
                        customer_address = Convert.ToString(dtwallets.Rows[0]["Nationality"]).Trim();
                    }

                    try
                    {
                        MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                        _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                        string whereclauseiso = " and Country_ID = " + Country_ID + "  ";
                        _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                        _cmd_isoCode.Parameters.AddWithValue("_Client_ID", t.Client_ID);

                        DataTable dtISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                        if (dtISO.Rows.Count > 0)
                        {
                            customer_country = Convert.ToString(dtISO.Rows[0]["ISO_Code"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    try
                    {
                        MySqlCommand _cmd_custCity = new MySqlCommand("sp_select_city_detailsbyid");
                        _cmd_custCity.CommandType = CommandType.StoredProcedure;
                        string whereclausecustCity = "   " + custCityId + "  ";
                        _cmd_custCity.Parameters.AddWithValue("_whereclause", whereclausecustCity);

                        DataTable dtcustCity = db_connection.ExecuteQueryDataTableProcedure(_cmd_custCity);
                        if (dtcustCity.Rows.Count > 0)
                        {
                            customer_city = Convert.ToString(dtcustCity.Rows[0]["City_Name"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    try
                    {
                        MySqlCommand _cmd_benDetails = new MySqlCommand("Beneficiary_Search");
                        _cmd_benDetails.CommandType = CommandType.StoredProcedure;
                        string whereclausebeneficiaryCountry = " and bb.Beneficiary_ID =  " + benfId;
                        _cmd_benDetails.Parameters.AddWithValue("_whereclause", whereclausebeneficiaryCountry);
                        DataTable dtBenCountryId = db_connection.ExecuteQueryDataTableProcedure(_cmd_benDetails);
                        if (dtBenCountryId.Rows.Count > 0)
                        {
                            benfCountry = Convert.ToInt32(dtBenCountryId.Rows[0]["Beneficiary_Country_ID"]);
                        }
                    }
                    catch (Exception ex) { }

                    try
                    {
                        MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                        _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                        string whereclauseiso = " and Country_ID = " + benfCountry + "  ";
                        _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                        _cmd_isoCode.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        DataTable dtbenISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                        if (dtbenISO.Rows.Count > 0)
                        {
                            recipient_country = Convert.ToString(dtbenISO.Rows[0]["ISO_Code"]).Trim();
                        }
                    }
                    catch (Exception ex) { }
                    #endregion


                    // payment_description = Convert.ToString(refNumber).Trim();

                    string sessionTimeoutSecs = Convert.ToString(o["sessionTimeoutSecs"]);
                    string requestGuvapay = Convert.ToString(o["request"]);
                    string bank = Convert.ToString(o["bank"]);

                    string payment_currency = baseCurrency;
                    string payment_amount = Convert.ToString(payment_amountvalue);
                    string force_payment_method = Convert.ToString(o["force_payment_method"]);
                    string statusapiurl = apiurl;

                    string Customer_Reference = Convert.ToString(Customer_ID); //t.Customer_Reference.ToString().Trim();

                    refNumber = "\"" + Convert.ToString(refNumber).Trim() + "\"";
                    //refNumber =   Convert.ToString(refNumber).Trim()  ;//ws@kmoney.co.uk

                    var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(apiuser + ":" + apipass);
                    string auth = System.Convert.ToBase64String(plainTextBytes);
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var clientstatus = new RestClient(apiurl);
                    clientstatus.Timeout = -1;
                    var client = new RestClient(apiurl);
                    //var requeststatus = new RestRequest(Method.POST);



                    var requeststatus = new RestRequest(Method.POST);
                    requeststatus.AddHeader("Content-type", "application/json");
                    requeststatus.AddHeader("Accept", "application/json");


                    //requeststatus.AddHeader("Accept", "application/json");
                    requeststatus.AddHeader("Content-type", "application/json");
                    requeststatus.AddHeader("Authorization", "Basic " + auth);
                    string bodystatus = "{" +
                        "\"alias\": \"" + apiuser + "\"," +
                        "\"version\": \"1.00\"," +
                        "\"request\": [{" +
                            "\"requesttypedescriptions\": [\"TRANSACTIONQUERY\"]," +
                            "\"filter\":{" +
                                "\"sitereference\": [{\"value\":\"" + sitereference + "\"}]," +
                                "\"transactionreference\": [{\"value\":\"" + t.payvyne_trans_id + "\"}]" +
                            "}" +
                        "}]" +
                    "}";
                    requeststatus.AddParameter("application/json", bodystatus, ParameterType.RequestBody);
                    CompanyInfo.InsertActivityLogDetails("Trustpay Status Request body : " + bodystatus, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEcommpayPayStatus", t.CB_ID, t.Client_ID, "Send Money", context);
                    IRestResponse responsestatus = clientstatus.Execute(requeststatus);
                    CompanyInfo.InsertActivityLogDetails("Trustpay Status response  : " + responsestatus.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEcommpayPayStatus", t.CB_ID, t.Client_ID, "Send Money", context);
                    //dynamic json = Newtonsoft.Json.JsonConvert.DeserializeObject(requeststatus.Content);
                    //returnURL = json.response[0].redirecturl;

                    string transactionStatus = "";
                    if (responsestatus != null)
                    {
                        string resresultstatus = responsestatus.Content;
                        if (!string.IsNullOrEmpty(resresultstatus))
                        {
                            Newtonsoft.Json.Linq.JObject obj = Newtonsoft.Json.Linq.JObject.Parse(resresultstatus);
                            var responseArray = (Newtonsoft.Json.Linq.JArray)obj["response"];
                            if (responseArray.Count > 0)
                            {
                                // Check the error code
                                string errorcode = Convert.ToString(responseArray[0]["errorcode"]);
                                if (errorcode == "0")
                                {
                                    var recordsArray = (Newtonsoft.Json.Linq.JArray)responseArray[0]["records"];
                                    if (recordsArray.Count > 0)
                                    {
                                        // Extracting the settle status
                                        transactionStatus = Convert.ToString(recordsArray[0]["settlestatus"]);
                                    }
                                    else
                                    {

                                    }
                                }
                                else
                                {
                                    // Set transactionStatus to the errorcode or handle the error accordingly
                                    transactionStatus = errorcode;
                                }
                            }
                            else
                            {

                            }
                        }
                        else
                        {

                        }
                    }
                    else
                    {

                    }

                    dt.Rows.Add(true, transactionStatus, transactionStatus, responsestatus.Content, mainamount, currency);
                }
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Trustpay Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "Send-Insert Transfer", t.CB_ID, t.Client_ID, "Send Money", context);
                if (dt.Rows.Count <= 0)
                {
                    dt.Rows.Add(false, "", "", "", "", "");
                }
            }
            return dt;

        }

        public DataTable GetEcommpayPayLink(Model.Transaction t, string refNumber, double sendingAmt, int PType_ID, HttpContext context)
        {
            CompanyInfo.InsertActivityLogDetails("Request for  Ecommpay URL generate: ", 0, 0, 0, 0, "GetEcommpayPayLink", 0, 0, "Send Money", context);
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("RedirectURL", typeof(string));

            try
            {
                DataTable dtc = CompanyInfo.get(t.Client_ID, _srvTransactionContext);

                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway_Ecommpay");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 5");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add(1, "");
                }
                else
                {
                    string orderNumber = refNumber;
                    var topSecret = refNumber;
                    string Customer_Reference = Convert.ToString(CompanyInfo.Decrypt(t.Customer_ID, true));
                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string SecretKey = Convert.ToString(o["SecretKey"]);
                    int ProjectId = Convert.ToInt32(o["ProjectId"]);
                    string redirect_success_url = Convert.ToString(o["redirect_success_url"]);
                    string redirect_fail_url = Convert.ToString(o["redirect_fail_url"]);
                    string payment_description = Convert.ToString(o["description"]);

                    string sessionTimeoutSecs = Convert.ToString(o["sessionTimeoutSecs"]);
                    string requestGuvapay = Convert.ToString(o["request"]);
                    string bank = Convert.ToString(o["bank"]);
                    string description = Convert.ToString(o["description"]);
                    string sid = Convert.ToString(o["sid"]);
                    string payment_currency = Convert.ToString(o["payoutcurrency"]);

                    //string customer_id = Convert.ToString(o["customer_id"]);
                    #region codeforLatestFiedlds
                    string customer_account_id = "";
                    string customer_country = "";
                    string recipient_country = "";
                    string customer_city = "";
                    string customer_first_name = "";
                    string customer_last_name = "";
                    string customer_ip_address = Convert.ToString(o["customer_ip_address"]);
                    string customer_address = "";
                    string recepient_wallet_owner = "";
                    string recepient_wallet_id = "";
                    int benfId = Convert.ToInt32(t.Beneficiary_ID);
                    int benfCountry = 0;
                    int custCityId = 0;

                    MySqlCommand _cmd_custdetails = new MySqlCommand("GetWallets");
                    _cmd_custdetails.CommandType = CommandType.StoredProcedure;
                    string whereclause = " and w.Wallet_ID = " + t.Wallet_ID + "  and w.Delete_Status=0  ";
                    _cmd_custdetails.Parameters.AddWithValue("_whereclause", whereclause);
                    DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd_custdetails);
                    if (dtwallets.Rows.Count > 0)
                    {
                        customer_account_id = Convert.ToString(dtwallets.Rows[0]["Cust_Reference"]).Trim();
                        customer_first_name = Convert.ToString(dtwallets.Rows[0]["First_Name"]).Trim();
                        customer_last_name = Convert.ToString(dtwallets.Rows[0]["Last_Name"]).Trim();
                        recepient_wallet_owner = customer_first_name + " " + customer_last_name;
                        recepient_wallet_id = Convert.ToString(dtwallets.Rows[0]["Wallet_Reference"]).Trim();
                        customer_address = Convert.ToString(dtwallets.Rows[0]["Nationality"]).Trim();
                        custCityId = Convert.ToInt32(dtwallets.Rows[0]["City_ID"]);
                    }

                    try
                    {
                        MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                        _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                        string whereclauseiso = " and Country_ID = " + t.Country_ID + "  ";
                        _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                        _cmd_isoCode.Parameters.AddWithValue("_Client_ID", t.Client_ID);

                        DataTable dtISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                        if (dtISO.Rows.Count > 0)
                        {
                            customer_country = Convert.ToString(dtISO.Rows[0]["ISO_Code"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    try
                    {
                        MySqlCommand _cmd_custCity = new MySqlCommand("sp_select_city_detailsbyid");
                        _cmd_custCity.CommandType = CommandType.StoredProcedure;
                        string whereclausecustCity = "   " + custCityId + "  ";
                        _cmd_custCity.Parameters.AddWithValue("_whereclause", whereclausecustCity);

                        DataTable dtcustCity = db_connection.ExecuteQueryDataTableProcedure(_cmd_custCity);
                        if (dtcustCity.Rows.Count > 0)
                        {
                            customer_city = Convert.ToString(dtcustCity.Rows[0]["City_Name"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    try
                    {
                        MySqlCommand _cmd_benDetails = new MySqlCommand("Beneficiary_Search");
                        _cmd_benDetails.CommandType = CommandType.StoredProcedure;
                        string whereclausebeneficiaryCountry = " and bb.Beneficiary_ID =  " + benfId;
                        _cmd_benDetails.Parameters.AddWithValue("_whereclause", whereclausebeneficiaryCountry);
                        DataTable dtBenCountryId = db_connection.ExecuteQueryDataTableProcedure(_cmd_benDetails);
                        if (dtBenCountryId.Rows.Count > 0)
                        {
                            benfCountry = Convert.ToInt32(dtBenCountryId.Rows[0]["Beneficiary_Country_ID"]);
                        }
                    }
                    catch (Exception ex) { }

                    try
                    {
                        MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                        _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                        string whereclauseiso = " and Country_ID = " + benfCountry + "  ";
                        _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                        _cmd_isoCode.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        DataTable dtbenISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                        if (dtbenISO.Rows.Count > 0)
                        {
                            recipient_country = Convert.ToString(dtbenISO.Rows[0]["ISO_Code"]).Trim();
                        }
                    }
                    catch (Exception ex) { }
                    #endregion codeforLatestFiedlds

                    double transFees = 0.00;
                    try
                    {
                        transFees = Convert.ToDouble(t.Transfer_Fees);
                    }
                    catch { }

                    //string payment_amount = Convert.ToString(sendingAmt);
                    string payment_amount = Convert.ToString((sendingAmt + transFees) * 100);

                    // For wallet code
                    double transfer_cost = t.TotalAmount;
                    if (t.Wallet_Perm != null && t.Wallet_Perm != -1)
                    {
                        if (Convert.ToString(t.Wallet_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }
                    if (t.Discount_Perm != null && t.Discount_Perm != -1)
                    {
                        if (Convert.ToString(t.Discount_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }
                    transfer_cost = transfer_cost * 100;
                    payment_amount = Convert.ToString(transfer_cost);

                    string force_payment_method = Convert.ToString(o["force_payment_method"]);
                    payment_currency = Convert.ToString(t.FromCurrency_Code).Trim();


                    if (payment_description.Trim() == "")
                        payment_description = refNumber;

                    int ProjectIdforBank = 0;
                    if (PType_ID == 6)
                    {
                        redirect_success_url = redirect_success_url.Replace("pay-by-card-success.html", "Success.html");
                        redirect_fail_url = redirect_fail_url.Replace("pay-by-card-success.html", "Success.html");
                        ProjectIdforBank = Convert.ToInt32(o["ProjectIdforBank"]);
                    }


                    string url = apiurl + "?status=F&PType_ID=" + PType_ID + "&ProjectId=" + ProjectId + "&SecretKey=" + SecretKey + "&paymentId=" + refNumber + "&redirect_success_url=" + redirect_success_url + "&payment_amount=" + payment_amount + "&payment_currency=" + payment_currency + "&customer_id=" + Customer_Reference + "&redirect_fail_url=" + redirect_fail_url + "&force_payment_method=" + force_payment_method + "&payment_description=" + payment_description + "&customer_account_id=" + customer_account_id + "&customer_country=" + customer_country + "&customer_city=" + customer_city + "&customer_first_name=" + customer_first_name + "&customer_last_name=" + customer_last_name + "&customer_ip_address=" + customer_ip_address + "&customer_address=" + customer_address + "&recepient_wallet_owner=" + recepient_wallet_owner + "&recepient_wallet_id=" + recepient_wallet_id + "&recipient_country=" + recipient_country + "&ProjectIdforBank=" + ProjectIdforBank;
                    CompanyInfo.InsertActivityLogDetails("Ecommpay Request URL : " + url, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEcommpayPayLink", t.CB_ID, t.Client_ID, "Send Money", context);
                    var client = new RestClient(url);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    var body = @"";
                    request.AddParameter("application/json", body, ParameterType.RequestBody);
                    IRestResponse response = client.Execute(request);
                    Console.WriteLine(response.Content);
                    CompanyInfo.InsertActivityLogDetails("Ecommpay Request URL Response: " + response.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEcommpayPayLink", t.CB_ID, t.Client_ID, "Send Money", context);
                    string redirectURL = response.Content.Trim().Replace(@"\", "").Replace(@"""", "");

                    if (Uri.IsWellFormedUriString(redirectURL, UriKind.Absolute))
                        dt.Rows.Add("", redirectURL);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("EcommpayPayLink Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEcommpayPayLink", t.CB_ID, t.Client_ID, "Send Money", context);
            }

            return dt;
        }
        #endregion Ecommpay

        #region judopay
        public string webpaymentJudoPay(string ReferenceNo, string Cust_ReferanceNo, string AmountInGBP, Model.Transaction obj, int apiID)
        {
            string returnURL = "";
            try
            {
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", apiID);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", judoid = "", currency = "";
                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);

                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    judoid = Convert.ToString(o["judoid"]);
                    currency = Convert.ToString(o["currency"]);
                }

                judoid = "\"" + Convert.ToString(judoid).Trim() + "\"";
                currency = "\"" + Convert.ToString(currency).Trim() + "\"";
                ReferenceNo = "\"" + Convert.ToString(ReferenceNo).Trim() + "\"";
                Cust_ReferanceNo = "\"" + Convert.ToString(Cust_ReferanceNo).Trim() + "\"";
                string expiryDate = "\"" + Convert.ToString(DateTime.Today.AddDays(1)) + "\""; ;

                DateTime dt = DateTime.Today.AddDays(1);
                expiryDate = "\"" + dt.ToString("yyyy-MM-dd") + "T16:28:32.8596+00:00" + "\"";


                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Tls12
                       | SecurityProtocolType.Ssl3;

                var client = new RestClient(apiurl);
                client.Timeout = -1;
                var request = new RestRequest(Method.POST);
                var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(apiuser + ":" + apipass);
                string auth = System.Convert.ToBase64String(plainTextBytes);
                request.AddHeader("accept", "application/json");
                request.AddHeader("Api-Version", "6.20");
                request.AddHeader("Authorization", "Basic " + auth);

                var body = @"{" + "\n" +
                            @"  ""judoId"": " + judoid + "," + "\n" +
                            @"  ""yourConsumerReference"": " + Cust_ReferanceNo + "," + "\n" +
                            @"  ""yourPaymentReference"": " + ReferenceNo + ",  " + "\n" +
                            @"  ""currency"": " + currency + "," + "\n" +
                            @"  ""amount"": " + AmountInGBP + "," + "\n" +
                            @"  ""expiryDate"": " + expiryDate + "" + "\n" +
                            @"  " + "\n" +
                            @"}";
                request.AddParameter("application/json", body, ParameterType.RequestBody);
                IRestResponse response = client.Execute(request);
                //Console.WriteLine(response.Content);
                CompanyInfo.InsertActivityLogDetails("JudoPay Request URL: " + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "webpaymentJudoPay", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                CompanyInfo.InsertActivityLogDetails("JudoPay Request URL Response: " + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "webpaymentJudoPay", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                if (response != null)
                {
                    string resresult = response.Content;
                    if (resresult != "" && resresult != null)
                    {
                        Newtonsoft.Json.Linq.JObject obj2 = Newtonsoft.Json.Linq.JObject.Parse(response.Content);
                        returnURL = Convert.ToString(obj2["payByLinkUrl"]) + " " + Convert.ToString(obj2["reference"]);
                    }
                }
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("JudoPay BankTransfer Error : " + ex.ToString(), 0, 0, 0, 0, "Send-Insert Transfer", 0, 0, "Send Money", _srvTransactionContext);
            }
            return returnURL;
        }
        #endregion

        #region volumepay
        public string bankpaymentVolumePay(string ReferenceNo, string Cust_ReferanceNo, string AmountInGBP, Model.Transaction obj, int apiID)
        {
            string returnURL = "";
            try
            {
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", apiID);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", reference = "", currency = "", applicationId = "", merchantName = "";

                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                CompanyInfo.InsertActivityLogDetails("VolumePay Start execution ", obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "bankpaymentVolumePay", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);

                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    reference = Convert.ToString(obj.ReferenceNo);
                    currency = Convert.ToString(o["currency"]);
                    applicationId = Convert.ToString(o["applicationId"]);
                    merchantName = Convert.ToString(o["merchantName"]);
                }

                // Wallet Scenario

                double transfer_cost = obj.TotalAmount;
                if (obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                {
                    if (Convert.ToString(obj.Wallet_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }

                if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                {
                    if (Convert.ToString(obj.Discount_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }
                AmountInGBP = Convert.ToString(transfer_cost);


                string requestdata = "{\r\n    \"applicationId\": \"" + applicationId + "\",\r\n    \"merchantPaymentId\": \"" + obj.ReferenceNo + "\",\r\n    \"merchantPaymentId\": \"" + obj.ReferenceNo + "\",\r\n    \"merchantName\": \"" + merchantName + "\" ,\r\n    \"showCancelButton\":  true  ,\r\n    \"paymentRequest\": {\r\n        \"amount\": " + AmountInGBP + ",\r\n        \"currency\": \"" + currency + "\",\r\n        \"reference\": \"" + reference + "\"\r\n    },\r\n    \"metadata\": {\r\n        \"mydata\": \"myvalue\"\r\n    }\r\n}";

                CompanyInfo.InsertActivityLogDetails("VolumePay Request Data : " + requestdata, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "bankpaymentVolumePay", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                var plainTextBytes = System.Text.Encoding.UTF8.GetBytes("{\r\n    \"applicationId\": \"" + applicationId + "\",\r\n    \"merchantPaymentId\": \"" + obj.ReferenceNo + "\",\r\n    \"merchantPaymentId\": \"" + obj.ReferenceNo + "\",\r\n    \"merchantName\": \"" + merchantName + "\",\r\n    \"showCancelButton\":  true  ,\r\n    \"paymentRequest\": {\r\n        \"amount\": " + AmountInGBP + ",\r\n        \"currency\": \"" + currency + "\",\r\n        \"reference\": \"" + reference + "\"\r\n    },\r\n    \"metadata\": {\r\n        \"mydata\": \"myvalue\"\r\n    }\r\n}");
                CompanyInfo.InsertActivityLogDetails("VolumePay Request URL: " + plainTextBytes, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "bankpaymentVolumePay", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                string base64URL = System.Convert.ToBase64String(plainTextBytes);
                returnURL = apiurl + "?ref=" + base64URL;

                CompanyInfo.InsertActivityLogDetails("VolumePay Request returnURL Response : " + returnURL, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "bankpaymentVolumePay", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);


            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("VolumePay BankTransfer Error : " + ex.ToString(), 0, 0, 0, 0, "Send-Insert Transfer", 0, 0, "Send Money", _srvTransactionContext);
            }
            return returnURL;

        }



        #endregion

        #region Emerchantpay
        public DataTable GetEmerchantpayPaymentStatus(Model.Transaction t, string unique_id,  HttpContext context)
        {
            CompanyInfo.InsertActivityLogDetails("Request for  GetEmerchantpayPaymentStatus status get: ", 0, 0, 0, 0, "GetEmerchantpayPaymentStatus", 0, 0, "Get status", context);
            DataTable dt = new DataTable();
            dt.Columns.Add("responsecode", typeof(string));
            dt.Columns.Add("status", typeof(string));
            try
            {
                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 7");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add("");
                }
                else
                {
                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string auth = Convert.ToString(o["auth"]);

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var client = new RestClient(apiurl + "/reconcile");
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Type", "application/xml");
                    request.AddHeader("Authorization", "Basic " + auth);

                    var body = @"<wpf_reconcile>
                    " + "\n" +
                    @"<unique_id>" + unique_id + "</unique_id>" + "\n" +
                    @"</wpf_reconcile>";

                    request.AddParameter("application/xml", body, ParameterType.RequestBody);
                    CompanyInfo.InsertActivityLogDetails("GetEmerchantpayPaymentStatus Request : " + body, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentStatus", t.CB_ID, t.Client_ID, "Send Money", context);
                    IRestResponse response = client.Execute(request);
                    Console.WriteLine(response.Content);

                    CompanyInfo.InsertActivityLogDetails("GetEmerchantpayPaymentStatus Response : " + response.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentStatus", t.CB_ID, t.Client_ID, "Send Money", context);
                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc = new XmlDocument();
                    xmlDoc.LoadXml(response.Content);
                    XmlNodeList nodeList = xmlDoc.GetElementsByTagName("wpf_payment");
                    string status = "", responsecode = "";

                    foreach (XmlNode node1 in nodeList)
                    {
                        string json = Newtonsoft.Json.JsonConvert.SerializeXmlNode(node1);

                        var obj1 = Newtonsoft.Json.Linq.JObject.Parse(json);
                        status = Convert.ToString(obj1["wpf_payment"]["payment_transaction"]["status"]);
                        responsecode = Convert.ToString(obj1["wpf_payment"]["payment_transaction"]["response_code"]);
                    }
                    dt.Rows.Add(responsecode, status);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("GetEmerchantpayPaymentStatus Error : " + ex.ToString(), 0, 0, 0, 0, "GetEmerchantpayPaymentStatus", 0, 0, "Get status", context);
                dt.Rows.Add("", "");
            }

            return dt;
        }
        public DataTable GetEmerchantpayOrderNumberDetails(Model.Transaction t, string whereclause, string decrypted, HttpContext context)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Success", typeof(string));
            dt.Columns.Add("Client_ID", typeof(string));
            dt.Columns.Add("User_ID", typeof(string));
            dt.Columns.Add("CB_ID", typeof(string));
            dt.Columns.Add("transactionref", typeof(string));
            dt.Columns.Add("mainamount", typeof(string));
            dt.Columns.Add("currency", typeof(string));

            try
            {
                MySqlCommand _cmd = new MySqlCommand("View_transfers");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_whereclause", whereclause);

                DataTable dtorderDetails = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                string CB_ID = "", User_ID = "", Client_ID = "", mainamount = "", currency = "";
                if (dtorderDetails.Rows.Count > 0)
                {
                    CB_ID = Convert.ToString(dtorderDetails.Rows[0]["CB_ID"]);
                    User_ID = Convert.ToString(dtorderDetails.Rows[0]["User_ID"]);
                    Client_ID = Convert.ToString(dtorderDetails.Rows[0]["Client_ID"]);
                    decrypted = Convert.ToString(decrypted);
                    mainamount = Convert.ToString(Convert.ToDouble(dtorderDetails.Rows[0]["AmountInGBP"]) + Convert.ToDouble(dtorderDetails.Rows[0]["Transfer_Fees"]));
                    currency = Convert.ToString(dtorderDetails.Rows[0]["FromCurrency_Code"]);
                    dt.Rows.Add(true, Client_ID, User_ID, CB_ID, decrypted, mainamount, currency);
                }
                CompanyInfo.InsertActivityLogDetails(" GetEmerchantpayOrderNumberDetails whereclause: " + whereclause + " decrypted:" + decrypted, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayOrderNumberDetails", t.CB_ID, t.Client_ID, "Send Money", context);
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails(" GetEmerchantpayOrderNumberDetails Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayOrderNumberDetails", t.CB_ID, t.Client_ID, "Send Money", context);
                dt.Rows.Add(false, "", "", "", "", "", "");
            }

            return dt;
        }
        public DataTable GetEmerchantpayPaymentLink(Model.Transaction t, string refNumber, double sendingAmt, int PType_ID, HttpContext context)
        {
            CompanyInfo.InsertActivityLogDetails("Request for  Emerchantpay URL generate: ", 0, 0, 0, 0, "GetEmerchantpayPaymentLink", 0, 0, "Send Money", context);
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("RedirectURL", typeof(string));
            string payment_subtype = ""; // rushikesh 02-01-25
            string transaction_types = "";// rushikesh 03-01-25
            try
            {
                DataTable dtc = CompanyInfo.get(t.Client_ID, _srvTransactionContext);

                // get Emerchantpay api details here
                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 7");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add(1, "");
                }
                else
                {
                    string orderNumber = refNumber;
                    var topSecret = refNumber;
                    string Customer_Reference = Convert.ToString(CompanyInfo.Decrypt(t.Customer_ID, true));
                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);

                    // string return_success_url = Convert.ToString(o["return_success_url"])+"&ref="+ refNumber;
                    string return_success_url = Convert.ToString(o["return_success_url"]) + "=" + refNumber;
                    string return_failure_url = Convert.ToString(o["return_failure_url"]);
                    string return_cancel_url = Convert.ToString(o["return_cancel_url"]);
                    string notification_url = Convert.ToString(o["notification_url"]);
                    string auth = Convert.ToString(o["auth"]);
                    payment_subtype = Convert.ToString(o["payment_subtype"]);
                    string consumerapiurl = Convert.ToString(o["consumer_api"]);
                    string sessionTimeoutSecs = Convert.ToString(o["sessionTimeoutSecs"]);
                    string requestGuvapay = Convert.ToString(o["request"]);
                    transaction_types = Convert.ToString(o["transaction_types"]);// rushikesh 03-01-25

                    if (t.PType_ID == 3)
                    {
                        transaction_types = "sale3d";
                    }
                    if (t.PType_ID == 10)
                    {
                        transaction_types = "google_pay";
                    }
                    if (t.PType_ID == 11)
                    {
                        transaction_types = "apple_pay";
                    }


                    string payment_currency = "";

                    string custEmailAddress = "", custPostCode = "";
                    string customer_first_name = "";
                    string customer_last_name = "";
                    string customer_address = "";
                    string customer_mobile = "";
                    string customer_zipcode = "", customer_nationality = ""; int custCityId = 0;
                    try
                    {
                        MySqlCommand cmdcustdata = new MySqlCommand("Customer_RegDetails");
                        cmdcustdata.CommandType = CommandType.StoredProcedure;
                        cmdcustdata.Parameters.AddWithValue("_Customer_ID", Customer_Reference);
                        cmdcustdata.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        DataTable dt_custdata = db_connection.ExecuteQueryDataTableProcedure(cmdcustdata);
                        if (dt_custdata.Rows.Count > 0)
                        {
                            custEmailAddress = Convert.ToString(dt_custdata.Rows[0]["Email_ID"]).Trim();
                            custPostCode = Convert.ToString(dt_custdata.Rows[0]["Post_Code"]).Trim();
                            customer_first_name = Convert.ToString(dt_custdata.Rows[0]["First_Name"]).Trim();
                            customer_last_name = Convert.ToString(dt_custdata.Rows[0]["Last_Name"]).Trim();
                            customer_mobile = Convert.ToString(dt_custdata.Rows[0]["Mobile_Number"]).Trim();
                            customer_address = Convert.ToString(dt_custdata.Rows[0]["Street"]).Trim();
                            customer_zipcode = Convert.ToString(dt_custdata.Rows[0]["Post_Code"]).Trim();
                            customer_nationality = Convert.ToString(dt_custdata.Rows[0]["Nationality"]).Trim();
                            custCityId = Convert.ToInt32(dt_custdata.Rows[0]["City_ID"]);
                        }
                    }
                    catch (Exception ex) { }

                    if (customer_address == "" || customer_address == null)
                    {
                        customer_address = customer_nationality;
                    }


                    //string customer_id = Convert.ToString(o["customer_id"]);
                    #region codeforLatestFiedlds

                    string customer_country = "";
                    string customer_city = "";

                    // Select Country ISO Code
                    try
                    {
                        MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                        _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                        string whereclauseiso = " and Country_ID = " + t.Country_ID + "  ";
                        _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                        _cmd_isoCode.Parameters.AddWithValue("_Client_ID", t.Client_ID);

                        DataTable dtISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                        if (dtISO.Rows.Count > 0)
                        {
                            customer_country = Convert.ToString(dtISO.Rows[0]["ISO_Code"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    // Select City Name
                    try
                    {
                        MySqlCommand _cmd_custCity = new MySqlCommand("sp_select_city_detailsbyid");
                        _cmd_custCity.CommandType = CommandType.StoredProcedure;
                        string whereclausecustCity = "   " + custCityId + "  ";
                        _cmd_custCity.Parameters.AddWithValue("_whereclause", whereclausecustCity);

                        DataTable dtcustCity = db_connection.ExecuteQueryDataTableProcedure(_cmd_custCity);
                        if (dtcustCity.Rows.Count > 0)
                        {
                            customer_city = Convert.ToString(dtcustCity.Rows[0]["City_Name"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    #endregion codeforLatestFiedlds

                    double transFees = 0.00;
                    try
                    {
                        transFees = Convert.ToDouble(t.Transfer_Fees);
                    }
                    catch { }

                    //string payment_amount = Convert.ToString(sendingAmt);
                    string payment_amount = Convert.ToString((sendingAmt + transFees) * 100);

                    // For wallet code
                    double transfer_cost = t.TotalAmount;
                    if (t.Wallet_Perm != null && t.Wallet_Perm != -1)
                    {
                        if (Convert.ToString(t.Wallet_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }
                    if (t.Discount_Perm != null && t.Discount_Perm != -1)
                    {
                        if (Convert.ToString(t.Discount_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }

                    
                    if (transfer_cost > 0)
                    {
                        transfer_cost   = transfer_cost * 100;
                        payment_amount = transfer_cost.ToString();
                    }

                    payment_currency = Convert.ToString(t.FromCurrency_Code).Trim();

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    
                    // Emerchant pay create consumer_id
                    var clientconsumer_id = new RestClient(consumerapiurl + "create_consumer/");
                    clientconsumer_id.Timeout = -1;
                    var requestconsumer_id = new RestRequest(Method.POST);
                    requestconsumer_id.AddHeader("Content-Type", "application/xml");
                    requestconsumer_id.AddHeader("Authorization", "Basic " + auth);
                    var bodyconsumer_id = @"<create_consumer_request>
                                            " + "\n" +
                                            @"    <email>" + custEmailAddress + "</email>" + "\n" +
                                            @"    <billing_address>
                                            " + "\n" +
                                            @"      <first_name>" + customer_first_name + "</first_name>" + "\n" +
                                            @"      <last_name>" + customer_last_name + "</last_name>" + "\n" +
                                            @"      <address1></address1>
                                            " + "\n" +
                                            @"      <zip_code></zip_code>
                                            " + "\n" +
                                            @"      <city></city>
                                            " + "\n" +
                                            @"      <neighborhood></neighborhood>
                                            " + "\n" +
                                            @"      <state></state>
                                            " + "\n" +
                                            @"      <country></country>
                                            " + "\n" +
                                            @"    </billing_address>
                                            " + "\n" +
                                            @"    <shipping_address>
                                            " + "\n" +
                                            @"      <first_name></first_name>
                                            " + "\n" +
                                            @"      <last_name></last_name>
                                            " + "\n" +
                                            @"      <address1></address1>
                                            " + "\n" +
                                            @"      <zip_code></zip_code>
                                            " + "\n" +
                                            @"      <city></city>
                                            " + "\n" +
                                            @"      <neighborhood></neighborhood>
                                            " + "\n" +
                                            @"      <state></state>
                                            " + "\n" +
                                            @"      <country></country>
                                            " + "\n" +
                                            @"    </shipping_address>
                                            " + "\n" +
                                            @"  </create_consumer_request>
                                            " + "\n" +
                                            @"  ";
                    requestconsumer_id.AddParameter("application/xml", bodyconsumer_id, ParameterType.RequestBody);
                    CompanyInfo.InsertActivityLogDetails("App create_consumer_request Request : " + bodyconsumer_id, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);
                    IRestResponse responseconsumer_id = clientconsumer_id.Execute(requestconsumer_id);
                    Console.WriteLine(responseconsumer_id.Content);
                    CompanyInfo.InsertActivityLogDetails("App create_consumer_request Response : " + responseconsumer_id.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);

                    XmlDocument xmlDocconsumer_id = new XmlDocument();
                    xmlDocconsumer_id = new XmlDocument();
                    xmlDocconsumer_id.LoadXml(responseconsumer_id.Content);
                    XmlNodeList nodeListconsumer_id = xmlDocconsumer_id.GetElementsByTagName("create_consumer_response");
                    string consumer_id = "";
                    try
                    {
                        foreach (XmlNode node1 in nodeListconsumer_id)
                        {
                            string json = Newtonsoft.Json.JsonConvert.SerializeXmlNode(node1);

                            var obj1 = Newtonsoft.Json.Linq.JObject.Parse(json);
                            consumer_id = Convert.ToString(obj1["create_consumer_response"]["consumer_id"]);
                        }
                    }
                    catch (Exception ex)
                    {
                        CompanyInfo.InsertActivityLogDetails("Emerchantpay create_consumer Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);
                    }

                    if (consumer_id == "")
                    {
                        clientconsumer_id = new RestClient(consumerapiurl + "retrieve_consumer/");
                        clientconsumer_id.Timeout = -1;
                        requestconsumer_id = new RestRequest(Method.POST);
                        requestconsumer_id.AddHeader("Content-Type", "application/xml");
                        requestconsumer_id.AddHeader("Authorization", "Basic " + auth);
                        bodyconsumer_id = @"
                                            " + "\n" +
                                            @"  <?xml version=""1.0"" encoding=""UTF-8""?>
                                            " + "\n" +
                                            @"  <retrieve_consumer_request>
                                            " + "\n" +
                                            @"    <email>" + custEmailAddress + "</email>" + "\n" +
                                            @"  </retrieve_consumer_request>";

                        requestconsumer_id.AddParameter("application/xml", bodyconsumer_id, ParameterType.RequestBody);
                        CompanyInfo.InsertActivityLogDetails("App retrieve_consumer_request Request : " + bodyconsumer_id, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);
                        responseconsumer_id = clientconsumer_id.Execute(requestconsumer_id);
                        Console.WriteLine(responseconsumer_id.Content);
                        CompanyInfo.InsertActivityLogDetails("App retrieve_consumer_request Response : " + responseconsumer_id.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);

                        xmlDocconsumer_id = new XmlDocument();
                        xmlDocconsumer_id = new XmlDocument();
                        xmlDocconsumer_id.LoadXml(responseconsumer_id.Content);
                        nodeListconsumer_id = xmlDocconsumer_id.GetElementsByTagName("retrieve_consumer_response");

                        foreach (XmlNode node1 in nodeListconsumer_id)
                        {
                            string json = Newtonsoft.Json.JsonConvert.SerializeXmlNode(node1);

                            var obj1 = Newtonsoft.Json.Linq.JObject.Parse(json);
                            consumer_id = Convert.ToString(obj1["retrieve_consumer_response"]["consumer_id"]);
                            break;
                        }
                    }

                    var client = new RestClient(apiurl);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Type", "application/xml");
                    request.AddHeader("Authorization", "Basic " + auth);

                    List<string> transactionTypes = transaction_types.Split(',').ToList();


                    StringBuilder transactionTypesBuilder = new StringBuilder();
                    transactionTypesBuilder.AppendLine(@"    <transaction_types>");
                    foreach (string transactionType in transactionTypes)
                    {
                        transactionTypesBuilder.AppendLine(@"        <transaction_type name=""" + transactionType + @"""/>");
                    }
                    transactionTypesBuilder.AppendLine(@"    </transaction_types>");


                    var body =
                                    $@"<wpf_payment>
                            <transaction_id>{refNumber}</transaction_id>
                            <usage>{refNumber}</usage>
                            <payment_subtype>{payment_subtype}</payment_subtype>
                            <description></description>
                            <notification_url>{return_success_url}</notification_url>
                            <return_success_url>{return_success_url}</return_success_url>
                            <return_failure_url>{return_failure_url}</return_failure_url>
                            <return_cancel_url>{return_cancel_url}</return_cancel_url>
                            <amount>{payment_amount}</amount>
                            <currency>{payment_currency}</currency>
                            <customer_email>{custEmailAddress}</customer_email>
                            <customer_phone>{customer_mobile}</customer_phone>
                            <billing_address>
                                <first_name>{customer_first_name}</first_name>
                                <last_name>{customer_last_name}</last_name>
                                <address1>{customer_address}</address1>
                                <zip_code>{customer_zipcode}</zip_code>
                                <city>{customer_city}</city>
                                <state/>
                                <country>{customer_country}</country>
                            </billing_address>
                             {transactionTypesBuilder.ToString()}
                             <consumer_id>{consumer_id}</consumer_id>
                            <remember_card>true</remember_card>
                        </wpf_payment>";

                    //var body = @"<wpf_payment>
                    //            " + "\n" +
                    //            @"    <transaction_id>" + refNumber + "</transaction_id>" + "\n" +
                    //            @"    <usage>" + refNumber + "</usage>" + "\n" +
                    //            @"    <payment_subtype>" + payment_subtype + "</payment_subtype>" + "\n" +
                    //            @"    <description></description>
                    //            " + "\n" +
                    //            @"    <notification_url>" + return_success_url + "</notification_url>" + "\n" +
                    //            @"    <return_success_url>" + return_success_url + "</return_success_url>" + "\n" +
                    //            @"    <return_failure_url>" + return_failure_url + "</return_failure_url>" + "\n" +
                    //            @"    <return_cancel_url>" + return_cancel_url + "</return_cancel_url>" + "\n" +
                    //            @"    <amount>" + payment_amount + "</amount>" + "\n" +
                    //            @"    <currency>" + payment_currency + "</currency>" + "\n" +
                    //            @"    <customer_email>" + custEmailAddress + "</customer_email>" + "\n" +
                    //            @"    <customer_phone>" + customer_mobile + "</customer_phone>" + "\n" +
                    //            @"    <billing_address>
                    //            " + "\n" +
                    //            @"        <first_name>" + customer_first_name + "</first_name>" + "\n" +
                    //            @"        <last_name>" + customer_last_name + "</last_name>" + "\n" +
                    //            @"        <address1>" + customer_address + "</address1>" + "\n" +
                    //            @"        <zip_code>" + customer_zipcode + "</zip_code>" + "\n" +
                    //            @"        <city>" + customer_city + "</city>" + "\n" +
                    //            @"        <state/>
                    //            " + "\n" +
                    //            @"        <country>" + customer_country + "</country>" + "\n" +
                    //            @"    </billing_address>
                    //            " + "\n" +
                    //            @"    <transaction_types>
                    //            " + "\n" +
                    //            @"        <transaction_type name=""sale3d""/>
                    //            " + "\n" +
                    //             @"        <transaction_type name=""google_pay""/>
                    //            " + "\n" +
                    //             @"        <transaction_type name=""apple_pay""/>
                    //            " + "\n" +
                    //            @"    </transaction_types>
                    //            " + "\n" +
                    //            @"    <remember_card>false</remember_card>
                    //            " + "\n" +
                    //            @"</wpf_payment>";

                    request.AddParameter("application/xml", body, ParameterType.RequestBody);
                    CompanyInfo.InsertActivityLogDetails("GetEmerchantpayPaymentLink Request : " + body, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);
                    IRestResponse response = client.Execute(request);
                    Console.WriteLine(response.Content);

                    CompanyInfo.InsertActivityLogDetails("GetEmerchantpayPaymentLink Response : " + response.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);
                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc = new XmlDocument();
                    xmlDoc.LoadXml(response.Content);
                    XmlNodeList nodeList = xmlDoc.GetElementsByTagName("wpf_payment");
                    string redirect_url = "", unique_id = "";
                    foreach (XmlNode node1 in nodeList)
                    {
                        string json = Newtonsoft.Json.JsonConvert.SerializeXmlNode(node1);

                        var obj1 = Newtonsoft.Json.Linq.JObject.Parse(json);
                        string apiStatusReceived = Convert.ToString(obj1["wpf_payment"]["status"]);

                        if (apiStatusReceived == "new")
                        {
                            redirect_url = Convert.ToString(obj1["wpf_payment"]["redirect_url"]);
                            unique_id = Convert.ToString(obj1["wpf_payment"]["unique_id"]);
                            try
                            {
                                MySqlCommand cmd1 = new MySqlCommand("Insert_bankingpartner_ref");
                                cmd1.CommandType = CommandType.StoredProcedure;
                                cmd1.Parameters.AddWithValue("_ReferenceNo", refNumber);
                                cmd1.Parameters.AddWithValue("_payinpartnernumber", unique_id);
                                cmd1.Parameters.AddWithValue("_apiid", 7);
                                cmd1.Parameters.AddWithValue("_record_datetime", t.Record_Insert_DateTime);
                                int msg = db_connection.ExecuteNonQueryProcedure(cmd1);
                            }
                            catch (Exception ex)
                            {
                                CompanyInfo.InsertActivityLogDetails("Emerchantpay Error while save ref number: " + ex.ToString() + "  and unique_id : " + unique_id, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);
                            }

                            break;
                        }
                    }

                    if (redirect_url != "")
                        dt.Rows.Add(0, redirect_url);
                }
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Emerchantpay Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetEmerchantpayPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);
                dt.Rows.Add(1, "");
            }

            return dt;
        }
        #endregion  Emerchantpay


        #region Paywithbank_trustpayment
        //pradip
        public string bankpaymentTrustPay(string ReferenceNo, string Cust_ReferanceNo, string AmountInGBP, Model.Transaction obj, int apiID)
        {
            string returnURL = "";
            HttpContext context = null;
            try
            {

                DataTable dtc = CompanyInfo.get(obj.Client_ID, context);
                string base_url = dtc.Rows[0]["Company_URL_Customer"].ToString();
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", apiID);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", reference = "", currency = "", sitereference = "", merchantName = "";

                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                CompanyInfo.InsertActivityLogDetails("Trust pay Start execution ", obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "bankpaymentTrustPay", obj.CB_ID, obj.Client_ID, "Send Money", context);
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);//8
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);//https://webservices.securetrading.net/json/
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);//ws@kmoney.co.uk
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);//x7g![!Lbrf4!

                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    reference = Convert.ToString(obj.ReferenceNo);
                    currency = Convert.ToString(o["currencyiso3a"]);
                    sitereference = Convert.ToString(o["sitereference"]);
                }
                // Wallet Scenario

                double transfer_cost = obj.TotalAmount;
                if (obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                {
                    if (Convert.ToString(obj.Wallet_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }

                if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                {
                    if (Convert.ToString(obj.Discount_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }
                AmountInGBP = Convert.ToString(transfer_cost);
                double amount = 0;
                if (AmountInGBP != "" && AmountInGBP != null) { amount = Convert.ToDouble(AmountInGBP) * 100; }

                var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(apiuser + ":" + apipass);
                string auth = System.Convert.ToBase64String(plainTextBytes);
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Tls12
                       ;
                var client = new RestClient(apiurl);
                var request = new RestRequest(Method.POST);
                //var request = new RestRequest(Method.POST);
                request.AddHeader("Content-type", "application/json");
                //request.AddHeader("Accept", "application/json");
                request.AddHeader("Authorization", "Basic " + auth);
                var body = @"{" + "\n" +
                @"  ""alias"": """ + apiuser + @"""," + "\n" +
                @"  ""version"": ""1.00""," + "\n" +
                @"  ""request"": [{" + "\n" +
                @"    ""requesttypedescription"": ""AUTH""," + "\n" +
                @"    ""sitereference"": """ + sitereference + @"""," + "\n" +
                @"    ""accounttypedescription"": ""ECOM""," + "\n" +
                @"    ""returnurl"": """ + base_url + @"success.html?trustpaybankapi_id=" + api_id + @"""," + "\n" +
                @"    ""baseamount"": """ + amount + @"""," + "\n" +
                @"    ""currencyiso3a"": """ + obj.FromCurrency_Code + @"""," + "\n" +
                @"    ""paymenttypedescription"": ""ATA""" + "\n" +
                @"  }]" + "\n" +
                @"}";

                request.AddParameter("application/json", body, ParameterType.RequestBody);

                CompanyInfo.InsertActivityLogDetails("trusPay Request returnURL Response : " + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "bankpaymentTrustPay", obj.CB_ID, obj.Client_ID, "Send Money", context);
                IRestResponse response = client.Execute(request);
                //CompanyInfo.InsertActivityLogDetails("trusPay BankTransfer Error : " + response.ErrorException.ToString(), 0, 0, 0, 0, "Send-Insert Transfer", 0, 0, "Send Money");
                CompanyInfo.InsertActivityLogDetails("trusPay Request returnURL Response : " + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "bankpaymentTrustPay", obj.CB_ID, obj.Client_ID, "Send Money", context);
                dynamic json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                string unique_id = json.response[0].transactionreference;

                try
                {
                    MySqlCommand cmd1 = new MySqlCommand("Insert_instantbankingpartner_ref");
                    cmd1.CommandType = CommandType.StoredProcedure;
                    cmd1.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                    cmd1.Parameters.AddWithValue("_payinpartnernumber", unique_id);
                    cmd1.Parameters.AddWithValue("_apiid", 8);
                    cmd1.Parameters.AddWithValue("_record_datetime", obj.Record_Insert_DateTime);
                    int msg = db_connection.ExecuteNonQueryProcedure(cmd1);
                }
                catch (Exception ex)
                {
                    CompanyInfo.InsertActivityLogDetails("trusPay Error while save ref number: " + ex.ToString() + "  and unique_id : " + unique_id, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "PayvyneTest", obj.CB_ID, obj.Client_ID, "Send Money", context);
                }




                returnURL = json.response[0].redirecturl;


            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("trusPay Request returnURL Response : " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "bankpaymenttrusPay", obj.CB_ID, obj.Client_ID, "Send Money", context);
            }
            return returnURL;

        }

        #endregion

        #region Leatherback Pay with Bank
        public string LeatherbackPaymentURL(DataTable dt, Model.Transaction obj, HttpContext context)
        {
            //HttpContext context = null;
            string returnUrl = "";
            try
            {
                obj.Customer = new Model.Customer();
                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                DataTable dtc = CompanyInfo.get(obj.Client_ID, context);
                string Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, context);
                string return_url = dtc.Rows[0]["Company_URL_Customer"].ToString();
                DataTable dtcust = (DataTable)CompanyInfo.getCustomerDetails(obj.Client_ID, Customer_ID);
                CompanyInfo.InsertActivityLogDetails("Leatherback function: ", obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "webpaymentJudoPay", obj.CB_ID, obj.Client_ID, "Send Money", context);
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", 7);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", merchant_id = "", destinationAccount = ""; //int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);

                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);                   
                    obj.CallBackURL = Convert.ToString(o["appurl"]);
                     
                }
                double transfer_cost = obj.TotalAmount;
                if (obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                {
                    if (Convert.ToString(obj.Wallet_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }
                if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                {
                    if (Convert.ToString(obj.Discount_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }
                //CompanyInfo.InsertActivityLogDetails("Leatherback Request apipass: " + apipass, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "Leatherback", obj.CB_ID, obj.Client_ID, "Send Money");
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Tls12
                      ;
                var client = new RestClient(apiurl);
                var request = new RestRequest("/api/payment/payment-link");
                request.Method = Method.POST;
                request.AddHeader("x-api", apipass);
                request.AddHeader("Content-Type", "application/json");
                var body = @"{
" + "\n" +
                @"  ""name"": """ + obj.ReferenceNo + @""",
" + "\n" +
                @"  ""description"": ""Payment for Transaction Reference: " + obj.ReferenceNo + @""",
" + "\n" +
                @"  ""linkType"": 0,
" + "\n" +
                @"  ""amountType"": 0,
" + "\n" +
                @"  ""currencyCode"": ""GBP"",
" + "\n" +
                @"  ""amountInfo"": {
" + "\n" +
                @"    ""currencyCode"": ""GBP"",
" + "\n" +
                @"    ""amount"": " + transfer_cost.ToString("0.00") + @"
" + "\n" +
                @"  }
" + "\n" +
                @"}";
                request.AddParameter("application/json", body, ParameterType.RequestBody);
                CompanyInfo.InsertActivityLogDetails(obj.ReferenceNo + " Leatherback Request step1: " + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "Leatherback", obj.CB_ID, obj.Client_ID, "Send Money", context);
                IRestResponse response = client.Execute(request);
                CompanyInfo.InsertActivityLogDetails(obj.ReferenceNo + " Leatherback Response step1 : " + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "Leatherback", obj.CB_ID, obj.Client_ID, "Send Money", context);
                Console.WriteLine(response.Content);
                Leatherback json = Newtonsoft.Json.JsonConvert.DeserializeObject<Leatherback>(response.Content);
                if (json.value != null)
                {
                    request = new RestRequest("/api/payment/pay/Initiate");
                    request.Method = Method.POST;
                    request.AddHeader("x-api", apipass);
                    request.AddHeader("Content-Type", "application/json");
                    body = @"{
" + "\n" +
                    @"    ""currencyCode"": ""GBP"",
" + "\n" +
                    @"    ""amount"": " + transfer_cost.ToString("0.00") + @",
" + "\n" +
                    @"    ""channel"": ""PayByAccount"",
" + "\n" +
                    @"    ""currency"": ""GBP"",
" + "\n" +
                    @"    ""link"": {
" + "\n" +
                    @"        ""alias"": """ + json.value.alias + @"""
" + "\n" +
                    @"    },
" + "\n" +
                    @"    ""userInformation"": {
" + "\n" +
                    @"        ""firstName"": """ + dtcust.Rows[0]["First_name"] + @""",
" + "\n" +
                    @"        ""lastName"": """ + dtcust.Rows[0]["Last_name"] + @""",
" + "\n" +
                    @"        ""emailAddress"": """ + dtcust.Rows[0]["Email_ID"] + @""",
" + "\n" +
                    @"        ""phone"": """ + dtcust.Rows[0]["Mobile_Number"] + @"""
" + "\n" +
                    @"    },
" + "\n" +
                    @"   ""metaData"": {
" + "\n" +
                    @"         ""return-url"": """ + return_url + "success?payGateway=Leatherback&payGatewayID=7" + @"""
" + "\n" +
                    @"       }
" + "\n" +
                    @"}";
                    request.AddParameter("application/json", body, ParameterType.RequestBody);
                    CompanyInfo.InsertActivityLogDetails(obj.ReferenceNo + " Leatherback Request step2: " + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "Leatherback", obj.CB_ID, obj.Client_ID, "Send Money", context);
                    response = client.Execute(request);
                    CompanyInfo.InsertActivityLogDetails(obj.ReferenceNo + " Leatherback Response step2: " + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "LeatherbackPayment", obj.CB_ID, obj.Client_ID, "Send Money", context);
                    Console.WriteLine(response.Content);
                    var parsedResponse = JObject.Parse(response.Content);

                    // Access the 'reference' value
                    string referenceValue = (string)parsedResponse["value"]["paymentItem"]["reference"];


                    json = Newtonsoft.Json.JsonConvert.DeserializeObject<Leatherback>(response.Content);
                    if (json.value != null)
                        returnUrl = json.value.paymentItem.metaData.AuthUrl + "#idscan/index";




                    try
                    {

                        cmd = new MySqlCommand("Insert_instantbankingpartner_ref");
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                        cmd.Parameters.AddWithValue("_payinpartnernumber", referenceValue);
                        cmd.Parameters.AddWithValue("_apiid", "7");
                        cmd.Parameters.AddWithValue("_record_datetime", Record_Insert_DateTime);
                        dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                    }
                    catch { }
                }
                else
                {

                    CompanyInfo.InsertActivityLogDetails("Leatherback 2: " + Convert.ToString(response.Content), obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "webpaymentJudoPay", obj.CB_ID, obj.Client_ID, "Send Money", context);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Leatherback Request Error: " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "LeatherbackPayment", obj.CB_ID, obj.Client_ID, "Send Money", context);
            }
            return returnUrl;
        }
        public string LeatherbackPaymentStatus(DataTable dt, Model.Transaction obj)
        {
            HttpContext   context = null;
            string returnUrl = "";
            try
            {
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Tls12
                        ;
                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                DataTable dtcust = (DataTable)CompanyInfo.getCustomerDetails(obj.Client_ID, Customer_ID);
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", 7);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", merchant_id = "", destinationAccount = ""; //int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                }
                var client = new RestClient(apiurl);
                var request = new RestRequest("/api/payment/transactions/" + obj.payvyne_trans_id);
                request.Method = Method.GET;
                request.AddHeader("x-api", apipass);
                CompanyInfo.InsertActivityLogDetails("Leatherback Request Status : " + obj.payvyne_trans_id, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "LeatherbackPayment", obj.CB_ID, obj.Client_ID, "Send Money", context);
                IRestResponse response = client.Execute(request);
                CompanyInfo.InsertActivityLogDetails("Leatherback Response Status : " + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "LeatherbackPayment", obj.CB_ID, obj.Client_ID, "Send Money", context);
                Leatherback json = Newtonsoft.Json.JsonConvert.DeserializeObject<Leatherback>(response.Content);
                returnUrl = json.value.paymentStatus;
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Leatherback Request Error: " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "LeatherbackPayment", obj.CB_ID, obj.Client_ID, "Send Money", context);
            }
            return returnUrl;
        }
        class Leatherback
        {
            public value value { get; set; }
            public string isSuccess { get; set; }
            public string error { get; set; }
            public string message { get; set; }
            public string type { get; set; }
            public string title { get; set; }
            public string status { get; set; }
            public string detail { get; set; }
            public string instance { get; set; }
        }
        class value
        {
            public string id { get; set; }
            public string name { get; set; }
            public string description { get; set; }
            public string alias { get; set; }
            public string link { get; set; }
            public string logo { get; set; }
            public string linkType { get; set; }
            public string amountType { get; set; }
            public string supportEmail { get; set; }
            public string status { get; set; }
            public string createdDate { get; set; }
            public string environment { get; set; }
            public amountInfo amountInfo { get; set; }
            public paymentItem paymentItem { get; set; }
            public string paymentStatus { get; set; }
        }
        public class amountInfo
        {
            public string currencyCode { get; set; }
            public string amount { get; set; }
        }
        public class paymentItem
        {
            public string channel { get; set; }
            public string message { get; set; }
            public string totalAmount { get; set; }
            public string amount { get; set; }
            public string fees { get; set; }
            public string reference { get; set; }
            public string paymentReference { get; set; }
            public metaData metaData { get; set; }
        }
        public class metaData
        {
            public string AuthUrl { get; set; }
            public string token { get; set; }
        }
        #endregion

        #region PayCross Card Payment
        public string PayCrossHashing(Model.Transaction obj, string login_name, string sitesecuritytimestamp, string base_url, HttpContext context)
        {
            string hash_site_security = "";
            try
            {
                DataTable dtc = CompanyInfo.get(obj.Client_ID, context);
                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                DataTable dt_cust_details = (DataTable)CompanyInfo.getCustomerDetails(obj.Client_ID, Customer_ID);
                MySqlCommand cmd = new MySqlCommand("Get_PaymentGateway");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_whereclause", " and ID=8");
                DataTable dt = (db_connection.ExecuteQueryDataTableProcedure(cmd));
                string shop_id = "", secret_key = "", test = "";
                if (dt.Rows.Count > 0)
                {
                    string API_Codes = Convert.ToString(dt.Rows[0]["APIUnique_Codes"]);
                    string API_URL = Convert.ToString(dt.Rows[0]["API_Url"]);

                    if (API_Codes != "" && API_Codes != null)
                    {
                        Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                        shop_id = Convert.ToString(o["shop_id"]);
                        secret_key = Convert.ToString(o["secret_key"]);
                        test = Convert.ToString(o["test_key"]);
                    }
                    //var context = HttpContext.Current;
                    //base_url =   base_url.Replace(context.Request.Url.PathAndQuery.ToString(), "");

                    

                    base_url = dtc.Rows[0]["Company_URL_Customer"].ToString();
                    double setpayamt = obj.AmountInGBP + obj.Transfer_Fees;
                    if (obj.Discount_Perm == 0)
                    {
                        setpayamt = setpayamt - obj.Discount_Amount;
                    }
                    else if (obj.Wallet_Perm == 0)
                    {
                        setpayamt = setpayamt - obj.Wallet_Amount;
                    }
                    setpayamt = Math.Round(setpayamt, 2);
                    string extrapara = "";
                    string success_url = "";
                    string decline_url = "";
                    string return_url = "";
                    string fail_url = "";
                    string cancel_url = "";
                    extrapara = "?PayGateway=" + HttpUtility.UrlEncode(obj.PaymentGateway_ID.ToString()) + "" +
                        "&C_ID=" + HttpUtility.UrlEncode(obj.Customer_ID) +
                        "&LoginName=" + login_name + "" +
                        "&Client_ID=" + obj.Client_ID + "" +
                        "&BID=" + obj.Branch_ID + "" +
                        "&refId=" + HttpUtility.UrlEncode(CompanyInfo.Encrypt(obj.ReferenceNo, true)) + "" +
                        "&GatewayName=PayCross";
                    //return hashString;
                    success_url = base_url + "pay-by-card-success" + extrapara + "&Paycrossstatus=Success";
                    decline_url = base_url + "pay-by-card-success" + extrapara + "&Paycrossstatus=Decline";
                    return_url = base_url + "pay-by-card-success" + extrapara + "&Paycrossstatus=Return";
                    fail_url = base_url + "pay-by-card-success" + extrapara + "&Paycrossstatus=Fail";
                    cancel_url = base_url + "pay-by-card-success" + extrapara + "&Paycrossstatus=Cancel";
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var client = new RestClient(API_URL + "/ctp/api/checkouts");
                    var request = new RestRequest();
                    request.Method = Method.POST;
                    request.AddHeader("Content-Type", "application/json");
                    request.AddHeader("X-API-Version", "2");
                    var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(shop_id + ":" + secret_key);
                    string auth = System.Convert.ToBase64String(plainTextBytes);
                    request.AddHeader("Authorization", "Basic " + auth);

                    //" + "\n" +
                    //@"      ""notification_url"": ""http://your_shop.com/notification"",
                    //Card Holder details
                    //                    ,
                    //" + "\n" +
                    //@"      ""credit_card_fields"": {
                    //" + "\n" +
                    //@"        ""holder"": """ + obj.NameOnCard + @""",
                    //" + "\n" +
                    //@"        ""read_only"": [""holder""]
                    //" + "\n" +
                    //@"      }

                    
                    string customer_first_name = "";
                    string customer_last_name = "";
                  
                    try
                    {
                        MySqlCommand cmdcustdata = new MySqlCommand("Customer_RegDetails");
                        cmdcustdata.CommandType = CommandType.StoredProcedure;
                        cmdcustdata.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        cmdcustdata.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        DataTable dt_custdata = db_connection.ExecuteQueryDataTableProcedure(cmdcustdata);
                        if (dt_custdata.Rows.Count > 0)
                        {
                         
                            customer_first_name = Convert.ToString(dt_custdata.Rows[0]["First_Name"]).Trim();
                            customer_last_name = Convert.ToString(dt_custdata.Rows[0]["Last_Name"]).Trim();
                           
                        }
                    }
                    catch (Exception ex) { }

                    if (obj.NameOnCard == null)
                    {
                        obj.NameOnCard = customer_first_name+" "+ customer_last_name;
                    }


                    var body = @"{
" + "\n" +
                    @"  ""checkout"": {
" + "\n" +
                    @"    ""test"": " + test + @",
" + "\n" +
                    @"    ""transaction_type"": ""payment"",
" + "\n" +
                    @"    ""attempts"": 3,
" + "\n" +
                    @"    ""settings"": {
" + "\n" +
                    @"      ""return_url"": """ + return_url + @""",
" + "\n" +
                    @"      ""success_url"": """ + success_url + @""",
" + "\n" +
                    @"      ""decline_url"": """ + decline_url + @""",
" + "\n" +
                    @"      ""fail_url"": """ + fail_url + @""",
" + "\n" +
                    @"      ""cancel_url"": """ + cancel_url + @""",
" + "\n" +
                    @"      ""button_text"": ""Pay " + obj.FromCurrency_Code + @" " + setpayamt.ToString("F2") + @""",
" + "\n" +
                    @"      ""button_next_text"": ""Back to the app"",
" + "\n" +
                    @"      ""language"": ""en"",
" + "\n" +
                    @"      ""customer_fields"" : {
" + "\n" +
                    @"        ""visible"" : [""first_name"", ""last_name""],
" + "\n" +
                    @"        ""read_only"" : [""email""]
" + "\n" +
                    @"      }                                        ,
                    " + "\n" +
                    @"      ""credit_card_fields"": {
                    " + "\n" +
                    @"        ""holder"": """ + obj.NameOnCard + @""",
                    " + "\n" +
                    @"        ""read_only"": [""holder""]
                    " + "\n" +
                    @"      }},
" + "\n" +
                    @"    ""payment_method"": {
" + "\n" +
                    @"      ""types"": [""credit_card""]
" + "\n" +
                    @"    },
" + "\n" +
                    @"    ""order"": {
" + "\n" +
                    @"      ""currency"": """ + obj.FromCurrency_Code + @""",
" + "\n" +
                    @"      ""tracking_id"": """ + obj.ReferenceNo + @""",
" + "\n" +
                    @"      ""amount"": " + setpayamt.ToString("F2").Replace(".", "") + @",
" + "\n" +
                    @"      ""description"": ""You will be making a payment for " + obj.ReferenceNo + @"""
" + "\n" +
                    @"    },
" + "\n" +
                    @"    ""customer"": {
" + "\n" +
                    @"      ""address"": """ + dt_cust_details.Rows[0]["Address"] + @""",
" + "\n" +
                    @"      ""country"": """ + dt_cust_details.Rows[0]["ISO_Code"] + @""",
" + "\n" +
                    @"      ""city"": """ + dt_cust_details.Rows[0]["City_Name"] + @""",
" + "\n" +
                    @"      ""email"": """ + dt_cust_details.Rows[0]["Email_ID"] + @""",
" + "\n" +
                    @"      ""first_name"": """ + dt_cust_details.Rows[0]["First_Name"] + @""",
" + "\n" +
                    @"      ""last_name"": """ + dt_cust_details.Rows[0]["Last_Name"] + @"""
" + "\n" +
                    @"    }
" + "\n" +
                    @"  }
" + "\n" +
                    @"}";
                    request.AddParameter("application/json", body, ParameterType.RequestBody);
                    //request.AddStringBody(body, DataFormat.Json);
                    //CompanyInfo.InsertActivityLogDetails("App - Paycross Cred for Reference: " + obj.ReferenceNo + ". URL: " + API_URL + " shop_id: "+shop_id +" Secret_Key: "+secret_key, obj.User_ID, 0, obj.User_ID, Customer_ID, "PayCrossHashing" + obj.ReferenceNo, obj.CB_ID, obj.Client_ID, "PayvynePaymentRedirect");
                    CompanyInfo.InsertActivityLogDetails("App - Paycross Request for Reference: " + obj.ReferenceNo + "." + body, obj.User_ID, 0, obj.User_ID, Customer_ID, "PayCrossHashing" + obj.ReferenceNo, obj.CB_ID, obj.Client_ID, "PayvynePaymentRedirect",context);
                    IRestResponse response = client.Execute(request);//await client.ExecuteAsync(request);
                    //CompanyInfo.InsertActivityLogDetails("App - Paycross Response for Reference: " + obj.ReferenceNo + ". response.ErrorException: " + response.ErrorException, obj.User_ID, 0, obj.User_ID, Customer_ID, "PayCrossHashing" + obj.ReferenceNo, obj.CB_ID, obj.Client_ID, "PayvynePaymentRedirect");
                    //CompanyInfo.InsertActivityLogDetails("App - Paycross Response for Reference: " + obj.ReferenceNo + ". response.ErrorMessage: " + response.ErrorMessage, obj.User_ID, 0, obj.User_ID, Customer_ID, "PayCrossHashing" + obj.ReferenceNo, obj.CB_ID, obj.Client_ID, "PayvynePaymentRedirect");
                    CompanyInfo.InsertActivityLogDetails("App - Paycross Response for Reference: " + obj.ReferenceNo + "." + response.Content, obj.User_ID, 0, obj.User_ID, Customer_ID, "PayCrossHashing" + obj.ReferenceNo, obj.CB_ID, obj.Client_ID, "PayvynePaymentRedirect", context);
                    paycross json = Newtonsoft.Json.JsonConvert.DeserializeObject<paycross>(response.Content);
                    //Console.WriteLine(response.Content);
                    MySqlCommand cmd1 = new MySqlCommand("Insert_bankingpartner_ref");
                    cmd1.CommandType = CommandType.StoredProcedure;
                    cmd1.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                    cmd1.Parameters.AddWithValue("_payinpartnernumber", json.checkout.token);
                    cmd1.Parameters.AddWithValue("_apiid", 8);
                    //cmd1.Parameters.AddWithValue("_paytype_id", 3);
                    cmd1.Parameters.AddWithValue("_record_datetime", obj.Record_Insert_DateTime);
                    int msg = db_connection.ExecuteNonQueryProcedure(cmd1);
                    return json.checkout.redirect_url;
                }
            }
            catch (Exception ex)
            {
                Model.ErrorLog objError = new Model.ErrorLog();
                objError.User = new Model.User();
                objError.Error = "Api : PayCrossHashError --" + ex.ToString();
                objError.Date = DateTime.Now;
                objError.User_ID = 1;
                objError.Client_ID = obj.Client_ID;
                objError.Function_Name = "PayCrossHashing";
                Service.srvErrorLog srvError = new Service.srvErrorLog();
                srvError.Create(objError, context);
                return hash_site_security;
            }
            return hash_site_security;
        }
        public DataTable GetPaycrossPaymentStatus(Model.Transaction t, string unique_id, HttpContext context)
        {
            CompanyInfo.InsertActivityLogDetails("Request for  GetPaycrossPaymentStatus status get: ", 0, 0, 0, 0, "GetPaycrossPaymentStatus", 0, 0, "Get status", context);
            DataTable dt = new DataTable();
            dt.Columns.Add("responsecode", typeof(string));
            dt.Columns.Add("status", typeof(string));
            try
            {
                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 8");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                string shop_id = "", secret_key = "";
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add("");
                }
                else
                {
                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    //Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    if (API_Codes != "" && API_Codes != null)
                    {
                        Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                        shop_id = Convert.ToString(o["shop_id"]);
                        secret_key = Convert.ToString(o["secret_key"]);
                    }
                    var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(shop_id + ":" + secret_key);
                    string auth = System.Convert.ToBase64String(plainTextBytes);

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var client = new RestClient(apiurl + "ctp/api/checkouts/" + unique_id);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    //request.AddHeader("Content-Type", "application/xml");
                    request.AddHeader("Authorization", "Basic " + auth);
                    //request.AddParameter("application/xml", body, ParameterType.RequestBody);
                    //CompanyInfo.InsertActivityLogDetails("GetPaycrossPaymentStatus Request : " + body, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetPaycrossPaymentStatus", t.CB_ID, t.Client_ID, "Send Money");
                    IRestResponse response = client.Execute(request);
                    Console.WriteLine(response.Content);

                    CompanyInfo.InsertActivityLogDetails("GetPaycrossPaymentStatus Response : " + response.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetPaycrossPaymentStatus", t.CB_ID, t.Client_ID, "Send Money", context);
                    dynamic json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                    string status = "", responsecode = "";
                    //var obj1 = Newtonsoft.Json.Linq.JObject.Parse(json);
                    status = Convert.ToString(json["checkout"]["status"]);
                    if (status == "successful")
                        responsecode = "0";
                    else
                        responsecode = "1";
                    //XmlDocument xmlDoc = new XmlDocument();
                    //xmlDoc = new XmlDocument();
                    //xmlDoc.LoadXml(response.Content);
                    //XmlNodeList nodeList = xmlDoc.GetElementsByTagName("wpf_payment");
                    //

                    //foreach (XmlNode node1 in nodeList)
                    //{
                    //    string json = Newtonsoft.Json.JsonConvert.SerializeXmlNode(node1);

                    //    var obj1 = Newtonsoft.Json.Linq.JObject.Parse(json);
                    //    status = Convert.ToString(obj1["checkout"]["status"]);
                    //    if (status == "successful")
                    //        responsecode = "0";
                    //            else
                    //        responsecode = "1";

                    //    //responsecode = Convert.ToString(obj1["wpf_payment"]["payment_transaction"]["response_code"]);
                    //}
                    dt.Rows.Add(responsecode, status);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("GetPaycrossPaymentStatus Error : " + ex.ToString(), 0, 0, 0, 0, "GetPaycrossPaymentStatus", 0, 0, "Get status", context);
                dt.Rows.Add("", "");
            }

            return dt;
        }
        class paycross
        {
            public checkout checkout { get; set; }
        }
        class checkout
        {
            public string token { get; set; }
            public string redirect_url { get; set; }

        }
        #endregion


        public string GetTrueLayerLink(string ReferenceNo, string Cust_ReferanceNo, string AmountInGBP, Model.Transaction obj, int apiID)
        {
            CompanyInfo.InsertActivityLogDetails("Request for  Truelayer URL generate: ", 0, 0, 0, 0, "GetTrueLayerLink", 0, 0, "Send Money", _srvTransactionContext);
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("RedirectURL", typeof(string));
            string return_Url = "";
            string id = "";
            string Auth_URL = "";
            double AmountInGBP1 = 0.0;
            try
            {
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", 9);
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", reference = "", currency = "", merchant_id = "", country_code = "";
                string returnUri = ""; string returnuri = "";
                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                CompanyInfo.InsertActivityLogDetails("TrueLayer Start execution ", obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerLink", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);

                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    reference = Convert.ToString(obj.ReferenceNo);
                   
                    merchant_id = Convert.ToString(o["merchant_id"]);
                    Auth_URL = Convert.ToString(o["Auth_URL"]);
                }

                DataTable dtb = CompanyInfo.get(obj.Client_ID, _srvTransactionContext);
                if (dtb.Rows.Count > 0)
                {
                    returnuri = Convert.ToString(dtb.Rows[0]["Company_URL_Customer"]);
                    
                }
                 returnUri = returnuri + "success" + "?truelayer=" + reference;

                cmd = new MySqlCommand("GetCustDetailsByID");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("cust_ID", Customer_ID);
                DataTable dtc = db_connection.ExecuteQueryDataTableProcedure(cmd);


                string expiresAt = "";//"2024-08-22T07:30:53.527Z";
                reference = "payment-ref";
                
                int country_id = Convert.ToInt32(dtc.Rows[0]["Country_ID"]);

                try
                {
                    MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                    _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                    string whereclauseiso = " and Country_ID = " + country_id + "  ";
                    _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                    _cmd_isoCode.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                    DataTable dtbenISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                    if (dtbenISO.Rows.Count > 0)
                    {
                        country_code = Convert.ToString(dtbenISO.Rows[0]["ISO_Code"]).Trim();
                        currency = Convert.ToString(dtbenISO.Rows[0]["Country_Currency"]);
                    }
                }
                catch (Exception ex) { }


                string name = Convert.ToString(dtc.Rows[0]["Full_name"]);
                string email = Convert.ToString(dtc.Rows[0]["Email_ID"]);
                string addr1 = Convert.ToString(dtc.Rows[0]["Addressline_2"]);
                string phone = Convert.ToString(dtc.Rows[0]["Phone_Number"]);


                string city = "";
                string state = "";

                string zip = Convert.ToString(dtc.Rows[0]["Post_Code"]);
                string dob = Convert.ToDateTime(dtc.Rows[0]["DateOf_Birth"]).ToString("yyyy-MM-dd");
                int city_id = Convert.ToInt32(dtc.Rows[0]["City_ID"]);
                string phone_code = Convert.ToString(dtc.Rows[0]["Phone_number_code"]);
                phone = "+" + phone_code + phone;
                try
                {
                    MySqlCommand _cmd_custCity = new MySqlCommand("sp_select_city_detailsbyid");
                    _cmd_custCity.CommandType = CommandType.StoredProcedure;
                    string whereclausecustCity = "   " + city_id + "  ";
                    _cmd_custCity.Parameters.AddWithValue("_whereclause", whereclausecustCity);

                    DataTable dtcustCity = db_connection.ExecuteQueryDataTableProcedure(_cmd_custCity);
                    if (dtcustCity.Rows.Count > 0)
                    {
                        city = Convert.ToString(dtcustCity.Rows[0]["City_Name"]).Trim();
                    }
                }
                catch (Exception ex) { }
                // Wallet Scenario

                if (addr1 == "")
                {
                    addr1 = city;
                }


                string refer = "";
                double transfer_cost = obj.TotalAmount;
                if (obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                {
                    if (Convert.ToString(obj.Wallet_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }

                if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                {
                    if (Convert.ToString(obj.Discount_Perm) == "0")
                    {
                        if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                        {
                            transfer_cost = obj.Transfer_Cost;
                        }
                    }
                }
                AmountInGBP = Convert.ToString(transfer_cost);
                try
                {
                    AmountInGBP1 = Convert.ToDouble(AmountInGBP) * 100;
                }
                catch
                {

                }
                ServicePointManager.Expect100Continue = true;
                /*ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Tls12
                       | SecurityProtocolType.Ssl3;*/
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                      | SecurityProtocolType.Tls11
                      | SecurityProtocolType.Tls12
                   ;
                var client = new RestClient(Auth_URL + "/connect/token");
                var request = new RestRequest(Method.POST);
                request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
                request.AddParameter("grant_type", "client_credentials");
                request.AddParameter("client_id", apiuser);
                request.AddParameter("client_secret", apipass);


                var response = client.Execute(request);
                CompanyInfo.InsertActivityLogDetails("TrueLayer getToken API Request ", obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerLink", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                dynamic dres = JsonConvert.DeserializeObject(response.Content);
                CompanyInfo.InsertActivityLogDetails("TrueLayer getToken API Request Response :" + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerLink", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);


                string access_token = dres.access_token;

                var body = $@"
{{
  
    ""reference"": ""{ReferenceNo}"",
    ""return_uri"": ""{returnUri}"",
    ""payment_configuration"": {{
        ""amount_in_minor"": {AmountInGBP1},
        ""currency"": ""{currency}"",
        ""payment_method"": {{
            ""type"": ""bank_transfer"",
            ""provider_selection"": {{
                ""type"": ""user_selected""
            }},
            ""beneficiary"": {{
                ""type"": ""merchant_account"",
                ""merchant_account_id"": ""{merchant_id}""
            }}
        }},
        ""user"": {{
            ""name"": ""{name}"",
            ""email"": ""{email}"",
            ""phone"": ""{phone}"",
            ""date_of_birth"": ""{dob}"",
            ""address"": {{
                ""address_line1"": ""{addr1}"",
                ""city"": ""{city}"",
                ""state"": ""{city}"",
                ""zip"": ""{zip}"",
                ""country_code"": ""{country_code}""
            }}
        }}
    }},
    ""type"": ""single_payment""
}}";

                string idempotencyKey = IdempotencyKeyGenerator.GenerateIdempotencyKey();
                //string kid = "e245d827-f072-4ea8-ba27-481cf3846733";
                string path = "/v3/payment-links";
                string method = "POST";

                CompanyInfo.InsertActivityLogDetails("TrueLayer Create Tl_signature Request :" + "idempotencyKey :" + idempotencyKey + "path :" + path + "method :" + method + "body :" + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerLink", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                var tlSignature = Create_Tl_signature_Truelayer(path, method, idempotencyKey, body, obj.Client_ID);


                CompanyInfo.InsertActivityLogDetails("TrueLayer Create Tl_signature Response :" + "tlSignature :" + tlSignature, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerLink", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                try
                {
                    client = new RestClient(apiurl + "/v3/payment-links");
                    request = new RestRequest(Method.POST);

                    //request.AddHeader("accept", "application/json; charset=UTF-8");


                    request.AddHeader("Authorization", "Bearer " + access_token);
                    request.AddHeader("content-type", "application/json");
                    request.AddHeader("Idempotency-key", idempotencyKey);
                    request.AddHeader("Tl-Signature", tlSignature);
                    request.AddParameter("application/json; charset=UTF-8", body, ParameterType.RequestBody);
                    response = client.Execute(request);
                    CompanyInfo.InsertActivityLogDetails("TrueLayer Create Payment-link Request :" + "Authorization :" + access_token + "Idempotency-key :" + idempotencyKey + "Tl-Signature :" + tlSignature + "body :" + body, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerLink", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);



                    dres = JsonConvert.DeserializeObject(response.Content);

                    CompanyInfo.InsertActivityLogDetails("TrueLayer Create Payment-link Response :" + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerLink", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

                    id = dres.id;
                    return_Url = dres.uri;

                    return_Url = return_Url + "?id=" + id;

                }
                catch { }




                try
                {

                    cmd = new MySqlCommand("Insert_instantbankingpartner_ref");
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("_ReferenceNo", ReferenceNo);
                    cmd.Parameters.AddWithValue("_payinpartnernumber", id);
                    cmd.Parameters.AddWithValue("_apiid", apiID);
                    cmd.Parameters.AddWithValue("_record_datetime", obj.Record_Insert_DateTime);
                    dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                }
                catch { }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("TrueLayer create payment link Error : " + ex.ToString(), 0, 0, 0, 0, "GetTrueLayerLink", 0, 0, "Send Money", _srvTransactionContext);
            }
            return return_Url;
        }
        public class IdempotencyKeyGenerator
        {
            public static string GenerateIdempotencyKey()
            {
                return Guid.NewGuid().ToString();
            }
        }


        public DataTable GetTrueLayerStatus(Model.Transaction obj, string Transaction_id)
        {
            DataTable dt = new DataTable();

            dt.Columns.Add("Status", typeof(string));

            CompanyInfo.InsertActivityLogDetails("TrueLayer Checkstatus Inside :" + "Transaction_id :" + Transaction_id, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

            string Auth_URL = "";

            MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("_API_ID", 9);
            cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
            cmd.Parameters.AddWithValue("_status", 0);
            DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
            int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", reference = "", currency = "", merchant_id = "", country_code = "";

            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
            CompanyInfo.InsertActivityLogDetails("TrueLayer Checkstatus Start execution ", obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
            if (dtt.Rows.Count > 0)
            {
                api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                apipass = Convert.ToString(dtt.Rows[0]["Password"]);

                string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                reference = Convert.ToString(obj.ReferenceNo);

                merchant_id = Convert.ToString(o["merchant_id"]);
                Auth_URL = Convert.ToString(o["Auth_URL"]);
            }



            ServicePointManager.Expect100Continue = true;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                   | SecurityProtocolType.Tls11
                   | SecurityProtocolType.Tls12
                   ;
            var client = new RestClient(Auth_URL + "/connect/token");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
            request.AddParameter("grant_type", "client_credentials");
            request.AddParameter("client_id", apiuser);
            request.AddParameter("client_secret", apipass);
            var response = client.Execute(request);
            CompanyInfo.InsertActivityLogDetails("TrueLayer Create Access Token for check status Request :" + "URL :" + apiurl, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);


            dynamic dres = JsonConvert.DeserializeObject(response.Content);

            CompanyInfo.InsertActivityLogDetails("TrueLayer Create Access Token for check status Response :" + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

            string access_token = dres.access_token;

            string id = "";

            try
            {
                cmd = new MySqlCommand("getinstantbankingpartner_ref");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_transactionref", Transaction_id);
                dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);

                if(dtt.Rows.Count > 0)
                {
                    id = Convert.ToString(dtt.Rows[0]["payinpartnernumber"]);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("getinstantbankingpartner_ref TrueLayer error :" +ex.ToString() , obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
            }


            client = new RestClient(apiurl + "/v3/payment-links/" + id + "/payments");
            request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Bearer " + access_token);
            request.AddHeader("content-type", "application/json");
            response = client.Execute(request);
            CompanyInfo.InsertActivityLogDetails("TrueLayer Check Status Request :" + "Transaction_id :" + id, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);


            dres = JsonConvert.DeserializeObject(response.Content);

            CompanyInfo.InsertActivityLogDetails("TrueLayer Create Tl_signature Response :" + response.Content, obj.User_ID, obj.Transaction_ID, obj.User_ID, 0, "GetTrueLayerStatus", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);

            var items = dres.items;
            var idd = items[0].id;
            var status = items[0].status;
            var createdAt = items[0].created_at;



            dt.Rows.Add(status);

            return dt;

        }

        public static string Create_Tl_signature_Truelayer(string path, string method, string idempotencyKey, string body, int Client_ID)
        {
            HttpContext _srvTransactionContext=null;
            byte[] bytesToEncode = Encoding.UTF8.GetBytes(body);
            string encodedbody = Convert.ToBase64String(bytesToEncode);

            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            string returnuri = "";
            DataTable dtb = CompanyInfo.get(Client_ID, _srvTransactionContext);
            if (dtb.Rows.Count > 0)
            {
                returnuri = Convert.ToString(dtb.Rows[0]["Company_URL_Admin"]);
            }

            //string apiurl = "https://currencyexchangesoftware.eu/test-mts/TruelayerAuth/BankOfLondon";
            string apiurl = returnuri + "TruelayerAuth/BankOfLondon";
            string url = $"{apiurl}?path={path}&method={method}&idempotencyKey={idempotencyKey}&body={encodedbody}";

            var client = new RestClient(url);
            client.Timeout = -1;

            var request = new RestRequest(Method.GET);
            request.AddParameter("application/json", string.Empty, ParameterType.RequestBody);

            CompanyInfo.InsertActivityLogDetails("TrueLayer Create_Tl_signature_Truelayer API Request ", 0, 0, 0, 0, "Create_Tl_signature_Truelayer", 0, 0, "Send Money", _srvTransactionContext);

            IRestResponse response = client.Execute(request);


            CompanyInfo.InsertActivityLogDetails("TrueLayer Create_Tl_signature_Truelayer API Response: " + response.Content.Trim('"'), 0, 0, 0, 0, "Create_Tl_signature_Truelayer", 0, 0, "Send Money", _srvTransactionContext);


            return response.Content.Trim('"');
        }

        public static string CreateAuthorizationToken(DateTime timestamp, string secretekey, string apikey)
        {
            string APISecretKey = secretekey; //"NRz6GwT0Ci1S5lQKaJmiu+f8oCa5RrnlEPv4v0cETY2JxlOj2+ndifD1+4MXQxgYdZS1//dfgw6k2DB4v2HHtw==";
            string APIKey = apikey;
            var timestampString = timestamp.ToString("yyyyMMdd_HHmmss");


            byte[] secretKeyBytes = Encoding.UTF8.GetBytes(APISecretKey);


            byte[] messageBytes = Encoding.UTF8.GetBytes(timestampString);

            using (var hmac = new HMACSHA512(secretKeyBytes))
            {

                byte[] hashBytes = hmac.ComputeHash(messageBytes);

                var hashString = Convert.ToBase64String(hashBytes);


                string concatenatedString = APIKey + ":" + timestampString + ":" + hashString;

                byte[] resultBytes = Encoding.UTF8.GetBytes(concatenatedString);

                var result = Convert.ToBase64String(resultBytes);


                return result.Trim();
            }
        }


        public DataTable GetJudoPayLink(Model.Transaction t, HttpContext context)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Status", typeof(int));
            dt.Columns.Add("RedirectURL", typeof(string));
            dt.Columns.Add("reference", typeof(string));
            try
            {
                //Test Cards 5100 0000 0000 5460 12/25 524
                //Note: Set Pay by card success url into Judopay Portal add paygateway=3&paystat=0&error=0 to query string
                DataTable dtc = CompanyInfo.get(t.Client_ID, context);

                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 3");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count > 0)
                {
                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string judoid = Convert.ToString(o["judoid"]);
                    string apptoken = Convert.ToString(o["app-api-token"]);
                    string secretapi = Convert.ToString(o["app-secret-api"]);

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var client = new RestClient(apiurl);//"https://api-sandbox.judopay.com/webpayments/payments"
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", "{\"judoId\": \"" + judoid + "\"," +
                            "\"amount\": " + t.AmountInGBP + "," +
                            "\"currency\": \"" + t.FromCurrency_Code + "\"," +
                            "\"yourConsumerReference\": \"" + t.Customer.WireTransfer_ReferanceNo + "\"," +
                            "\"yourPaymentReference\": \"" + t.ReferenceNo + "\"," +
                            "}", ParameterType.RequestBody);

                    request.AddHeader("Api-Token", apptoken); //App "Bb2NMgbCUdm3bWbJ"                    
                    request.AddHeader("Api-Version", "6.0.0.0");
                    var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(apptoken + ":" + secretapi);//"Bb2NMgbCUdm3bWbJ:4051201b3cec7b5b669596fe50261989c11bd9f0581ec58de61e78b8e07d09e3");//App `API TOKEN` colon `API SECRET`
                    string auth = System.Convert.ToBase64String(plainTextBytes);

                    request.AddHeader("Authorization", "Basic " + auth);
                    IRestResponse response = client.Execute(request);
                    if (response != null)
                    {
                        string resresult = response.Content;
                        if (resresult != "" && resresult != null)
                        {
                            Newtonsoft.Json.Linq.JObject obj = Newtonsoft.Json.Linq.JObject.Parse(response.Content);
                            //Sorry, we were unable to authorize this request. Please check your details and permissions before trying again."code":7,"category":1
                            string paybylinkurl = Convert.ToString(obj["payByLinkUrl"]);
                            string reference = Convert.ToString(obj["reference"]);
                            if (paybylinkurl != "" && paybylinkurl != null)
                                dt.Rows.Add(0, paybylinkurl, reference);
                        }
                    }
                }
                if (dt.Rows.Count <= 0)
                {
                    dt.Rows.Add(1, "", "");
                }
                return dt;
            }
            catch (Exception ex)
            {
                if (dt.Rows.Count <= 0)
                {
                    dt.Rows.Add(2, ex.ToString(), "");
                }
                return dt;
            }
        }

        public DataTable GetGuavaPayStatus(Model.Transaction t, HttpContext context)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("Status", typeof(string));
            dt.Columns.Add("order_status", typeof(string));
            try
            {
                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 4");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add(false, "", "");
                }
                else
                {
                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string uname = Convert.ToString(o["uname"]);
                    string upassword = Convert.ToString(o["ups"]);
                    string currency = Convert.ToString(o["currency"]);
                    string sid = Convert.ToString(o["sid"]);
                    string bank = Convert.ToString(o["bank"]);
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    string url = apiurl + "transaction/" + bank + "/status?user=" + uname + "&password=" + upassword + "&sid=" + sid + "&mdorder=" + t.GuavapayorderId;

                    var client = new RestClient(url);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    IRestResponse response = client.Execute(request);
                    CompanyInfo.InsertActivityLogDetails("Guavapay Request Status: " + url, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetGuavaPayStatus", t.CB_ID, t.Client_ID, "Send Money", context);
                    CompanyInfo.InsertActivityLogDetails("Guavapay Response Status: " + response.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetGuavaPayStatus", t.CB_ID, t.Client_ID, "Send Money", context);

                    if (response != null)
                    {
                        string resresult = response.Content;
                        if (resresult != "" && resresult != null)
                        {
                            Newtonsoft.Json.Linq.JObject obj = Newtonsoft.Json.Linq.JObject.Parse(response.Content);
                            bool Success = Convert.ToBoolean(obj["Success"]);
                            string status = Convert.ToString(obj["status"]);
                            string order_status = Convert.ToString(obj["order_status"]);
                            dt.Rows.Add(Success, status, order_status);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Guavapay Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "Send-Insert Transfer", t.CB_ID, t.Client_ID, "Send Money", context);
                if (dt.Rows.Count <= 0)
                {
                    dt.Rows.Add(false, "", "");
                }
            }
            return dt;

        }



        public DataTable GetGuavaPayOrderNumberDetails(Model.Transaction t, string whereclause, string decrypted, HttpContext context)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Success", typeof(string));
            dt.Columns.Add("Client_ID", typeof(string));
            dt.Columns.Add("User_ID", typeof(string));
            dt.Columns.Add("CB_ID", typeof(string));
            dt.Columns.Add("transactionref", typeof(string));
            dt.Columns.Add("mainamount", typeof(string));
            dt.Columns.Add("currency", typeof(string));

            try
            {
                MySqlCommand _cmd = new MySqlCommand("View_transfers");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_whereclause", whereclause);

                DataTable dtorderDetails = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                string CB_ID = "", User_ID = "", Client_ID = "", mainamount = "", currency = "";
                if (dtorderDetails.Rows.Count > 0)
                {
                    CB_ID = Convert.ToString(dtorderDetails.Rows[0]["CB_ID"]);
                    User_ID = Convert.ToString(dtorderDetails.Rows[0]["User_ID"]);
                    Client_ID = Convert.ToString(dtorderDetails.Rows[0]["Client_ID"]);
                    decrypted = Convert.ToString(decrypted);
                    mainamount = Convert.ToString(Convert.ToDouble(dtorderDetails.Rows[0]["AmountInGBP"]) + Convert.ToDouble(dtorderDetails.Rows[0]["Transfer_Fees"]));
                    currency = Convert.ToString(dtorderDetails.Rows[0]["FromCurrency_Code"]);
                    dt.Rows.Add(true, Client_ID, User_ID, CB_ID, decrypted, mainamount, currency);
                }
                CompanyInfo.InsertActivityLogDetails("Guavapay GetGuavaPayOrderNumberDetails whereclause: " + whereclause + " decrypted:" + decrypted, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetGuavaPayOrderNumberDetails", t.CB_ID, t.Client_ID, "Send Money", context);
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Guavapay GetGuavaPayOrderNumberDetails Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetGuavaPayOrderNumberDetails", t.CB_ID, t.Client_ID, "Send Money", context);
                dt.Rows.Add(false, "", "", "", "", "", "");
            }

            return dt;
        }


        public DataTable GetGuavaPayLink(Model.Transaction t, string refNumber, double sendingAmt, HttpContext context)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("RedirectURL", typeof(string));
            try
            {
                DataTable dtc = CompanyInfo.get(t.Client_ID, context);

                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 4");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add(1, "");
                }
                else
                {
                    var topSecret = refNumber;
                    int shft = 5;
                    string encrypted = topSecret.Select(ch => ((int)ch) << shft).Aggregate("", (current, val) => current + (char)(val * 2));
                    encrypted = Convert.ToBase64String(Encoding.UTF8.GetBytes(encrypted));

                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string uname = Convert.ToString(o["uname"]);
                    string upassword = Convert.ToString(o["ups"]);
                    string currency = Convert.ToString(o["currency"]);
                    string returnUrl = Convert.ToString(o["returnUrl"] + "?refId=" + encrypted);
                    string sessionTimeoutSecs = Convert.ToString(o["sessionTimeoutSecs"]);
                    string requestGuvapay = Convert.ToString(o["request"]);
                    string bank = Convert.ToString(o["bank"]);
                    string description = Convert.ToString(o["description"]);
                    string sid = Convert.ToString(o["sid"]);
                    string orderNumber = refNumber;
                    double transFees = 0.00;
                    try
                    {
                        transFees = Convert.ToDouble(t.Transfer_Fees);
                    }
                    catch { }

                    string amount = Convert.ToString((sendingAmt + transFees) * 100);
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;


                    string url = apiurl + "epg/rest/register.do?userName=" + uname + "&password=" + upassword + "&currency=" + currency + "&orderNumber=" + orderNumber + "&amount=" + amount + "&language=en&returnUrl=" + returnUrl + "&sessionTimeoutSecs=" + sessionTimeoutSecs + "&jsonParams={\"request\":\"" + requestGuvapay + "\",\"bank\":\"" + bank + "\",\"description\":\"" + description + "\",\"sid\":\"" + sid + "\"}";
                    var client = new RestClient(url);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Type", "application/json");
                    request.AddHeader("Simulator", "EXTERNAL");
                    var body = @"";
                    request.AddParameter("application/json", body, ParameterType.RequestBody);
                    IRestResponse response = client.Execute(request);
                    //Console.WriteLine(response.Content);
                    CompanyInfo.InsertActivityLogDetails("Guavapay Request URL: " + url, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetGuavaPayLink", t.CB_ID, t.Client_ID, "Send Money", context);
                    CompanyInfo.InsertActivityLogDetails("Guavapay Request URL Response: " + response.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetGuavaPayLink", t.CB_ID, t.Client_ID, "Send Money", context);
                    if (response != null)
                    {
                        string resresult = response.Content;
                        if (resresult != "" && resresult != null)
                        {
                            Newtonsoft.Json.Linq.JObject obj = Newtonsoft.Json.Linq.JObject.Parse(response.Content);
                            string paybylinkurl = Convert.ToString(obj["formUrl"]);
                            string orderId = Convert.ToString(obj["orderId"]);
                            if (paybylinkurl != "" && paybylinkurl != null)
                                dt.Rows.Add(orderId, paybylinkurl);
                        }
                    }

                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Guavapay Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "Send-Insert Transfer", t.CB_ID, t.Client_ID, "Send Money", context);
                if (dt.Rows.Count <= 0)
                {
                    //dt.Rows.Add(2, ex.ToString());
                }
                else { }
            }
            return dt;
        }

        public DataTable InsertOnline_new(Model.Transaction obj, HttpContext context)
        {
           
            _srvTransactionContext = context;
            string Cust_ReferanceNo = ""; string activitybeneflink = string.Empty;
            DataTable ds = new DataTable();
            ds.Columns.Add("Status", typeof(int));
            ds.Columns.Add("Refno", typeof(string));
            ds.Columns.Add("CustRefno", typeof(string));
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
            
            string token = "";
            string SendMoneyToken = "";
            string RewardToken = "";
            DateTime sendhashexpire = DateTime.Now;
            string SOFdocupload = "";
            string check_validity = null;
            string linkActivity = "";
            int pid_avg = 2;//110724
            int CheckAMlForEveryTransaction = 1;
            DateTime TransactionStartdate = Convert.ToDateTime("0001-01-01");
            MySqlCommand _cmdSession = new MySqlCommand("SetTransactionJourney");
            DataTable dt = new DataTable();
            int cnt = 0;
            string tempComment = "";
            DataTable Benef_limit = new DataTable();
            /*try
            {
                token = (context.Request.Headers["Authorization"]).Substring("Bearer ".Length);
                _cmdSession = new MySqlCommand("SetTransactionJourney");
                _cmdSession.CommandType = CommandType.StoredProcedure;
                _cmdSession.Parameters.AddWithValue("_Token", token);
                _cmdSession.Parameters.AddWithValue("_SendMoneyToken", SendMoneyToken);
                _cmdSession.Parameters.AddWithValue("_RewardToken", RewardToken);
                _cmdSession.Parameters.AddWithValue("_SOFdocupload", SOFdocupload);
                _cmdSession.Parameters.AddWithValue("_sendmoneyhashexpire", sendhashexpire);
                _cmdSession.Parameters.AddWithValue("_TransactionStartdate", TransactionStartdate);
                _cmdSession.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                DataTable journerydata = db_connection.ExecuteQueryDataTableProcedure(_cmdSession);
                if (journerydata.Rows.Count > 0)
                {

                    if (journerydata.Rows[0]["chk_validity"] != DBNull.Value)
                    {
                        check_validity = Convert.ToString(journerydata.Rows[0]["chk_validity"]);
                    }

                }
            }
            catch (Exception ex) { }*/
            //int pid_avg = 2;

            try
            {
                using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
                {
                    if (con.State != ConnectionState.Open)
                        con.Open();

                    int chk_transaction_status = 1;
                    // int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                    MySqlCommand _cmd_comment = new MySqlCommand("AddCustomerComments");
                    string cust_Comment = "";

                    MySqlCommand cmd = new MySqlCommand("View_IncompleteTransfer");
                    cmd.CommandType = CommandType.StoredProcedure;
                    string where = "";
                    if (obj.PaymentGateway_ID == 8)
                        obj.ReferenceNo = CompanyInfo.Decrypt(obj.ReferenceNo, true);
                    if (obj.Client_ID != null && obj.Client_ID != -1)
                    {
                        where = where + " and aa.Client_ID = " + obj.Client_ID;
                    }
                    //if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                    //{
                    where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                    //}
                    //if (Customer_ID > 0)
                    //{
                    where = where + " and  aa.customer_Id=" + Customer_ID;
                    //}
                    cmd.Parameters.AddWithValue("_whereclause", where);
                    ds = db_connection.ExecuteQueryDataTableProcedure(cmd);


                    DataTable dtc = CompanyInfo.get(obj.Client_ID, _srvTransactionContext);
                    //Get Customer Details   
                    MySqlCommand cmd3 = new MySqlCommand("customer_details_by_param");//Customer_getallcustdetails
                    cmd3.CommandType = CommandType.StoredProcedure;
                    cmd3.Connection = con;
                    string _whereclause = " and cr.Client_ID=" + obj.Client_ID;
                    //if (Customer_ID > 0)
                    //{
                    _whereclause = " and cr.Customer_ID=" + Customer_ID;
                    //}
                    cmd3.Parameters.AddWithValue("_whereclause", _whereclause);
                    cmd3.Parameters.AddWithValue("_SecurityKey", CompanyInfo.SecurityKey());

                   
                    DataTable ct = db_connection.ExecuteQueryDataTableProcedure(cmd3);
 

                    obj.Benf_BankDetails_ID = Convert.ToInt32(ds.Rows[0]["Benf_BankDetails_ID"]); //vyankatesh 11-12-24

                     
                    obj.Beneficiary_ID = Convert.ToInt32(ds.Rows[0]["Beneficiary_ID"]);
                    
                    //Get Receiver Details
                    MySqlCommand cmd2 = new MySqlCommand("Beneficiary_Search");//SP_Save_Beneificiary_BankDetails
                    cmd2.CommandType = CommandType.StoredProcedure;
                    cmd2.Connection = con;
                    string _where = " and bb.Beneficiary_ID=" + obj.Beneficiary_ID + " and bb.Client_ID=" + obj.Client_ID + "";
                    if (obj.Benf_BankDetails_ID != 0)//vyankatesh 11-12-24
                    {
                        _where = _where + " and ee.BBDetails_ID = " + obj.Benf_BankDetails_ID;
                    }
                    cmd2.Parameters.AddWithValue("_whereclause", _where);
                    DataTable bt = db_connection.ExecuteQueryDataTableProcedure(cmd2);

                    string Customer_name = Convert.ToString(ct.Rows[0]["fullname1"]);
                    obj.Beneficiary_Name = Convert.ToString(bt.Rows[0]["Beneficiary_Name"]);


                    ds.Columns.Add("Status", typeof(int));
                    ds.Columns.Add("Refno", typeof(string));
                    ds.Columns.Add("CustRefno", typeof(string));

                    cmd = new MySqlCommand("CheckDuplicateRefNo");
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                    DataTable ds1 = db_connection.ExecuteQueryDataTableProcedure(cmd);


                    MySqlTransaction transaction;
                    transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
                    try
                    {
                        string subject = string.Empty; string body = string.Empty; string lbl = "";
                        Double newtotamount = 0; Double newtotamount1 = 0; Double rewardamount = 0; Double rewardamount1 = 0;
                        if (ds.Rows.Count > 0)
                        {
                            obj.Wallet_Currency_type = Convert.ToInt32(ds.Rows[0]["Wallet_Currency_type"]);

                            if (ds1.Rows.Count > 0)
                            {
                                obj.Transaction_ID = Convert.ToInt32(ds.Rows[0]["Transaction_ID"]);
                                using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Transaction = transaction;
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                    int status = cmd.ExecuteNonQuery();
                                }
                                ds.Rows[0]["Transaction_ID"] = ds1.Rows[0]["Transaction_ID"];
                            }

                            CompanyInfo.InsertrequestLogTracker("InsertOnline Step 1"  , 0, 0, 0, 0, "InsertOnline_new", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            if (Convert.ToString(ds.Rows[0]["Delete_Status"]) == "0" && ds1.Rows.Count == 0)
                            {
                                obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID, _srvTransactionContext);
                                DateTime dateTime = Convert.ToDateTime(obj.Record_Insert_DateTime);
                                string FromCurrency_Code = Convert.ToString(ds.Rows[0]["FromCurrency_Code"]);
                                obj.FromCurrency_Code = FromCurrency_Code;

                                #region checklimits
                                MySqlCommand _cmdl = new MySqlCommand("GetPermissions");
                                _cmdl.CommandType = CommandType.StoredProcedure;
                                _cmdl.Parameters.AddWithValue("_whereclause", "");
                                _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                DataTable dttp = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                                //Check Daily Transfer Count perm
                                int chkdailycount = 1;
                                DataRow[] dr = dttp.Select("PID=59");
                                if (dr.Count() > 0)
                                {
                                    foreach (DataRow drr in dr)
                                    {
                                        chkdailycount = Convert.ToInt32(drr["Status_ForCustomer"]);
                                    }
                                }
                                //Check daily limit perm
                                int chkdailylimit = 1;
                                dr = dttp.Select("PID=26");
                                if (dr.Count() > 0)
                                {
                                    foreach (DataRow drr in dr)
                                    {
                                        chkdailylimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                                    }
                                }
                                DataTable dds = null;
                                if (chkdailylimit == 0 || chkdailycount == 0)
                                {
                                    _cmdl = new MySqlCommand("customer_transferamount_minmax");
                                    _cmdl.CommandType = CommandType.StoredProcedure;
                                    _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    dds = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                                }
                                //Check Daily Transfer Count
                                if (chkdailycount == 0)
                                {
                                    if (dds.Rows.Count > 0)
                                    {
                                        int TotalDailyTransfer_count = Convert.ToInt32(dds.Rows[0]["Daily_Transfer_Count"]);
                                        _cmdl = new MySqlCommand("CustTotal_Amount");
                                        _cmdl.CommandType = CommandType.StoredProcedure;
                                        _cmdl.Parameters.AddWithValue("_From_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                                        _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        _cmdl.Parameters.AddWithValue("_To_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                                        _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                                        DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                                        if ((sd.Rows.Count + 1) > TotalDailyTransfer_count)
                                        {
                                            string notification_icon = "tranfer-limit-exceeded.jpg";
                                            string notification_message = "<span class='cls-admin'>Daily transfer count <strong class='cls-cancel'>reached. Customer is on confirmation page.</strong></span><span class='cls-customer'></span>";
                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                            //daily_transfer_count = 1;// count exceeded
                                            //daily_transfer_msg = "We are unable to process your transfer request at the moment. Please contact Support Team with your transfer request.";                                                                               
                                        }
                                    }
                                }
                                #endregion checklimits

                                /**********************  Submit Transaction   **********************************/
                                CompanyInfo.InsertrequestLogTracker("InsertOnline Step 2", 0, 0, 0, 0, "InsertOnline_new", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                obj.TransactionType_ID = 1;
                                obj.Delete_Status = 0;
                                obj.PaymentReceived_ID = 2;
                                obj.PartPay_Flag = 1;
                                obj.ManualRateChangedFlag = 1;
                                obj.TransactionStatus_ID = 1;
                                int ptid = Convert.ToInt32(ds.Rows[0]["PaymentType_ID"]);
                                try
                                {
                                    MySqlCommand _cmd = new MySqlCommand("GetIDScanResultOnPerm");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_whereclause", " and dd.Customer_ID=" + Customer_ID);
                                    _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    _cmd.Parameters.AddWithValue("_Branch_ID", Convert.ToInt32(ds.Rows[0]["CB_ID"]));
                                    DataTable ids = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                    if (ids.Rows.Count > 0)
                                    {
                                        if (Convert.ToInt32(ids.Rows[0]["FrontResult"]) > 0 || Convert.ToInt32(ids.Rows[0]["LivenessResult"]) > 0 || Convert.ToInt32(ids.Rows[0]["FaceMatchResult"]) > 0)
                                        {
                                            obj.TransactionStatus_ID = 6;// Transaction should be on Hold for Invalid IDs
                                            #region transfercomment
                                            obj.Comment = "Hold Reason: Transaction should be on Hold for Invalid IDs";
                                            int TransferPerk_Flag = 1; //remind me flag
                                            obj.Delete_Status = 0;
                                            int status = 0;
                                            cnt++;
                                            //_cmd_comment.CommandType = CommandType.StoredProcedure;
                                            //_cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                            //_cmd_comment.Parameters.AddWithValue("_comments", obj.Comment);
                                            //_cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                            //_cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                            //_cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                            //_cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            //_cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                            //_cmd_comment.Parameters.AddWithValue("_Status", 0);

                                            //_cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                            //_cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                            chk_transaction_status = 0;
                                            #endregion
                                        }
                                    }
                                    #region check_sanction
                                    int chk_reponse_benef = 10; int chk_reponse_cust = 10;
                                    // if (obj.TransactionStatus_ID != 6)
                                    {/*
                                        if (Convert.ToInt32(HttpContext.Current.Session["sanction_responce_bene_aml"]) == obj.sanction_responce_bene_aml && obj.sanction_responce_bene_aml != 10 && obj.sanction_responce_bene_aml != 4 && obj.sanction_responce_bene_aml != 0)
                                        {
                                            chk_reponse_benef = obj.sanction_responce_bene_aml;
                                        }
                                        else if (Convert.ToInt32(HttpContext.Current.Session["sanction_responce_bene_kyc"]) == obj.sanction_responce_bene_kyc && obj.sanction_responce_bene_kyc != 10 && obj.sanction_responce_bene_kyc != 4 && obj.sanction_responce_bene_kyc != 0)
                                        {
                                            chk_reponse_benef = obj.sanction_responce_bene_kyc;
                                        }
                                        else if (Convert.ToInt32(HttpContext.Current.Session["sanction_responce_cust_aml"]) == obj.sanction_responce_cust_aml && obj.sanction_responce_cust_aml != 10 && obj.sanction_responce_cust_aml != 4 && obj.sanction_responce_cust_aml != 0)
                                        {
                                            chk_reponse_cust = obj.sanction_responce_cust_aml;
                                        }
                                        else if (Convert.ToInt32(HttpContext.Current.Session["sanction_responce_cust_kyc"]) == obj.sanction_responce_cust_kyc && obj.sanction_responce_cust_kyc != 10 && obj.sanction_responce_cust_kyc != 4 && obj.sanction_responce_cust_kyc != 0)
                                        {
                                            chk_reponse_cust = obj.sanction_responce_cust_kyc;
                                        }*/
                                        if (obj.sanction_responce_bene_aml != 10 && obj.sanction_responce_bene_aml != 4 && obj.sanction_responce_bene_aml != 0)
                                        {
                                            chk_reponse_benef = obj.sanction_responce_bene_aml;
                                        }
                                        else if (obj.sanction_responce_bene_kyc != 10 && obj.sanction_responce_bene_kyc != 4 && obj.sanction_responce_bene_kyc != 0)
                                        {
                                            chk_reponse_benef = obj.sanction_responce_bene_kyc;
                                        }
                                        else if (obj.sanction_responce_cust_aml != 10 && obj.sanction_responce_cust_aml != 4 && obj.sanction_responce_cust_aml != 0)
                                        {
                                            chk_reponse_cust = obj.sanction_responce_cust_aml;
                                        }
                                        else if (obj.sanction_responce_cust_kyc != 10 && obj.sanction_responce_cust_kyc != 4 && obj.sanction_responce_cust_kyc != 0)
                                        {
                                            chk_reponse_cust = obj.sanction_responce_cust_kyc;
                                        }
                                        if (chk_reponse_cust != 10 && chk_reponse_cust != 4 && chk_reponse_cust != 0)
                                        {
                                            tempComment = cust_Comment;
                                            #region transfercomment
                                            obj.TransactionStatus_ID = 6;
                                            if (chk_reponse_cust == 1)
                                            {
                                                cnt++;
                                                cust_Comment = "Hold Reason: Customer found in PEP sanctions list";
                                            }
                                            if (chk_reponse_cust == 2)
                                            {
                                                cnt++;
                                                cust_Comment = "Hold Reason: Customer found in International sanctions list";
                                            }
                                            if (chk_reponse_cust == 3)
                                            {
                                                cnt++;
                                                cust_Comment = "Hold Reason: Customer found in PEP and International sanctions list";
                                            }

                                            int TransferPerk_Flag = 1; //remind me flag
                                            obj.Delete_Status = 0;
                                            int status = 0;

                                            /*_cmd_comment.CommandType = CommandType.StoredProcedure;
                                            _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                            _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                            _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                            _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                            _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                            _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                            _cmd_comment.Parameters.AddWithValue("_Status", 2);

                                            _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                            _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);*/
                                            cust_Comment = tempComment + cust_Comment + " <br/>";
                                            chk_transaction_status = 0;
                                            #endregion
                                        }

                                        else if (chk_reponse_benef != 10 && chk_reponse_benef != 4 && chk_reponse_benef != 0)
                                        {
                                            tempComment = cust_Comment;
                                            #region transfercomment
                                            obj.TransactionStatus_ID = 6;
                                            if (chk_reponse_benef == 1)
                                            {
                                                cnt++;
                                                cust_Comment = "Hold Reason: Beneficiary found in PEP Sanctions list";
                                            }
                                            if (chk_reponse_benef == 2)
                                            {
                                                cnt++;
                                                cust_Comment = "Hold Reason: Beneficiary found in International Sanctions list";
                                            }
                                            if (chk_reponse_benef == 3)
                                            {
                                                cnt++;
                                                cust_Comment = "Hold Reason: Beneficiary found in PEP and International Sanctions list";
                                            }
                                            int TransferPerk_Flag = 1; //remind me flag
                                            obj.Delete_Status = 0;
                                            int status = 0;

                                            //_cmd_comment.CommandType = CommandType.StoredProcedure;
                                            //_cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                            //_cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                            //_cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                            //_cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                            //_cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                            //_cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            //_cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                            //_cmd_comment.Parameters.AddWithValue("_Status", 2);

                                            //_cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                            //_cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                            cust_Comment = tempComment + cust_Comment + " <br/>";
                                            chk_transaction_status = 0;
                                            #endregion
                                        }
                                    }

                                    #endregion
                                    // if (obj.TransactionStatus_ID != 6)
                                    {
                                        obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID, _srvTransactionContext);
                                        _cmd = new MySqlCommand("GetPermissions");
                                        _cmd.CommandType = CommandType.StoredProcedure;

                                        _cmd.Parameters.AddWithValue("_whereclause", " and PID in (79 , 81 , 82 , 83, 94, 128, 154, 157, 223,183,184,190,206,213)");
                                        _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        //_cmd.Parameters.AddWithValue("_Branch_ID", t.CB_ID);
                                        DataTable ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                       
                                        if (ids1.Rows.Count > 0)
                                        {
                                            pid_avg = Convert.ToInt32(ids1.Rows[5]["Status_ForCustomer"]);
                                            //if (Convert.ToInt32(ids1.Rows[0]["Status_ForCustomer"]) == 0)
                                            //{
                                            //MySqlTransaction transaction;
                                            if (con.State != ConnectionState.Open)
                                                con.Open();
                                            //transaction = cn.BeginTransaction(IsolationLevel.ReadCommitted);
                                            int hold_sanc_customer = 1;
                                            int hold_sanc_beneficiary = 1;
                                            int hold_beneflink_mob_bankDetails = 1;
                                            int hold_beneflinkedtrnsaction_limitexce = 1;
                                            dr = ids1.Select("PID=183");
                                            if (dr.Count() > 0)
                                            {
                                                foreach (DataRow drr in dr)
                                                {
                                                    hold_sanc_customer = Convert.ToInt32(drr["Status_ForCustomer"]);// Hold transaction of customer found in sanction list
                                                }
                                            }
                                            dr = ids1.Select("PID=184");
                                            if (dr.Count() > 0)
                                            {
                                                foreach (DataRow drr in dr)
                                                {
                                                    hold_sanc_beneficiary = Convert.ToInt32(drr["Status_ForCustomer"]);// Hold transaction of beneficiary found in sanction list
                                                }
                                            }
                                            dr = ids1.Select("PID=190");//Check Beneficiery AML For Every single transaction
                                            if (dr.Count() > 0)
                                            {
                                                foreach (DataRow drr in dr)
                                                {
                                                    CheckAMlForEveryTransaction = Convert.ToInt32(drr["Status_ForCustomer"]);
                                                }
                                            }
                                            dr = ids1.Select("PID=213");
                                            if (dr.Count() > 0)
                                            {
                                                foreach (DataRow drr in dr)
                                                {
                                                    hold_beneflinkedtrnsaction_limitexce = Convert.ToInt32(drr["Status_ForCustomer"]);// Hold transaction of beneficiary if limit exceed in 90 days
                                                }
                                            }
                                           
                                            String Record_Insert_Date = obj.Record_Insert_DateTime.Substring(0, 10);
                                            _cmd = new MySqlCommand("GetTransactions", con);
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Transaction = transaction;
                                            _cmd.Parameters.AddWithValue("_pid80", ids1.Rows[0]["Status_ForCustomer"]);
                                            _cmd.Parameters.AddWithValue("_pid81", ids1.Rows[1]["Status_ForCustomer"]);
                                            _cmd.Parameters.AddWithValue("_pid82", ids1.Rows[2]["Status_ForCustomer"]);
                                            _cmd.Parameters.AddWithValue("_pid94", ids1.Rows[4]["Status_ForCustomer"]); _cmd.Parameters.AddWithValue("_ptype_id", ptid); //191222
                                            _cmd.Parameters.AddWithValue("_pid154", ids1.Rows[6]["Status_ForCustomer"]); //vyank
                                            _cmd.Parameters.AddWithValue("_pid157", ids1.Rows[7]["Status_ForCustomer"]); //vyank
                                            _cmd.Parameters.AddWithValue("_pid183", hold_sanc_customer);// Hold transaction of customer found in sanction list
                                            _cmd.Parameters.AddWithValue("_pid184", hold_sanc_beneficiary);// Hold transaction of beneficiary found in sanction list

                                            _cmd.Parameters.AddWithValue("_Beneficiary_ID", Convert.ToInt32(obj.Beneficiary_ID));
                                           
                                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                            _cmd.Parameters.AddWithValue("_date", Record_Insert_Date);
                                            _cmd.Parameters.Add(new MySqlParameter("_existTran1", MySqlDbType.Int32));
                                            _cmd.Parameters["_existTran1"].Direction = ParameterDirection.Output;
                                            _cmd.Parameters.Add(new MySqlParameter("_existTran2", MySqlDbType.Int32));
                                            _cmd.Parameters["_existTran2"].Direction = ParameterDirection.Output;
                                            _cmd.Parameters.Add(new MySqlParameter("_existTran3", MySqlDbType.Int32));
                                            _cmd.Parameters["_existTran3"].Direction = ParameterDirection.Output;

                                            _cmd.Parameters.Add(new MySqlParameter("_newalert", MySqlDbType.Int32));
                                            _cmd.Parameters["_newalert"].Direction = ParameterDirection.Output;
                                            _cmd.Parameters.Add(new MySqlParameter("_alertmsg", MySqlDbType.String));
                                            _cmd.Parameters["_alertmsg"].Direction = ParameterDirection.Output;
                                            
                                            _cmd.ExecuteNonQuery();
                                            
                                            int Existtran1 = Convert.ToInt32(_cmd.Parameters["_existTran1"].Value);
                                            int Existtran2 = Convert.ToInt32(_cmd.Parameters["_existTran2"].Value);
                                            int Existtran3 = Convert.ToInt32(_cmd.Parameters["_existTran3"].Value);

                                            int newalert = Convert.ToInt32(_cmd.Parameters["_newalert"].Value);//new id upload alert
                                            string alertmsg = Convert.ToString(_cmd.Parameters["_alertmsg"].Value);

                                            //t.CustomerName = Convert.ToString(dictObjMain["cust_name"]);
                                            //t.Beneficiary_Name = Convert.ToString(dictObjMain["benf_name"]);
                                            string whereclause_new = "";
                                            string phone = ""; string bank_details = "";

                                            whereclause_new = " and date(aa.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "'";
                                            whereclause_new = whereclause_new + " and (concat(cc.First_Name,' ',case when (cc.Middle_Name is not null and cc.Middle_Name!='') then concat(cc.Middle_Name,' ') else '' end,'',cc.Last_Name) like '%" + Customer_name + "%'";
                                            //+ " OR  (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' ))";
                                            dr = ids1.Select("PID=206");//check beneficiary mobile number and bank details in link transaction.
                                            if (dr.Count() > 0)
                                            {
                                                foreach (DataRow drr in dr)
                                                {
                                                    hold_beneflink_mob_bankDetails = Convert.ToInt32(drr["Status_ForCustomer"]);
                                                }
                                            }
                                            linkActivity += " Permission beneflink_mob_bankDetails Status :" + hold_beneflink_mob_bankDetails;
                                            
                                            if (hold_beneflink_mob_bankDetails == 0)
                                            {
                                                
                                                //Get Receiver Details
                                                MySqlCommand _cmdbenf = new MySqlCommand("Beneficiary_Search");
                                                _cmdbenf.CommandType = CommandType.StoredProcedure;
                                                string whereclause = " ";
                                                if (obj.Beneficiary_ID > 0)
                                                {
                                                    whereclause = whereclause + " and bb.Beneficiary_ID=" + obj.Beneficiary_ID + "";
                                                }
                                                _cmdbenf.Parameters.AddWithValue("_whereclause", whereclause);
                                                DataTable bt1 = db_connection.ExecuteQueryDataTableProcedure(_cmdbenf);

                                                if (bt1.Rows.Count >= 0)
                                                {
                                                    if (bt1.Rows[0]["Beneficiary_Mobile"] != "" && bt1.Rows[0]["Beneficiary_Mobile"] != null)
                                                    {
                                                        linkActivity += ", Beneficiary_Mobile :" + bt1.Rows[0]["Beneficiary_Mobile"];
                                                        phone = phone + " OR (Beneficiary_Mobile ='" + bt1.Rows[0]["Beneficiary_Mobile"] + "' )";
                                                    }
                                                    if ((bt1.Rows[0]["BBank_ID"] != "" && bt1.Rows[0]["BBank_ID"] != null && Convert.ToString(bt1.Rows[0]["BBank_ID"]) != "0") || (bt1.Rows[0]["Account_Number"] != null && bt1.Rows[0]["Account_Number"] != ""))
                                                    {
                                                        linkActivity += ", Beneficiary Bank ID : " + bt1.Rows[0]["BBank_ID"] + ", Beneficiary Bank Account Number : " + bt1.Rows[0]["Account_Number"];
                                                        bank_details = " OR (";
                                                        int o = 0;
                                                        if ((bt1.Rows[0]["BBank_ID"] != "" && bt1.Rows[0]["BBank_ID"] != null && bt1.Rows[0]["BBank_ID"] != "0"))
                                                        {

                                                            bank_details = bank_details + "  (BBank_ID ='" + bt1.Rows[0]["BBank_ID"] + "' )";
                                                        }
                                                        if ((bt1.Rows[0]["Account_Number"] != "" && bt1.Rows[0]["Account_Number"] != null))
                                                        {
                                                            if (o != 0)
                                                            {
                                                                bank_details = bank_details + " (Account_Number ='" + bt1.Rows[0]["Account_Number"] + "' )";
                                                            }
                                                            else
                                                            {
                                                                bank_details = bank_details + " and (Account_Number ='" + bt1.Rows[0]["Account_Number"] + "' )";
                                                            }
                                                        }
                                                        bank_details = bank_details + " )";
                                                    }
                                                }
                                                whereclause_new = whereclause_new + "  OR ((Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%')" + phone + bank_details + "))";
                                            }
                                            else
                                            {
                                                
                                                whereclause_new = whereclause_new + "  OR   (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' ))";
                                            }
                                            linkActivity += ", whereclause_new " + whereclause_new;

                                            
                                            // int cnt = 0;
                                            var benfwcnt = 0;
                                            try
                                            {
                                                int hold_link_transaction = 1;
                                                dr = ids1.Select("PID=83"); //hold linked transaction
                                                if (dr.Count() > 0)
                                                {
                                                    foreach (DataRow drr in dr)
                                                    {
                                                        hold_link_transaction = Convert.ToInt32(drr["Status_ForCustomer"]);
                                                    }
                                                }
                                                
                                                linkActivity += ", Link transaction Perm Status :" + hold_link_transaction;
                                                if (hold_link_transaction == 0) // if (Convert.ToInt32(ids1.Rows[3]["Status_ForCustomer"]) == 0)
                                                {
                                                    MySqlCommand _cmd1 = new MySqlCommand("sp_select_linked_txn_rpt");
                                                    _cmd1.CommandType = CommandType.StoredProcedure;
                                                    _cmd1.Transaction = transaction;
                                                    _cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                                    _cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                    _cmd1.Parameters.AddWithValue("_whereclause", whereclause_new);
                                                    _cmd1.Parameters.AddWithValue("_conditionclause", "inner join user_master um on um.User_ID=aa.User_ID");
                                                    _cmd1.Parameters.AddWithValue("_selectclause", "concat('') as pocname,");
                                                    //_cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)<> 1 and Count(cr1.Last_Name)<>1 and Count(ifnull(cr1.Middle_Name,0))<>1) AS a)");
                                                    _cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)>= 1 and Count(cr1.Last_Name)>=1 and Count(ifnull(cr1.Middle_Name,0))>=1) AS a)");
                                                    _cmd1.Parameters.AddWithValue("_cust_clause", "and cc.Customer_ID=aa.Customer_ID");
                                                    _cmd1.Parameters.AddWithValue("_benf_clause", "");
                                                    _cmd1.Parameters.AddWithValue("_order_by_value", "Sender,aa.Customer_ID ");
                                                    ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd1);
                                                    
                                                    if (ids1.Rows.Count > 0 /*&& cnt == 0*/)
                                                    {
                                                       
                                                        linkActivity += ", Link transaction Match found count :" + ids1.Rows.Count;

                                                        obj.TransactionStatus_ID = 6;
                                                        cnt++;
                                                        //cust_Comment = "Hold Reason: Linked transaction should be on hold";

                                                        //vyankatesh 16-09-24 // hold linked transcation cheked Customer or Beneficiary Match 
                                                        var custwcnt = 0; var benfphonewcnt = 0; var benfbankwcnt = 0;
                                                        try
                                                        {
                                                            var custwhere = "Sender like '%" + Customer_name.Trim() + "%'";
                                                            var benfwhere = "Reciever like '%" + obj.Beneficiary_Name.Trim() + "' or Reciever like '" + obj.Beneficiary_Name.Trim() + "%'";

                                                            var phonewhere = phone;
                                                            var bankewhere = bank_details;

                                                            DataRow[] drs = ids1.Select(custwhere);
                                                            if (drs.Count() > 0)
                                                            {
                                                                custwcnt++;
                                                            }
                                                            drs = ids1.Select(benfwhere);
                                                            if (drs.Count() > 0)
                                                            {
                                                                benfwcnt++;
                                                            }
                                                            if (phonewhere != "")
                                                            {
                                                                phonewhere = phonewhere.Replace("OR", "");
                                                                drs = ids1.Select(phonewhere);
                                                                if (drs.Count() > 0)
                                                                {
                                                                    benfphonewcnt++;
                                                                }
                                                            }
                                                            if (bankewhere != "")
                                                            {
                                                                bankewhere = bankewhere.Replace("OR", "");

                                                                drs = ids1.Select(bankewhere);
                                                                if (drs.Count() > 0)
                                                                {
                                                                    benfbankwcnt++;
                                                                }
                                                            }
                                                        }
                                                        catch (Exception _ex) { }
                                                       
                                                        linkActivity += ", Link transaction details match status : cust match :" + custwcnt + ", benf match :" + benfwcnt + ",benf mob match :" + benfphonewcnt + ",benf bankdetails match :" + benfbankwcnt;

                                                        if (custwcnt > 0 && benfwcnt > 0 && benfphonewcnt > 0 && benfbankwcnt > 0)
                                                        {
                                                            cnt++;
                                                            cust_Comment += "Hold Reason: Customer And Beneficiary Linked transaction should be on hold <br/>";
                                                        }
                                                        else if (custwcnt > 0)
                                                        {
                                                            cnt++;
                                                            cust_Comment += "Hold Reason: Customer Linked transaction should be on hold <br/>";
                                                        }
                                                        else if (benfwcnt > 0)
                                                        {
                                                            cnt++;
                                                            cust_Comment += "Hold Reason: Beneficiary Linked transaction should be on hold";
                                                        }
                                                        else if (benfphonewcnt > 0)
                                                        {
                                                            cnt++;
                                                            cust_Comment += "Hold Reason: Beneficiary Linked transaction should be on hold due to an exact match of mobile number <br/>";
                                                        }
                                                        else if (benfbankwcnt > 0)
                                                        {
                                                            cnt++;
                                                            cust_Comment += "Hold Reason: Beneficiary Linked transaction should be on hold due to an exact match of bank name and bank account number <br/>";
                                                        }
                                                        else
                                                        {
                                                            cnt++;
                                                            cust_Comment += "Hold Reason: Linked transaction should be on hold <br/>";
                                                        }

                                                        linkActivity += ", Link transaction Hold Reason :" + cust_Comment;
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                CompanyInfo.InsertActivityLogDetails("App checklinktran error- " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "checklinktran", obj.CB_ID, obj.Client_ID, "Send Money insertOnline", _srvTransactionContext);
                                            }
                                            #region Beneficiary limit wise linkedTransaction Teeparam

                                            try
                                            {
                                                if (hold_beneflinkedtrnsaction_limitexce == 0)
                                                {
                                                    //Get Beneficiary limit details

                                                    string Whereclause_beneflink = "";
                                                    DateTime dt1 = DateTime.Now.Date;
                                                    DateTime From_Date = new DateTime(); DateTime To_Date = new DateTime();
                                                    string From_Date1 = ""; string To_Date1 = "";

                                                    using (MySqlCommand _cmdBenfl = new MySqlCommand("chk_Beneficiary_limit"))
                                                    {
                                                        _cmdBenfl.CommandType = CommandType.StoredProcedure;
                                                        _cmdBenfl.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                                        _cmdBenfl.Parameters.AddWithValue("_BeneficiaryId", obj.Beneficiary_ID);
                                                        Benef_limit = db_connection.ExecuteQueryDataTableProcedure(_cmdBenfl);
                                                    }
                                                    activitybeneflink = "Beneficiary limit :- " + Benef_limit.Rows.Count;
                                                    if (ids1.Rows.Count > 0 && benfwcnt > 0)
                                                    {
                                                        if (Benef_limit.Rows.Count != 0)
                                                        {
                                                            int month = Convert.ToInt32(Benef_limit.Rows[0]["Days"]);
                                                            int transaction_Hold = Convert.ToInt32(Benef_limit.Rows[0]["Transhold_flag"]);
                                                            double amount = Convert.ToDouble(Benef_limit.Rows[0]["Amount"]);
                                                            int chk_last_90days_benef = Convert.ToInt32(Benef_limit.Rows[0]["Chk_last_days_lmt_benef"]);
                                                            //DateTime regdate_benef = Convert.ToDateTime(Benef_limit.Rows[0]["Start_Date"]);
                                                            DateTime regdate = Convert.ToDateTime(Benef_limit.Rows[0]["Start_Date"]);
                                                            //DateTime dt_benef = regdate_benef.Date.AddDays(month);
                                                            DateTime dt11 = regdate.Date.AddDays(month);
                                                            DateTime ddt_poa = regdate.Date.AddDays(month);
                                                            double totalbeneftxn = 0.0;
                                                            DateTime today = DateTime.Today;
                                                            DateTime last_90_days_dt = today.AddDays(-month);
                                                            if (transaction_Hold == 0)
                                                            {
                                                                if (chk_last_90days_benef == 0)
                                                                {
                                                                    From_Date1 = last_90_days_dt.ToString("yyyy-MM-dd");
                                                                    To_Date1 = today.ToString("yyyy-MM-dd");
                                                                }
                                                                else
                                                                {
                                                                    if (dateTime.Date > dt11.Date)
                                                                    {
                                                                        string newstartdate = ""; string newenddate = "";
                                                                        //Update Date to the Customer AML Limit
                                                                        for (DateTime dd = dt11; dd <= dateTime.AddDays(month); dd = dd.AddDays(month))
                                                                        {
                                                                            if (newstartdate == null || newstartdate == "")
                                                                            {
                                                                                if (dd.AddDays(month) >= DateTime.Now)
                                                                                {
                                                                                    newstartdate = dd.ToString();
                                                                                    From_Date = Convert.ToDateTime(newstartdate);
                                                                                    To_Date = dd.AddDays(month);

                                                                                    From_Date1 = From_Date.ToString("yyyy-MM-dd");
                                                                                    To_Date1 = To_Date.ToString("yyyy-MM-dd");

                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        From_Date = regdate;
                                                                        To_Date = dt11;

                                                                        From_Date1 = From_Date.ToString("yyyy-MM-dd");
                                                                        To_Date1 = To_Date.ToString("yyyy-MM-dd");
                                                                    }
                                                                }
                                                                Whereclause_beneflink = " date(aa.Record_Insert_DateTime) between " + From_Date1 + " and " + To_Date1 + "";
                                                                if (hold_beneflink_mob_bankDetails == 0)
                                                                {
                                                                    Whereclause_beneflink = Whereclause_beneflink + "  OR ((Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%')" + phone + bank_details + ")";
                                                                }
                                                                else
                                                                {
                                                                    Whereclause_beneflink = Whereclause_beneflink + " OR (Beneficiary_Name  like '%" + obj.Beneficiary_Name.Trim() + "' or Beneficiary_Name  like '" + obj.Beneficiary_Name.Trim() + "%')";
                                                                }

                                                                MySqlCommand _cmd1_benflink = new MySqlCommand("Benef_linkedtrans_total");
                                                                _cmd1_benflink.CommandType = CommandType.StoredProcedure;
                                                                _cmd1_benflink.Transaction = transaction;
                                                                _cmd1_benflink.Parameters.AddWithValue("_whereclause", Whereclause_beneflink);
                                                                DataTable dt_beneflink = db_connection.ExecuteQueryDataTableProcedure(_cmd1_benflink);
                                                                activitybeneflink = activitybeneflink.Replace("'", "");
                                                                activitybeneflink = activitybeneflink + " Beneficiary linked transaction total :- " + Whereclause_beneflink + "Table COunt :- " + dt_beneflink.Rows.Count;

                                                                if (dt_beneflink.Rows.Count > 0)
                                                                {

                                                                    totalbeneftxn = Convert.ToDouble(dt_beneflink.Rows[0]["AmountInGBP_Benef"]) + Convert.ToDouble(obj.AmountInGBP);
                                                                    activitybeneflink = activitybeneflink + "Amount in GBP for linked transaction beneficiary :- " + totalbeneftxn;
                                                                }
                                                                //else
                                                                //{
                                                                //    totalbeneftxn = Convert.ToDouble(obj.AmountInGBP);
                                                                //    activitybeneflink = activitybeneflink + "Amount in GBP for linked transaction beneficiary :- " + totalbeneftxn;
                                                                //}

                                                                if (totalbeneftxn > amount)
                                                                {
                                                                    cust_Comment += "Hold Reason: £" + amount + " limit exceeded within " + month + " days.</br>";
                                                                }
                                                            }
                                                            //CompanyInfo.InsertActivityLogDetails(activitybeneflink + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "");
                                                        }
                                                    }

                                                }


                                            }
                                            catch (Exception ex)
                                            {
                                                string stattus = (string)CompanyInfo.InsertErrorLogDetails(ex.Message.Replace("\'", "\\'"), obj.User_ID, "linked transaction beneficiary cl - InserOnline  ", obj.Branch_ID, obj.Client_ID);

                                            }
                                            finally
                                            {
                                                activitybeneflink = activitybeneflink.Replace("'", "");
                                                CompanyInfo.InsertActivityLogDetails(activitybeneflink + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "InserOnline", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);
                                            }


                                            #endregion

                                           
                                            double totalBalance = 0.0;
                                            //AML Check for Every Single transaction.
                                            double amountgbp = Convert.ToDouble(obj.AmountInGBP);

                                            if (amountgbp <= 0)
                                            {
                                                amountgbp = Convert.ToDouble(ds.Rows[0]["Totalamount"]);
                                            }


                                            if (CheckAMlForEveryTransaction == 0)
                                            {
                                                whereclause_new = " and date(aa.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "'";
                                                whereclause_new = whereclause_new + " and (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' )";

                                                using (MySqlCommand _cmd1 = new MySqlCommand("sp_select_linked_txn_rpt", con))
                                                {
                                                    _cmd1.CommandType = CommandType.StoredProcedure;
                                                    _cmd1.Transaction = transaction;
                                                    _cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                                    _cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                    _cmd1.Parameters.AddWithValue("_whereclause", whereclause_new);
                                                    _cmd1.Parameters.AddWithValue("_conditionclause", "inner join user_master um on um.User_ID=aa.User_ID");
                                                    _cmd1.Parameters.AddWithValue("_selectclause", "concat('') as pocname,");
                                                    //_cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + c2.Record_Insert_DateTime + "' and '" + c2.Record_Insert_DateTime + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)<> 1 and Count(cr1.Last_Name)<>1 and Count(ifnull(cr1.Middle_Name,0))<>1) AS a)");
                                                    _cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)>= 1 and Count(cr1.Last_Name)>=1 and Count(ifnull(cr1.Middle_Name,0))>=1) AS a)");
                                                    _cmd1.Parameters.AddWithValue("_cust_clause", "and cc.Customer_ID=aa.Customer_ID");
                                                    _cmd1.Parameters.AddWithValue("_benf_clause", "");
                                                    _cmd1.Parameters.AddWithValue("_order_by_value", "Sender,aa.Customer_ID ");
                                                    ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd1);
                                                }
                                                if (amountgbp <= 5000)
                                                {
                                                    if (ids1.Rows.Count > 0)
                                                    {
                                                        foreach (DataRow row in ids1.Rows)
                                                        {

                                                            if (row["AmountInGBP"] != DBNull.Value)
                                                            {

                                                                totalBalance += Convert.ToDouble(row["AmountInGBP"]);
                                                            }
                                                        }
                                                        totalBalance = totalBalance + amountgbp;
                                                    }
                                                    else
                                                    {
                                                        totalBalance = Convert.ToDouble(amountgbp);
                                                    }
                                                }
                                                else
                                                {
                                                    totalBalance = Convert.ToDouble(amountgbp);
                                                }




                                                string p_Transaction_Ref = obj.ReferenceNo;
                                                ;
                                                obj.Beneficiary_ID = Convert.ToInt32(obj.Beneficiary_ID);
                                                if (totalBalance >= 5000)
                                                {
                                                    string benef_aml_flag = check_pep_sanction_benef(obj.Beneficiary_ID, totalBalance, p_Transaction_Ref, _srvTransactionContext);



                                                    chk_reponse_benef = Convert.ToInt32(benef_aml_flag);



                                                }
                                                else
                                                {
                                                    string benef_aml_flag = check_pep_sanction_benef(obj.Beneficiary_ID, totalBalance, p_Transaction_Ref, _srvTransactionContext);



                                                    chk_reponse_benef = Convert.ToInt32(benef_aml_flag);


                                                }




                                                if (chk_reponse_cust != 10 && chk_reponse_cust != 4 && chk_reponse_cust != 0)
                                                {
                                                    #region transfercomment
                                                    obj.TransactionStatus_ID = 6;
                                                    if (chk_reponse_benef == 1)
                                                    {
                                                        cust_Comment += "Hold Reason: Potential Match Found For Beneficiary. <br/>";
                                                    }

                                                    int TransferPerk_Flag = 1; //remind me flag
                                                    obj.Delete_Status = 0;
                                                    int status = 0;
                                                    cnt++;
                                                    //_cmd_comment.CommandType = CommandType.StoredProcedure;
                                                    //_cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                                    //_cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                                    //_cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                                    //_cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                                    //_cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                                    //_cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    //_cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                    //_cmd_comment.Parameters.AddWithValue("_Status", 2);

                                                    //_cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                                    //_cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                                    chk_transaction_status = 0;
                                                    #endregion
                                                }

                                                else if (chk_reponse_benef != 10 && chk_reponse_benef != 4 && chk_reponse_benef != 0)
                                                {

                                                    #region transfercomment
                                                    obj.TransactionStatus_ID = 6;
                                                    if (chk_reponse_benef == 1)
                                                    {
                                                        cnt++;
                                                        cust_Comment += "Hold Reason: Potential Match Found For Beneficiary. <br/>";
                                                    }


                                                    int TransferPerk_Flag = 1; //remind me flag
                                                    obj.Delete_Status = 0;
                                                    int status = 0;

                                                    //_cmd_comment.CommandType = CommandType.StoredProcedure;
                                                    //_cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                                    //_cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                                    //_cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                                    //_cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                                    //_cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                                    //_cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    //_cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                    //_cmd_comment.Parameters.AddWithValue("_Status", 2);

                                                    //_cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                                    //_cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                                    chk_transaction_status = 0;
                                                    #endregion
                                                }


                                            }


                                            
                                            if (Existtran1 == 0 /*&& cnt == 0*/)
                                            {
                                                obj.TransactionStatus_ID = 6;

                                                cust_Comment += "Hold Reason: First Transaction should be on hold <br/>";
                                                cnt++;
                                            }
                                            if (ptid == 3)
                                            {
                                                if (Existtran2 == 0 /*&& cnt == 0*/)
                                                {
                                                    obj.TransactionStatus_ID = 6;
                                                    cnt++;
                                                    cust_Comment += "Hold Reason: First pay by card transaction should be on hold <br/>";
                                                }
                                                if (Existtran3 == 0/* && cnt == 0*/)
                                                {
                                                    obj.TransactionStatus_ID = 6;
                                                    cnt++;
                                                    cust_Comment += "Hold Reason: First daily pay by card transaction should be on hold <br/>";

                                                }
                                            }


                                          
                                            if (newalert == 0 /*&& cnt == 0*/)
                                            {
                                                obj.TransactionStatus_ID = 6;
                                                cnt++;
                                                cust_Comment += alertmsg + " <br/>";
                                            }
                                        }
                                    }
                                    linkActivity += "|cnt " + cnt + ", cust_Comment " + cust_Comment + "|";
                                    if (cnt > 0)
                                    {
                                        #region transfercomment

                                        _cmd_comment.CommandType = CommandType.StoredProcedure;
                                        //_cmd_comment.Transaction = transaction;
                                        _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                        _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                        _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                        _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", 1);
                                        _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                        _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                        _cmd_comment.Parameters.AddWithValue("_Status", 0);

                                        _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                        _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                        chk_transaction_status = 0;

                                        
                                        #endregion
                                    }
                                }
                                catch (Exception ex) 
                                { CompanyInfo.InsertActivityLogDetails("App Error For InsertOnline_New- " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }

                                string cusID = Convert.ToString(ds.Rows[0]["WireTransfer_ReferanceNo"]);
                                double tot = Convert.ToDouble(ds.Rows[0]["AmountInGBP"]) + Convert.ToDouble(ds.Rows[0]["Transfer_Fees"]);
                                double amountPKR = Convert.ToDouble(ds.Rows[0]["AmountInPKR"]);//.Split('(');

                                string from = "App";
                                string authcode = Convert.ToString(ds.Rows[0]["Auth_Code"]);
                                obj.CB_ID = Convert.ToInt32(ds.Rows[0]["CB_ID"]);
                                Customer_ID = Convert.ToInt32(ds.Rows[0]["Customer_ID"]);
                                obj.Beneficiary_ID = Convert.ToInt32(ds.Rows[0]["Beneficiary_ID"]);
                                obj.PType_ID = ptid;
                                obj.AmountInGBP = Convert.ToDouble(ds.Rows[0]["AmountInGBP"]);
                                obj.Exchange_Rate = Convert.ToDouble(ds.Rows[0]["Exchange_Rate"]);
                                obj.AmountInPKR = amountPKR;
                                obj.Purpose_ID = Convert.ToInt32(ds.Rows[0]["Purpose_ID"]);
                                obj.Transfer_Fees = Convert.ToDouble(ds.Rows[0]["Transfer_Fees"]);

                                obj.offer_rate_flag = Convert.ToInt32(ds.Rows[0]["offer_rate_flag"]);
                                obj.improved_rate_flag = Convert.ToInt32(ds.Rows[0]["improved_rate_flag"]);

                                obj.ExtraTransfer_Fees = Convert.ToDouble(ds.Rows[0]["Extra_fees"]);
                                obj.Delete_Status = 0;
                                obj.PaymentDepositType_ID = Convert.ToInt32(ds.Rows[0]["PaymentDepositType_ID"]);
                                Double PartPayAmount = Convert.ToDouble(ds.Rows[0]["PartPay_Paid_Amount"]);
                                obj.HDelivery_Flag = Convert.ToInt32(ds.Rows[0]["HDelivery_Flag"]);
                                obj.HDelivery_Address = Convert.ToString(ds.Rows[0]["HDelivery_Address"]);
                                obj.CollectionPoint_ID = Convert.ToInt32(ds.Rows[0]["CollectionPoint_ID"]);
                                //string FromCurrency_Code = Convert.ToString(ds.Rows[0]["FromCurrency_Code"]);
                                //obj.FromCurrency_Code = FromCurrency_Code;
                                obj.PaymentReceived_ID = 1;
                                string bankGateway = Convert.ToString(obj.bankGateway);
                                if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "1")
                                {
                                    obj.PaymentReceived_ID = 1;
                                }
                                if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "1")
                                {
                                    obj.PaymentReceived_ID = 3;
                                }
                                else if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "PROCESSING" && bankGateway == "1")
                                {   // Vyne Transaction
                                    obj.PaymentReceived_ID = 3;
                                }

                                //Judopay
                                if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "Success" && bankGateway == "3")
                                {
                                    obj.PaymentReceived_ID = 1;
                                }
                                else if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "Open" && bankGateway == "3")
                                {
                                    obj.PaymentReceived_ID = 3;
                                }

                                //VolumePay
                                if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "4")
                                {
                                    obj.PaymentReceived_ID = 1;
                                }
                                else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "PENDING" || Convert.ToString(obj.Worldpay_Response) == "AWAITING_AUTHORIZATION") && bankGateway == "4")
                                {
                                    obj.PaymentReceived_ID = 3;
                                }


                                //Ecommpay
                                if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "5")
                                {
                                    obj.PaymentReceived_ID = 1;
                                }
                                else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "COMPLETED" || Convert.ToString(obj.Worldpay_Response) == "awaiting 3ds result" ||
                                    Convert.ToString(obj.Worldpay_Response) == "awaiting merchant auth" || Convert.ToString(obj.Worldpay_Response) == "awaiting redirect result" ||
                                    Convert.ToString(obj.Worldpay_Response) == "awaiting customer action" || Convert.ToString(obj.Worldpay_Response) == "awaiting clarification"
                                    || Convert.ToString(obj.Worldpay_Response) == "awaiting confirmation" || Convert.ToString(obj.Worldpay_Response) == "awaiting customer"

                                    ) && bankGateway == "5")
                                {
                                    obj.PaymentReceived_ID = 3;
                                }
                                //Trustpay
                                if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "8")
                                {
                                    obj.PaymentReceived_ID = 1;
                                }
                                else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "PROCESSING") && bankGateway == "8")
                                {
                                    obj.PaymentReceived_ID = 3;
                                }
                                if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "9")
                                {
                                    obj.PaymentReceived_ID = 3;
                                }
                                else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "PROCESSING") && bankGateway == "9")
                                {
                                    obj.PaymentReceived_ID = 3;
                                }
                                //Fire Rushikesh
                                if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "10")
                                {
                                    obj.PaymentReceived_ID = 1;
                                }
                                else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "COMPLETED") && bankGateway == "10")
                                {
                                    obj.PaymentReceived_ID = 3;
                                }
                                //MTBS Rushikesh
                                if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "11")
                                {
                                    obj.PaymentReceived_ID = 1;
                                }
                                else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "COMPLETED") && bankGateway == "11")
                                {
                                    obj.PaymentReceived_ID = 3;
                                }
                                if (ptid == 1 && Convert.ToString(PartPayAmount) != "" && Convert.ToString(PartPayAmount) != null && Convert.ToString(PartPayAmount) != "0")
                                {
                                    obj.PartPay_Flag = 0;
                                }
                                else
                                {
                                    obj.PartPay_Flag = 1;
                                }

                                obj.Country_ID = Convert.ToInt32(ds.Rows[0]["Country_ID"]);
                                obj.Currency_Code = Convert.ToString(ds.Rows[0]["Currency_Code"]);

                                obj.User_ID = Convert.ToInt32(ds.Rows[0]["User_ID"]);
                                obj.Transaction_From_Flag = Convert.ToString(ds.Rows[0]["Transaction_Source"]);
                                if (authcode == "undefined")
                                {
                                    authcode = "";
                                }
                                obj.auth_code = authcode;
                                obj.DeliveryType_Id = Convert.ToInt32(ds.Rows[0]["DeliveryType_ID"]);
                                PartPayAmount = 0;
                                Decimal ActualFXRate = 0;
                                if (ActualFXRate != 0)
                                {
                                    obj.Actual_ExchangeRate = ActualFXRate.ToString();
                                    obj.ManualRateChangedFlag = 0;
                                }
                                else
                                {
                                    obj.Actual_ExchangeRate = ActualFXRate.ToString();
                                    obj.ManualRateChangedFlag = 1;
                                }
                                obj.RateUpdateReason_ID = Convert.ToInt32(ds.Rows[0]["RateUpdateReason_ID"]);
                                obj.MsgToAgent = Convert.ToString(ds.Rows[0]["MsgToAgent"]);
                                obj.SourceComment_Flag = Convert.ToInt32(ds.Rows[0]["SourceComment_Flag"]);
                                obj.SourceComment = Convert.ToString(ds.Rows[0]["SourceComment"]);
                                string sofstr = obj.SourceComment;
                                string watchlist_reason = "";
                                try
                                {
                                    if (pid_avg == 0)
                                    {
                                        watchlist_reason = check_avg_txn(obj, 1, 0.00);
                                    }

                                }
                                catch { }
                                if (obj.SourceComment != "" && obj.SourceComment != null)
                                    sofstr = obj.SourceComment.Replace("null", "");

                                obj.SourceComment = sofstr;
                                if (Convert.ToString(obj.Purpose_ID) == "10")
                                {
                                    obj.Other_Purpose = Convert.ToString(ds.Rows[0]["Purpose"]);
                                }
                                else
                                {
                                    obj.Other_Purpose = "";
                                }
                                if (Convert.ToString(ds.Rows[0]["Wallet_ID"]) != null && Convert.ToString(ds.Rows[0]["Wallet_ID"]) != "")
                                {
                                    obj.Wallet_ID = Convert.ToInt32(ds.Rows[0]["Wallet_ID"]);
                                    if (obj.Wallet_ID > 0) { obj.Wallet_Amount = Convert.ToDouble(ds.Rows[0]["Wallet_Amount"]); }
                                }
                                if (Convert.ToString(ds.Rows[0]["Discount_ID"]) != null && Convert.ToString(ds.Rows[0]["Discount_ID"]) != "")
                                {
                                    obj.Discount_ID = Convert.ToInt32(ds.Rows[0]["Discount_ID"]);
                                    if (obj.Discount_ID > 0) { obj.Discount_Amount = Convert.ToDouble(ds.Rows[0]["Discount_Amount"]); }
                                }
                                if (ds.Rows[0]["PaymentGateway_Flag"] != null)
                                    obj.PaymentGateway_ID = Convert.ToInt32(ds.Rows[0]["PaymentGateway_Flag"]);
                                if (ds.Rows[0]["PayByCard_ID"] != null)
                                {
                                    obj.PayByCard_ID = Convert.ToInt32(ds.Rows[0]["PayByCard_ID"]);
                                    obj.NameOnCard = Convert.ToString(ds.Rows[0]["NameOnCard"]);
                                }
                                obj.Comment += Convert.ToString(ds.Rows[0]["Comment"]);

                                
                                using (cmd = new MySqlCommand("Insert_Transfer", con))
                                {
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Transaction = transaction;
                                    cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    cmd.Parameters.AddWithValue("_Beneficiary_ID", obj.Beneficiary_ID);
                                    cmd.Parameters.AddWithValue("_TransactionType_ID", obj.TransactionType_ID);
                                    cmd.Parameters.AddWithValue("_PType_ID", obj.PType_ID);
                                    cmd.Parameters.AddWithValue("_TransactionStatus_ID", obj.TransactionStatus_ID);

                                    cmd.Parameters.AddWithValue("_AmountInBase", obj.AmountInGBP.ToString("0.00"));

                                    cmd.Parameters.AddWithValue("_Rate", obj.Exchange_Rate.ToString("0.0000"));
                                    cmd.Parameters.AddWithValue("_AmountInForeign", obj.AmountInPKR.ToString("0.00"));

                                    cmd.Parameters.AddWithValue("_Purpose_ID", obj.Purpose_ID);
                                    cmd.Parameters.AddWithValue("_Transfer_Fees", obj.Transfer_Fees.ToString("0.00"));
                                    cmd.Parameters.AddWithValue("_ExtraTransfer_Fees", obj.ExtraTransfer_Fees.ToString("0.00"));
                                    cmd.Parameters.AddWithValue("_offer_rate_flag", obj.offer_rate_flag);

                                    cmd.Parameters.AddWithValue("_improved_rate_flag", obj.improved_rate_flag); //vyankatesh 02-09

                                    cmd.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                    cmd.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                    cmd.Parameters.AddWithValue("_PaymentDepositType_ID", obj.PaymentDepositType_ID);
                                    cmd.Parameters.AddWithValue("_paymentReceived_ID", obj.PaymentReceived_ID);
                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);

                                    cmd.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                    cmd.Parameters.AddWithValue("_CB_ID", obj.CB_ID);

                                    cmd.Parameters.AddWithValue("_Country_ID", obj.Country_ID);
                                    cmd.Parameters.AddWithValue("_Currency_Code", obj.Currency_Code);
                                    cmd.Parameters.AddWithValue("_Transaction_From_Flag", obj.Transaction_From_Flag);
                                    cmd.Parameters.AddWithValue("_auth_code", obj.auth_code);
                                    cmd.Parameters.AddWithValue("_DeliveryType_ID", obj.DeliveryType_Id);

                                    cmd.Parameters.AddWithValue("_Actual_ExchangeRate", obj.Actual_ExchangeRate);

                                    cmd.Parameters.AddWithValue("_ManualRateChangedFlag", obj.ManualRateChangedFlag);
                                    cmd.Parameters.AddWithValue("_RateUpdateReason_ID", obj.RateUpdateReason_ID);

                                    cmd.Parameters.AddWithValue("_MsgToAgent", obj.MsgToAgent);
                                    cmd.Parameters.AddWithValue("_PartPay_Flag", obj.PartPay_Flag);

                                    cmd.Parameters.AddWithValue("_SourceComment_Flag", obj.SourceComment_Flag);
                                    cmd.Parameters.AddWithValue("_SourceComment", obj.SourceComment);
                                    cmd.Parameters.AddWithValue("_Other_Purpose", obj.Other_Purpose);
                                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    cmd.Parameters.AddWithValue("_HomeDeliveryflag", obj.HDelivery_Flag);
                                    cmd.Parameters.AddWithValue("_HomeDeliveryAddress", obj.HDelivery_Address);

                                    cmd.Parameters.AddWithValue("_CollectionPoint_ID", obj.CollectionPoint_ID);
                                    cmd.Parameters.AddWithValue("_BaseCurrency", obj.FromCurrency_Code);
                                    cmd.Parameters.AddWithValue("_PayByCard_ID", obj.PayByCard_ID);
                                    cmd.Parameters.AddWithValue("_PaymentGateway_Flag", obj.PaymentGateway_ID);
                                    if (obj.Wallet_Perm == 0)
                                    {
                                        cmd.Parameters.AddWithValue("_wallet_id", obj.Wallet_ID);
                                        cmd.Parameters.AddWithValue("_Wallet_Amount", obj.Wallet_Amount);
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("_wallet_id", 0);
                                        cmd.Parameters.AddWithValue("_Wallet_Amount", 0);
                                    }
                                    if (obj.Discount_Perm == 0)
                                    {
                                        cmd.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                        cmd.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("_Discount_ID", 0);
                                        cmd.Parameters.AddWithValue("_Discount_Amount", 0);
                                    }
                                    //cmd.Parameters.Add(new MySqlParameter("_Transaction_ID", MySqlDbType.Int32));
                                    //cmd.Parameters["_Transaction_ID"].Direction = ParameterDirection.Output;

                                    cmd.Parameters.AddWithValue("_Comment", obj.Comment);

                                    if (obj.Till_ID <= 0 || obj.Till_ID == null) { obj.Till_ID = 1; }
                                    cmd.Parameters.AddWithValue("_Till_ID", obj.Till_ID);
                                    obj.Transaction_ID = Convert.ToInt32(cmd.ExecuteScalar());
                                    //if (obj.Transaction_ID == 0) // insert
                                    //{
                                    //    try
                                    //    {
                                    //        obj.Transaction_ID = Convert.ToInt32(cmd.Parameters["_Transaction_ID"].Value);
                                    //    }
                                    //    catch (Exception)
                                    //    {
                                    //    }
                                    //}
                                    cmd.Dispose();
                                    if (obj.Transaction_ID > 0)
                                    {
                                        if (chk_transaction_status == 0)
                                        {
                                            _cmd_comment.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                            _cmd_comment.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                            int chk_comment = db_connection.ExecuteNonQueryProcedure(_cmd_comment);
                                           
                                        }
                                        //DataTable dtc = CompanyInfo.get(obj.Client_ID);

                                        Cust_ReferanceNo = Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]);
                                        //ds.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo);
                                        ds.Rows[0]["Status"] = 0;
                                        ds.Rows[0]["Refno"] = obj.ReferenceNo;
                                        ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;

                                        using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                        {
                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.Transaction = transaction;
                                            cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                            cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                            int status = cmd.ExecuteNonQuery();
                                           
                                        }

                                        if (ptid == 6)
                                        {
                                            try
                                            {
                                                using (cmd = new MySqlCommand("sp_update_request_response", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Transaction = transaction;
                                                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                                    cmd.Parameters.AddWithValue("_functionNameId", "'%" + obj.payvyne_trans_id + "%'");
                                                    cmd.Parameters.AddWithValue("_branchId", obj.CB_ID);
                                                    cmd.Parameters.AddWithValue("_clientId", obj.Client_ID);
                                                    int status = cmd.ExecuteNonQuery();
                                                }
                                            }
                                            catch (Exception sperr)
                                            {
                                                CompanyInfo.InsertActivityLogDetails("SP sp_update_request_response error: " + sperr.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext);
                                            }

                                            try
                                            {
                                                using (cmd = new MySqlCommand("sp_update_activity_log_tracker", con))
                                                {
                                                    cmd.CommandType = CommandType.StoredProcedure;
                                                    cmd.Transaction = transaction;
                                                    cmd.Parameters.AddWithValue("_temptransactionId", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                                    cmd.Parameters.AddWithValue("_transactionId", obj.Transaction_ID);
                                                    cmd.Parameters.AddWithValue("_functionName", obj.ReferenceNo);
                                                    cmd.Parameters.AddWithValue("_functionNameId", "'%" + obj.ReferenceNo + "%'");
                                                    cmd.Parameters.AddWithValue("_branchId", obj.CB_ID);
                                                    cmd.Parameters.AddWithValue("_clientId", obj.Client_ID);
                                                    int status = cmd.ExecuteNonQuery();
                                                }
                                            }
                                            catch (Exception sperr)
                                            {
                                                CompanyInfo.InsertActivityLogDetails("SP sp_update_activity_log_tracker error: " + sperr.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext);
                                            }

                                        }

                                        ds.Rows[0]["Transaction_ID"] = obj.Transaction_ID;
                                        CompanyInfo.InsertActivityLogDetails("App - Money Transfer Request Submitted Successfully. Transaction Reference - " + obj.ReferenceNo + ".", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertOnline", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                        CompanyInfo.InsertTrackingLogDetails(1, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                        if (watchlist_reason != "")
                                        {
                                            update_to_watchlist(obj, watchlist_reason);
                                        }
                                        if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "1")
                                        {
                                            CompanyInfo.InsertTrackingLogDetails(2, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                        }
                                        else if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "4")
                                        {
                                            CompanyInfo.InsertTrackingLogDetails(2, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                        }
                                        else if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "Success" && bankGateway == "3")
                                        {
                                            CompanyInfo.InsertTrackingLogDetails(2, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                        }
                                        else if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "5")
                                        {
                                            CompanyInfo.InsertTrackingLogDetails(2, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                        }
                                        else
                                        {
                                            CompanyInfo.InsertTrackingLogDetails(3, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                        }
                                        string notification_icon = "request-money.jpg";
                                        string notification_message = "<span class='cls-admin'>transfer <strong class='cls-transferinitiate'>request</strong> sent successfully. <strong>Transfer Ref.- " + obj.ReferenceNo + "</strong></span><span class='cls-customer'><strong>Money transfer request submited</strong><span>Your request for the money transfer has been submitted successfully.</span></span>";
                                        CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, obj.User_ID, Convert.ToInt32(obj.CB_ID), 0, 0, 1, obj.Transaction_ID, _srvTransactionContext);

                                        try
                                        {
                                            DataTable dt_notif = CompanyInfo.set_notification_data(12);//temporary removed
                                            if (dt_notif.Rows.Count > 0)
                                            {
                                                int SMS = Convert.ToInt32(dt_notif.Rows[0]["SMS"]);
                                                int Email = Convert.ToInt32(dt_notif.Rows[0]["Email"]);
                                                int Notif_status = Convert.ToInt32(dt_notif.Rows[0]["Notification"]);
                                                string notification_msg = Convert.ToString(dt_notif.Rows[0]["notification_msg"]);
                                                if (notification_msg.Contains("[Txn_Ref]") == true)
                                                {
                                                    notification_msg = notification_msg.Replace("[Txn_Ref]", Convert.ToString(obj.ReferenceNo));
                                                }

                                                int i = CompanyInfo.check_notification_perm(Convert.ToString(Customer_ID), obj.Client_ID, obj.Branch_ID, 3, 12, Convert.ToDateTime(obj.Record_Insert_DateTime), 1, SMS, Email, Notif_status, "App -Transaction Submit Notification - 6", notification_msg, Convert.ToInt32(obj.Transaction_ID));
                                            }
                                        }
                                        catch { }

                                        try
                                        {
                                            string browserinfo = "";
                                            string IPAddress1 = context.Connection.RemoteIpAddress.ToString();
                                            browserinfo = "IP Address: " + IPAddress1;
                                            try
                                            {
                                                ServicePointManager.Expect100Continue = true;
                                                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls13;
                                                //| SecurityProtocolType.Tls11
                                                //| SecurityProtocolType.Tls12
                                                //| SecurityProtocolType.Ssl3;
                                                var client = new RestClient("https://tools.keycdn.com/geo.json?host=" + IPAddress1);
                                                client.Timeout = -1;
                                                var request = new RestRequest(Method.GET);
                                                client.UserAgent = "keycdn-tools:" + Convert.ToString(dtc.Rows[0]["company_website"]); //dtc.Rows[0]["Company_URL_Customer"] //keycdn-tools:https://www.calyx-solutions.com
                                                request.AddHeader("Accept-Encoding", "gzip, deflate, br");

                                                IRestResponse response = client.Execute(request);

                                                GeoLocation GeoLocationList = Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(response.Content);
                                                browserinfo = Newtonsoft.Json.JsonConvert.SerializeObject(GeoLocationList.data.geo);
                                            }
                                            catch (Exception ex)
                                            {
                                                browserinfo = "IP Address: " + IPAddress1;
                                            }
                                            int chk_validity = 1;
                                            try
                                            {
                                                if (check_validity != null)
                                                {
                                                    chk_validity = 0;
                                                }
                                            }
                                            catch (Exception ex_validity)
                                            {

                                            }
                                            MySqlCommand cmd1 = new MySqlCommand("Insert_TransactionDetails");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Transaction = transaction;
                                            cmd1.Connection = con;
                                            cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                            cmd1.Parameters.AddWithValue("_chk_validity_poa", chk_validity);
                                            cmd1.Parameters.AddWithValue("_APITransaction_ID", "0");
                                            if (Convert.ToString(ds.Rows[0]["API_ID"]) == null || Convert.ToString(ds.Rows[0]["API_ID"]) == "")
                                            {
                                                ds.Rows[0]["API_ID"] = 0;
                                            }
                                            cmd1.Parameters.AddWithValue("_BranchListAPI_ID", Convert.ToString(ds.Rows[0]["API_ID"]));
                                            cmd1.Parameters.AddWithValue("_APIBranch_Details", Convert.ToString(ds.Rows[0]["API_BranchDetails"]));
                                            cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd1.Parameters.AddWithValue("_NameOnCard", obj.NameOnCard);
                                            cmd1.Parameters.AddWithValue("_Location_Details", browserinfo);
                                            cmd1.Parameters.AddWithValue("_Benf_BankDetails_ID", obj.Benf_BankDetails_ID);//vyankatesh 11-12-24
                                            int msg = cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                            if (msg > 0) { }
                                            MySqlCommand _cmd = new MySqlCommand("Update_MonthlyLimit");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Transaction = transaction;
                                            _cmd.Parameters.AddWithValue("_From_Date", obj.Record_Insert_DateTime);
                                            _cmd.Parameters.AddWithValue("_Transfer_ID", 0);// Primary ID of customer transfer limit
                                            _cmd.Parameters.AddWithValue("_Amount", obj.AmountInGBP.ToString("0.00"));
                                            _cmd.Parameters.AddWithValue("_Queryflag", 2);
                                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                            _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            string success1 = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                        }
                                        catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online",_srvTransactionContext); }
                                        newtotamount = Convert.ToDouble(obj.AmountInGBP) + Convert.ToDouble(obj.Transfer_Fees);
                                        rewardamount = 0;
                                        //Wallet type changes added by siddhi
                                        newtotamount1 = newtotamount;
                                        double newtotamount1_foreign = obj.AmountInPKR;
                                        string wallet_currency = "";
                                        double wallet_amt = 0;
                                        if (obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                                        {
                                            if (Convert.ToString(obj.Wallet_Perm) == "0")
                                            {
                                                if (Convert.ToString(obj.Wallet_Amount) != "" && Convert.ToString(obj.Wallet_Amount) != null)
                                                {
                                                    obj.Wallet_Amount = Convert.ToDouble(obj.Wallet_Amount);
                                                    rewardamount = obj.Wallet_Amount;
                                                    lbl = "Wallet";
                                                    if (Convert.ToInt32(obj.Wallet_Currency_type) == 1)
                                                    {
                                                        newtotamount1 = newtotamount - rewardamount;
                                                        wallet_amt = newtotamount - rewardamount;
                                                        wallet_currency = obj.FromCurrency_Code;
                                                        obj.Wallet_Amount = Convert.ToDouble(ds.Rows[0]["Wallet_Amount"]);
                                                        rewardamount = obj.Wallet_Amount;

                                                    }
                                                    else if (Convert.ToInt32(obj.Wallet_Currency_type) == 2)
                                                    {
                                                        wallet_currency = obj.Currency_Code;
                                                        wallet_amt = Convert.ToDouble(obj.AmountInPKR) + rewardamount;
                                                        obj.Wallet_Amount = Convert.ToDouble(ds.Rows[0]["Wallet_Amount"]);
                                                        rewardamount = obj.Wallet_Amount;
                                                        newtotamount1_foreign = newtotamount1_foreign + rewardamount;

                                                    }
                                                }
                                            }
                                        }


                                        if (Convert.ToString(ds.Rows[0]["Discount_ID"]) != null && Convert.ToString(ds.Rows[0]["Discount_ID"]) != "")
                                        {
                                            if (obj.Discount_ID > 0 && Convert.ToString(obj.Discount_Amount) != "" && Convert.ToString(obj.Discount_Amount) != null)
                                            {
                                                obj.Discount_Amount = Convert.ToDouble(ds.Rows[0]["Discount_Amount"]);
                                                rewardamount = obj.Discount_Amount;
                                                lbl = "Discount";
                                            }
                                        }
                                        //newtotamount1 = newtotamount - rewardamount;//siddhi
                                        #region stock
                                        try
                                        {
                                            if (obj.PaymentReceived_ID == 1)//&& obj.PaymentGateway_Flag != 2
                                            {
                                                //if (Convert.ToInt32(obj.Wallet_Currency_type) == 1)
                                                //{
                                                //  newtotamount1 = newtotamount - rewardamount;
                                                //wallet_amt = newtotamount - rewardamount;
                                                //wallet_currency = obj.FromCurrency_Code;
                                                //}
                                                //else if (Convert.ToInt32(obj.Wallet_Currency_type) == 2)
                                                //{
                                                //    wallet_currency = obj.Currency_Code;
                                                //    wallet_amt = Convert.ToDouble(obj.AmountInPKR) + rewardamount;
                                                //newtotamount1_foreign=wallet_amt;
                                                //}
                                                string totamount = Convert.ToString(newtotamount1);//Transfer Cost
                                                string foreignamount = Convert.ToString(newtotamount1_foreign);//Convert.ToString(obj.AmountInPKR);
                                                obj.AmountInPKR = Convert.ToDouble(newtotamount1_foreign);//Convert.ToString(obj.AmountInPKR);
                                                string foreigncurrency = obj.Currency_Code;
                                                string basecurrency = FromCurrency_Code;
                                                int branch_id = obj.CB_ID;

                                                #region STOCK UPDATE
                                                MySqlCommand cms = new MySqlCommand("GetAllCurrencies");
                                                cms.CommandType = CommandType.StoredProcedure;
                                                cms.Transaction = transaction;
                                                cms.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cms.Parameters.AddWithValue("_whereclause", " and (Currency_Code = '" + basecurrency + "' or Currency_Code = '" + foreigncurrency + "' or BankCurrency_Flag = 0)");
                                                DataTable dt1c = db_connection.ExecuteQueryDataTableProcedure(cms);
                                                int basecurrency_id = 0, foreigncurrency_id = 0, bankcurrency_id = 0;
                                                double basespot_rate = 0, foreignspot_rate = 0;
                                                if (dt1c.Rows.Count > 1)
                                                {
                                                    for (int i = 0; i < dt1c.Rows.Count; i++)
                                                    {
                                                        string ccode = Convert.ToString(dt1c.Rows[i]["Currency_Code"]); int cid = Convert.ToInt32(dt1c.Rows[i]["Currency_ID"]);
                                                        double spot = Convert.ToDouble(dt1c.Rows[i]["Spot_Rate"]);
                                                        if (ccode == basecurrency) { basecurrency_id = cid; basespot_rate = spot; }
                                                        else if (ccode == foreigncurrency) { foreigncurrency_id = cid; foreignspot_rate = spot; }
                                                        else if (Convert.ToString(dt1c.Rows[i]["BankCurrency_Flag"]) == "0") { bankcurrency_id = cid; }
                                                    }
                                                }

                                                string StockBalance; string StockActivity = "", s = "";
                                                MySqlCommand cmd1 = null; DataTable dtAvgRate = null;
                                                double _CurrencyAmt = 0, _AvgRate = 0, _AmountInGbp = 0, _AvergeRate = 0;
                                                double _newAmtInGbp = 0, _AverageAmountInGBP = 0, _AverageCurrencyAmt;
                                                try
                                                {
                                                    StockActivity = "Updating foreign currency stock.";
                                                    using (cms = new MySqlCommand("sp_update_foreign_currency_stock", con))
                                                    {
                                                        if (con.State != ConnectionState.Open) { con.Open(); }
                                                        cms.CommandType = CommandType.StoredProcedure;
                                                        cms.Transaction = transaction;
                                                        cms.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                        cms.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                        cms.Parameters.AddWithValue("_till_ID", obj.Till_ID);
                                                        cms.Parameters.AddWithValue("_currencyD_ID", foreigncurrency_id);
                                                        cms.Parameters.AddWithValue("_currency_Amount", foreignamount);
                                                        cms.Parameters.AddWithValue("_flag", "In");
                                                        cms.Parameters.Add(new MySqlParameter("_stock", MySqlDbType.VarChar));
                                                        cms.Parameters["_stock"].Direction = ParameterDirection.Output;
                                                        cms.ExecuteNonQuery();
                                                        StockBalance = cms.Parameters["_stock"].Value.ToString();
                                                        //if (con.State != ConnectionState.Closed) { con.Close(); }
                                                    }
                                                    string[] stock = StockBalance.Split(',');
                                                    string BeforeStock = stock[0].Substring(3);
                                                    string AfterStock = stock[1].Substring(3);

                                                    StockActivity += " Branch ID: " + branch_id + ", Currency Code: " + foreigncurrency + ", Currency Amount: " + foreignamount + ", Pervious Stock: " + BeforeStock + ", Updated Stock: " + AfterStock + "";
                                                    CompanyInfo.InsertActivityLogDetails(StockActivity, 1, 0, obj.User_ID, Customer_ID, "Insert Transaction", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                                    #region Avg
                                                    cmd1 = new MySqlCommand("sp_select_average_rate_details");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Transaction = transaction;
                                                    cmd1.Parameters.AddWithValue("_CurrencyDId", foreigncurrency_id);
                                                    cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                    cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);

                                                    //if (obj.StockType.Id == 1) //till
                                                    //{
                                                    cmd1.Parameters.AddWithValue("_RateType", 1);
                                                    //}
                                                    //else if (obj.StockType.Id == 2) //shared till
                                                    //{
                                                    //    cmd.Parameters.AddWithValue("_RateType", 1);
                                                    //}

                                                    dtAvgRate = db_connection.ExecuteQueryDataTableProcedure(cmd1);

                                                    // check avg rate - if not present then insert
                                                    if (dtAvgRate.Rows.Count == 0)
                                                    {
                                                        _CurrencyAmt = obj.AmountInPKR;
                                                        _AvgRate = foreignspot_rate;
                                                        _AmountInGbp = _CurrencyAmt / _AvgRate;

                                                        cmd1 = new MySqlCommand("sp_save_average_rate_table", con);
                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                        cmd1.Transaction = transaction;
                                                        if (con.State != ConnectionState.Open) { con.Open(); }
                                                        cmd1.Parameters.AddWithValue("_CurrencyDId", foreigncurrency_id);
                                                        cmd1.Parameters.AddWithValue("_CurrencyAmt", _CurrencyAmt);
                                                        cmd1.Parameters.AddWithValue("_AmtInGbp", _AmountInGbp);
                                                        cmd1.Parameters.AddWithValue("_AvgRate", _AvgRate);
                                                        cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                        cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                                        cmd1.Parameters.AddWithValue("_DeleteStatus", 0);

                                                        //if (StockType.Id == 0) //vault
                                                        //{
                                                        //    cmd1.Parameters.AddWithValue("_RateType", 0);
                                                        //}
                                                        //else if (StockType.Id == 1) //till
                                                        //{
                                                        cmd1.Parameters.AddWithValue("_RateType", 1);
                                                        //}
                                                        //else if (StockType.Id == 2) //shared till
                                                        //{
                                                        //    cmd1.Parameters.AddWithValue("_RateType", 1);
                                                        //}
                                                        cmd1.ExecuteNonQuery();
                                                        //if (con.State != ConnectionState.Closed) { con.Close(); }
                                                    }
                                                    else
                                                    {
                                                        _CurrencyAmt = Convert.ToDouble(dtAvgRate.Rows[0]["Currency_Amount"].ToString());
                                                        _AmountInGbp = Convert.ToDouble(dtAvgRate.Rows[0]["AmountINGBP"].ToString());
                                                        _AvgRate = Convert.ToDouble(dtAvgRate.Rows[0]["Average_Rate"].ToString());
                                                        if (_AvgRate == 0) { _AvgRate = foreignspot_rate; }
                                                    }

                                                    _AverageAmountInGBP = Math.Round((obj.AmountInPKR / Math.Round(_AvgRate, 4)), 2);

                                                    _AverageCurrencyAmt = _CurrencyAmt + obj.AmountInPKR;
                                                    _newAmtInGbp = Math.Round((_AverageAmountInGBP + _AmountInGbp), 2);

                                                    if (_newAmtInGbp > 0)
                                                    {
                                                        _AvergeRate = _AverageCurrencyAmt / _newAmtInGbp;
                                                    }
                                                    s = Math.Round(_AvergeRate, 4).ToString();

                                                    if (_AverageCurrencyAmt <= 0)
                                                    {
                                                        _AverageCurrencyAmt = 0;
                                                        _AverageAmountInGBP = 0;
                                                        _AvergeRate = 0;
                                                    }
                                                    else
                                                    {
                                                        _AvergeRate = Convert.ToDouble(s);
                                                    }

                                                    cmd1 = new MySqlCommand("sp_update_average_rate_for_bureau_account_manager", con);
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Transaction = transaction;
                                                    if (con.State != ConnectionState.Open) { con.Open(); }
                                                    cmd1.Parameters.AddWithValue("_CurrencyAmount", _AverageCurrencyAmt);
                                                    cmd1.Parameters.AddWithValue("_AmountInGBP", _newAmtInGbp);
                                                    cmd1.Parameters.AddWithValue("_AverageRate", _AvergeRate);
                                                    cmd1.Parameters.AddWithValue("_CurrencyDId", foreigncurrency_id);
                                                    cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                    cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);

                                                    //if (StockType.Id == 0) //vault
                                                    //{
                                                    //    cmd1.Parameters.AddWithValue("_RateType", 0);
                                                    //}
                                                    //else if (StockType.Id == 1) //till
                                                    //{
                                                    cmd1.Parameters.AddWithValue("_RateType", 1);
                                                    //}
                                                    //else if (obj.StockType.Id == 2) //shared till
                                                    //{
                                                    //    cmd.Parameters.AddWithValue("_RateType", 1);
                                                    //}
                                                    cmd1.ExecuteNonQuery();
                                                    //if (con.State != ConnectionState.Closed) { con.Close(); }
                                                    #endregion
                                                }
                                                catch { }
                                                //UPDATE BASE CURRENCY STOCK                            
                                                StockActivity = "Updating base currency stock.";
                                                using (cms = new MySqlCommand("sp_update_base_currency_stock", con))
                                                {
                                                    if (con.State != ConnectionState.Open) { con.Open(); }
                                                    cms.CommandType = CommandType.StoredProcedure;
                                                    cms.Transaction = transaction;
                                                    cms.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    cms.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                    cms.Parameters.AddWithValue("_till_ID", obj.Till_ID);
                                                    if (ptid == 1)//"Cash"
                                                        cms.Parameters.AddWithValue("_currencyD_ID", basecurrency_id);
                                                    else
                                                        cms.Parameters.AddWithValue("_currencyD_ID", bankcurrency_id);
                                                    cms.Parameters.AddWithValue("_currency_Amount", totamount);
                                                    cms.Parameters.AddWithValue("_flag", "In");
                                                    cms.Parameters.Add(new MySqlParameter("_stock", MySqlDbType.VarChar));
                                                    cms.Parameters["_stock"].Direction = ParameterDirection.Output;
                                                    cms.ExecuteNonQuery();
                                                    StockBalance = cms.Parameters["_stock"].Value.ToString();
                                                    //if (con.State != ConnectionState.Closed) { con.Close(); }
                                                }
                                                string[] stock1 = StockBalance.Split(',');
                                                string BeforeStock1 = stock1[0].Substring(3);
                                                string AfterStock1 = stock1[1].Substring(3);
                                                StockActivity += " Branch ID: " + branch_id + ", Currency Code: " + basecurrency + ", Currency Amount: " + totamount + ", Pervious Stock: " + BeforeStock1 + ", Updated Stock: " + AfterStock1 + "";
                                                CompanyInfo.InsertActivityLogDetails(StockActivity, 1, obj.Transaction_ID, obj.User_ID, Customer_ID, "Insert Transaction", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                                #region BaseAvg
                                                cmd1 = new MySqlCommand("sp_select_average_rate_details");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Transaction = transaction;
                                                if (ptid == 1)//"Cash"
                                                    cmd1.Parameters.AddWithValue("_CurrencyDId", basecurrency_id);
                                                else
                                                    cmd1.Parameters.AddWithValue("_CurrencyDId", bankcurrency_id);

                                                cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);

                                                //if (obj.StockType.Id == 1) //till
                                                //{
                                                cmd1.Parameters.AddWithValue("_RateType", 1);
                                                //}
                                                //else if (obj.StockType.Id == 2) //shared till
                                                //{
                                                //    cmd.Parameters.AddWithValue("_RateType", 1);
                                                //}

                                                dtAvgRate = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                _CurrencyAmt = 0; _AvgRate = 0; _AmountInGbp = 0;
                                                // check avg rate - if not present then insert
                                                if (dtAvgRate.Rows.Count == 0)
                                                {
                                                    _CurrencyAmt = obj.AmountInGBP;
                                                    _AvgRate = basespot_rate;
                                                    _AmountInGbp = _CurrencyAmt / _AvgRate;

                                                    cmd1 = new MySqlCommand("sp_save_average_rate_table", con);
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Transaction = transaction;
                                                    if (con.State != ConnectionState.Open) { con.Open(); }
                                                    if (ptid == 1)//"Cash"
                                                        cmd1.Parameters.AddWithValue("_CurrencyDId", basecurrency_id);
                                                    else
                                                        cmd1.Parameters.AddWithValue("_CurrencyDId", bankcurrency_id);
                                                    cmd1.Parameters.AddWithValue("_CurrencyAmt", _CurrencyAmt);
                                                    cmd1.Parameters.AddWithValue("_AmtInGbp", _AmountInGbp);
                                                    cmd1.Parameters.AddWithValue("_AvgRate", _AvgRate);
                                                    cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                    cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                                    cmd1.Parameters.AddWithValue("_DeleteStatus", 0);

                                                    //if (StockType.Id == 0) //vault
                                                    //{
                                                    //    cmd1.Parameters.AddWithValue("_RateType", 0);
                                                    //}
                                                    //else if (StockType.Id == 1) //till
                                                    //{
                                                    cmd1.Parameters.AddWithValue("_RateType", 1);
                                                    //}
                                                    //else if (StockType.Id == 2) //shared till
                                                    //{
                                                    //    cmd1.Parameters.AddWithValue("_RateType", 1);
                                                    //}
                                                    cmd1.ExecuteNonQuery();
                                                    //if (con.State != ConnectionState.Closed) { con.Close(); }
                                                }
                                                else
                                                {
                                                    _CurrencyAmt = Convert.ToDouble(dtAvgRate.Rows[0]["Currency_Amount"].ToString());
                                                    _AmountInGbp = Convert.ToDouble(dtAvgRate.Rows[0]["AmountINGBP"].ToString());
                                                    _AvgRate = Convert.ToDouble(dtAvgRate.Rows[0]["Average_Rate"].ToString());
                                                    if (_AvgRate == 0) { _AvgRate = basespot_rate; }
                                                }
                                                _newAmtInGbp = 0; _AverageAmountInGBP = 0; _AverageCurrencyAmt = 0;
                                                _AverageAmountInGBP = Math.Round((obj.AmountInGBP / Math.Round(_AvgRate, 4)), 2);

                                                _AverageCurrencyAmt = _CurrencyAmt + obj.AmountInGBP;
                                                _newAmtInGbp = Math.Round((_AverageAmountInGBP + _AmountInGbp), 2);

                                                _AvergeRate = _AverageCurrencyAmt / _newAmtInGbp;
                                                s = Math.Round(_AvergeRate, 4).ToString();

                                                if (_AverageCurrencyAmt <= 0)
                                                {
                                                    _AverageCurrencyAmt = 0;
                                                    _AverageAmountInGBP = 0;
                                                    _AvergeRate = 0;
                                                }
                                                else
                                                {
                                                    _AvergeRate = Convert.ToDouble(s);
                                                }

                                                cmd1 = new MySqlCommand("sp_update_average_rate_for_bureau_account_manager", con);
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Transaction = transaction;
                                                if (con.State != ConnectionState.Open) { con.Open(); }
                                                cmd1.Parameters.AddWithValue("_CurrencyAmount", _AverageCurrencyAmt);
                                                cmd1.Parameters.AddWithValue("_AmountInGBP", _newAmtInGbp);
                                                cmd1.Parameters.AddWithValue("_AverageRate", _AvergeRate);
                                                if (ptid == 1)//"Cash"
                                                    cmd1.Parameters.AddWithValue("_CurrencyDId", basecurrency_id);
                                                else
                                                    cmd1.Parameters.AddWithValue("_CurrencyDId", bankcurrency_id);
                                                cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);

                                                //if (StockType.Id == 0) //vault
                                                //{
                                                //    cmd1.Parameters.AddWithValue("_RateType", 0);
                                                //}
                                                //else if (StockType.Id == 1) //till
                                                //{
                                                cmd1.Parameters.AddWithValue("_RateType", 1);
                                                //}
                                                //else if (obj.StockType.Id == 2) //shared till
                                                //{
                                                //    cmd.Parameters.AddWithValue("_RateType", 1);
                                                //}
                                                cmd1.ExecuteNonQuery();
                                                //if (con.State != ConnectionState.Closed) { con.Close(); }
                                                #endregion
                                                #endregion
                                            }
                                        }
                                        catch (Exception ee1) { CompanyInfo.InsertActivityLogDetails("App - Stock Update - " + ee1.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext); }
                                        #endregion stock
                                        try
                                        {
                                            //Insert Wallet Transaction
                                            if (obj.Wallet_ID > 0)
                                            {
                                                obj.transfer_type = 2; obj.paytype = 5;
                                                obj.exchangerate = 1; obj.fee = 0;
                                                MySqlCommand _cmd = new MySqlCommand("GetWallets");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Transaction = transaction;
                                                string whereclause = " and c.Client_ID=" + obj.Client_ID + " and w.Client_ID=" + obj.Client_ID + " and w.Customer_ID=" + Customer_ID + " and w.Wallet_ID = " + obj.Wallet_ID + "";
                                                _cmd.Parameters.AddWithValue("_whereclause", whereclause);
                                                DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                obj.Wallet_Amount = Convert.ToDouble(ds.Rows[0]["Wallet_Amount"]);
                                                if (dtwallets.Rows.Count > 0)
                                                {
                                                    obj.Currency_ID = Convert.ToInt32(dtwallets.Rows[0]["Currency_ID"]);
                                                    obj.oldwalletbalance = Convert.ToDouble(dtwallets.Rows[0]["Wallet_Balance"]);
                                                    obj.newwalletbalance = obj.oldwalletbalance - obj.Wallet_Amount;
                                                }
                                                obj.Transfer_Cost = Convert.ToDouble(ds.Rows[0]["Transfer_Cost"]);

                                                MySqlCommand cmd1 = new MySqlCommand("Update_WalletBalance");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd.Transaction = transaction;
                                                cmd1.Connection = con;
                                                cmd1.Parameters.AddWithValue("_newwalletbalance", obj.newwalletbalance);
                                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd1.Parameters.AddWithValue("_Wallet_ID", obj.Wallet_ID);
                                                double Transfer_Cost = Convert.ToDouble(obj.Transfer_Cost);

                                                int msg = cmd1.ExecuteNonQuery();
                                                cmd1.Dispose();
                                                if (msg > 0)
                                                {
                                                    cmd1 = new MySqlCommand("insert_wallet_transaction");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Transaction = transaction;
                                                    cmd1.Connection = con;
                                                    cmd1.Parameters.AddWithValue("_Wallet_ID", obj.Wallet_ID);
                                                    cmd1.Parameters.AddWithValue("_transfer_type", obj.transfer_type);
                                                    cmd1.Parameters.AddWithValue("_Currency_ID", obj.Currency_ID);
                                                    cmd1.Parameters.AddWithValue("_transfer_amount", obj.Wallet_Amount);
                                                    cmd1.Parameters.AddWithValue("_oldwalletbalance", obj.oldwalletbalance);
                                                    cmd1.Parameters.AddWithValue("_newwalletbalance", obj.newwalletbalance);
                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                    cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                                    cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    cmd1.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                    cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                    cmd1.Parameters.AddWithValue("_paytype", obj.paytype);
                                                    cmd1.Parameters.AddWithValue("_exchangerate", obj.exchangerate);
                                                    cmd1.Parameters.AddWithValue("_fee", obj.fee);

                                                    cmd1.Parameters.AddWithValue("_User_ID", 0);
                                                    cmd1.Parameters.AddWithValue("_AgentFlag", 1);
                                                    cmd1.Parameters.AddWithValue("_referee_id", 0);
                                                    cmd1.Parameters.AddWithValue("_Referral_Flag", 1);
                                                    obj.Wallet_Description = "Wallet Amount " + obj.Wallet_Amount + " used for transaction " + obj.ReferenceNo + ".";
                                                    cmd1.Parameters.AddWithValue("_Wallet_Description", obj.Wallet_Description);
                                                    msg = cmd1.ExecuteNonQuery();
                                                    if (msg > 0)
                                                    {
                                                        string act = "App - " + Convert.ToString(obj.Wallet_Currency) + " Wallet Balance used for transaction " + obj.ReferenceNo + ". Wallet Amount: " + obj.Wallet_Amount + " New Wallet Balance: " + obj.newwalletbalance + " Old Wallet Balance: " + obj.oldwalletbalance + " ";
                                                        CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertOnline", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);
                                                    }
                                                }
                                            }

                                            try
                                            {
                                                //Insert Discount Transaction
                                                obj.Discount_Amount = Convert.ToDouble(ds.Rows[0]["Discount_Amount"]);
                                                double Transfer_Cost = Convert.ToDouble(ds.Rows[0]["Transfer_Cost"]);
                                                if (obj.Discount_ID > 0)
                                                {
                                                    MySqlCommand cmd1 = new MySqlCommand("Insert_DiscountDetails");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Transaction = transaction;
                                                    cmd1.Connection = con;
                                                    cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                    cmd1.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                                                    cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                    cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    cmd1.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                    cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);

                                                    int msg = cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                                    //Get Usage limit
                                                    if (msg > 0)
                                                    {
                                                        CompanyInfo.InsertActivityLogDetails(" Discount Code " + Convert.ToString(obj.Discount_Code) + " applied for transaction " + obj.ReferenceNo + ". Discount " + Convert.ToString(obj.DiscountType) + ": " + obj.Discount_Amount + ". ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertOnline", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                                        cmd1 = new MySqlCommand("GetDiscountUsage");
                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                        cmd1.Transaction = transaction;
                                                        cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                        cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                        DataTable dtuse = db_connection.ExecuteQueryDataTableProcedure(cmd1); cmd1.Dispose();
                                                        if (dtuse.Rows.Count > 0)
                                                        {
                                                            int usage_limit = Convert.ToInt32(dtuse.Rows[0]["Usage_Limit"]);
                                                            int used_count = Convert.ToInt32(dtuse.Rows[0]["used_count"]);
                                                            if ((used_count + 1) >= usage_limit)
                                                            {
                                                                //update discount available status
                                                                cmd1 = new MySqlCommand("Update_DiscountAvailable");
                                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                                cmd1.Transaction = transaction;
                                                                cmd1.Connection = con;
                                                                
                                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                                cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                                cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                                cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                                            }
                                                        }
                                                    }
                                                }

                                            }
                                            catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }

                                        }
                                        catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }


                                        cmd2.Dispose();

                                        //Insert Bank details
                                        if (obj.PaymentDepositType_ID == 1)
                                        {
                                            if (bt.Rows.Count > 0)
                                            {
                                                cmd2 = new MySqlCommand("Insert_BankDepositDetails");//SP_Save_Beneificiary_BankDetails
                                                cmd2.CommandType = CommandType.StoredProcedure;
                                                cmd2.Transaction = transaction;
                                                cmd2.Connection = con;
                                                
                                                cmd2.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                                cmd2.Parameters.AddWithValue("_BBank_ID", Convert.ToInt32(bt.Rows[0]["BBank_ID"]));
                                                cmd2.Parameters.AddWithValue("_Account_Number", Convert.ToString(bt.Rows[0]["Account_Number"]));
                                                cmd2.Parameters.AddWithValue("_AccountHolderName", Convert.ToString(bt.Rows[0]["AccountHolderName"]));
                                                cmd2.Parameters.AddWithValue("_Branch", Convert.ToString(bt.Rows[0]["Branch"]));
                                                cmd2.Parameters.AddWithValue("_BranchCode", Convert.ToString(bt.Rows[0]["BranchCode"]));
                                                cmd2.Parameters.AddWithValue("_BankCode", Convert.ToString(bt.Rows[0]["BankCode"]));
                                                cmd2.Parameters.AddWithValue("_Ifsc_Code", Convert.ToString(bt.Rows[0]["Ifsc_Code"]));
                                                cmd2.Parameters.AddWithValue("_Beneficiary_Country_ID", Convert.ToInt32(bt.Rows[0]["Beneficiary_Country_ID"]));
                                                cmd2.Parameters.AddWithValue("_Beneficiary_City_ID", Convert.ToInt32(bt.Rows[0]["Beneficiary_City_ID"]));
                                                cmd2.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd2.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                cmd2.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                cmd2.Parameters.AddWithValue("_Benf_Iban", Convert.ToString(bt.Rows[0]["Iban_ID"]));
                                                cmd2.Parameters.AddWithValue("_Benf_BIC", Convert.ToString(bt.Rows[0]["BIC_Code"]));
                                                int bankmsg = cmd2.ExecuteNonQuery(); cmd2.Dispose();
                                                //reset to previous value                                    
                                            }
                                            notification_icon = "money-recive.jpg";
                                            notification_message = "<span class='cls-admin'transfer is <strong class='cls-deposite'> complete</strong>. Status- <strong>Deposited</strong>. <strong>Transaction ref. - " + Convert.ToString(obj.ReferenceNo) + "</strong></span><span class='cls-customer'> <strong>Transfer is Complete</strong><span>" + obj.ReferenceNo.ToString() + "</span><span class='cls-payment-img'><img src='assets/img/icon/status/checkmark.png' alt='image' class='imaged w16'> Deposited</span>,</span>";
                                            CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, obj.User_ID, Convert.ToInt32(obj.CB_ID), 0, 0, 1, obj.Transaction_ID, _srvTransactionContext);
                                        }
                                        obj.SOFID = Convert.ToInt32(ds.Rows[0]["SOFID"]);
                                        if (obj.SOFID > 0 && Convert.ToString(obj.SourceComment_Flag) == "1")
                                        {
                                            cmd2 = new MySqlCommand("Update_TxnIDSof");
                                            cmd2.CommandType = CommandType.StoredProcedure;
                                            cmd2.Connection = con;
                                            cmd2.Transaction = transaction;
                                            cmd2.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                            cmd2.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd2.Parameters.AddWithValue("_SourceId", obj.SOFID);
                                            int sourcesuccess = cmd2.ExecuteNonQuery(); cmd2.Dispose();
                                        }

                                        CompanyInfo.InsertActivityLogDetails("App - Transaction Details : Reference: " + obj.ReferenceNo + ", Sender Name: " + Convert.ToString(ct.Rows[0]["First_Name"]) + ", Receiver Name: " + Convert.ToString(bt.Rows[0]["Beneficiary_Address"]) + "," +
                                            " Amount: " + obj.AmountInGBP + " " + obj.FromCurrency_Code + ", <br />Exchange Rate: " + obj.Exchange_Rate + ", Amount in Foreign Currency: " + obj.AmountInPKR + " " + obj.Currency_Code + ", Transfer Fees:" + obj.Transfer_Fees + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Online", obj.CB_ID, obj.Client_ID, "Insert Transaction", _srvTransactionContext);
                                        CompanyInfo.InsertActivityLogDetails("App - Email sending initiated on send money success.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send-Money", _srvTransactionContext);


                                    }
                                    else
                                    {
                                        ds.Rows[0]["Status"] = 1;
                                        ds.Rows[0]["Refno"] = obj.ReferenceNo;
                                        ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;
                                        //ds.Rows.Add(1, obj.ReferenceNo, Cust_ReferanceNo);
                                    }
                                }
                            }
                            else
                            {
                                ds.Rows[0]["Status"] = 3;
                                ds.Rows[0]["Refno"] = obj.ReferenceNo;
                                ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;
                                //ds.Rows.Add(1, obj.ReferenceNo, Cust_ReferanceNo);
                            }
                        }

                        cmd = new MySqlCommand("CheckDuplicateRefNo");
                        cmd.CommandType = CommandType.StoredProcedure;
                        //cmd.Transaction = transaction;
                        cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                        cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                        ds1 = db_connection.ExecuteQueryDataTableProcedure(cmd);
                        if (ds1.Rows.Count > 0)//obj.PType_ID we can use this for PayByCard to avoid rollback
                        {
                            transaction.Rollback();
                            CompanyInfo.InsertActivityLogDetails("App - Transaction Rollback due to Duplicate reference on send money success. Transaction Reference: " + obj.ReferenceNo, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Online Transfer-Transaction Rollback", obj.CB_ID, obj.Client_ID, "Send-Money", _srvTransactionContext);
                            ds.Rows[0]["Status"] = 0;
                            ds.Rows[0]["Transaction_ID"] = ds1.Rows[0]["Transaction_ID"];
                            ds.Rows[0]["Refno"] = obj.ReferenceNo;
                            ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;
                        }
                        else
                        {
                            if (dtc != null && dtc.Rows.Count > 0)
                            {
                                try
                                {
                                    string URL = Convert.ToString(dtc.Rows[0]["Company_URL_Admin"]);
                                    string cust_url = Convert.ToString(dtc.Rows[0]["Company_URL_Customer"]);
                                    HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(URL + "Email/NewSendmoney-SuccessMailforCash.htm");

                                    httpRequest.UserAgent = "Code Sample Web Client";
                                    HttpWebResponse webResponse = (HttpWebResponse)httpRequest.GetResponse();
                                    using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                                    {
                                        body = reader.ReadToEnd();
                                    }
                                    string First_Name = Convert.ToString(ct.Rows[0]["First_Name"]);
                                    string Email_ID = Convert.ToString(ct.Rows[0]["Email_ID"]);
                                    string email = Email_ID.Trim();

                                    body = body.Replace("[name]", First_Name);
                                    body = body.Replace("[receivername]", Convert.ToString(bt.Rows[0]["Beneficiary_Name"]));

                                    //----sender Details
                                    body = body.Replace("[senderadd]", Convert.ToString(ct.Rows[0]["Address"]));
                                    body = body.Replace("[senderphoneno]", Convert.ToString(ct.Rows[0]["Phone_Number"]));
                                    body = body.Replace("[sendermobno]", Convert.ToString(ct.Rows[0]["Mobile_Number"]));
                                    body = body.Replace("[senderemailid]", Email_ID);
                                    body = body.Replace("[amtingbp]", obj.AmountInGBP.ToString("N2"));
                                    //body = body.Replace("[amtinforeign]", obj.AmountInPKR.ToString());
                                    body = body.Replace("[transferfees]", obj.Transfer_Fees.ToString("N2"));
                                    body = body.Replace("[Currency]", obj.Currency_Code);
                                    body = body.Replace("[Customerrefno]", Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]));
                                    body = body.Replace("[Hours]", Convert.ToString(dtc.Rows[0]["Cancel_Transaction_Hours"]));
                                    newtotamount = Convert.ToDouble(obj.AmountInGBP) + Convert.ToDouble(obj.Transfer_Fees); //double newtotamount = Convert.ToDouble(obj.AmountInGBP) + Convert.ToDouble(obj.Transfer_Fees);
                                    body = body.Replace("[totAmt]", newtotamount.ToString("N2"));

                                    body = body.Replace("[exchangerate]", obj.Exchange_Rate.ToString("N2"));

                                    //----sender Details

                                    body = body.Replace("[RefNo]", obj.ReferenceNo);
                                    body = body.Replace("[receiveradd]", Convert.ToString(bt.Rows[0]["Beneficiary_Address"]));
                                    body = body.Replace("[receiverphoneno]", Convert.ToString(bt.Rows[0]["Beneficiary_Telephone"]));
                                    body = body.Replace("[receivermobno]", Convert.ToString(bt.Rows[0]["Beneficiary_Mobile"]));
                                    body = body.Replace("[receiverbankname]", Convert.ToString(bt.Rows[0]["Bank_Name"]));
                                    body = body.Replace("[receiveraccountno]", Convert.ToString(bt.Rows[0]["Account_Number"]));
                                    body = body.Replace("[ttype]", obj.PaymentDepositType_ID.ToString());
                                    body = body.Replace("[countrymsg]", Convert.ToString(""));
                                    body = body.Replace("[CashCollectionMsg]", Convert.ToString(""));
                                    body = body.Replace("[BaseCurrency]", Convert.ToString(dtc.Rows[0]["BaseCurrency_Code"]));
                                    string timezone = Convert.ToString(dtc.Rows[0]["BaseCurrency_Timezone"]);
                                    string insert_date = ""; //Digvijay changes for date format change on email
                                    if (timezone != "" && timezone != null)
                                    {
                                        var britishZone = TimeZoneInfo.FindSystemTimeZoneById("" + timezone + "");
                                        var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                        insert_date = d.ToString("dd/MM/yyyy");
                                    }
                                    else
                                    {
                                        insert_date = DateTime.Now.ToString("dd/MM/yyyy");
                                    }
                                    /*DataTable proceed_date_table = CompanyInfo.ConvertDateToCompanyConfiguredFormat(insert_date, Convert.ToInt32(obj.Client_ID));
                                    string proceed_date = proceed_date_table.Rows[0]["FormattedDate"].ToString();
                                    body = body.Replace("[TransDate]", proceed_date);//Digvijay changes for date format change on email
                                    */
                                    body = body.Replace("[TransDate]", insert_date);//Digvijay changes for date format change on email

                                    body = body.Replace("[PaymentType]", Convert.ToString(ds.Rows[0]["Ptype"]));
                                    body = body.Replace("[TransferType]", Convert.ToString(ds.Rows[0]["Type_Name"]));

                                    var wallet_lbl = ""; string wallet_currency = "";
                                    newtotamount1 = newtotamount;
                                    double wallet_amt = 0;
                                    if (obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                                    {
                                        if (Convert.ToString(obj.Wallet_Perm) == "0")
                                        {
                                            if (Convert.ToString(obj.Wallet_Amount) != "" && Convert.ToString(obj.Wallet_Amount) != null)
                                            {
                                                obj.Wallet_Amount = Convert.ToDouble(obj.Wallet_Amount);
                                                rewardamount = obj.Wallet_Amount;
                                                lbl = "Wallet";
                                                //wallet_type added by siddhi
                                                if (Convert.ToInt32(obj.Wallet_Currency_type) == 1)
                                                {
                                                    newtotamount1 = newtotamount - rewardamount;
                                                    wallet_amt = newtotamount - rewardamount;
                                                    wallet_currency = obj.FromCurrency_Code;
                                                    wallet_lbl = "Total Base Amount: <span style='color:#000;font-weight: bold; '> " + wallet_currency + " " + wallet_amt.ToString("N2") + "</span>";
                                                }
                                                else if (Convert.ToInt32(obj.Wallet_Currency_type) == 2)
                                                {
                                                    wallet_currency = obj.Currency_Code;
                                                    obj.AmountInPKR = obj.AmountInPKR - rewardamount;
                                                    wallet_amt = Convert.ToDouble(obj.AmountInPKR) + rewardamount;
                                                    wallet_lbl = "Total Foreign Amount: <span style='color:#000;font-weight: bold; '> " + wallet_currency + " " + wallet_amt.ToString("N2") + "</span>";
                                                }
                                            }
                                        }
                                    }

                                    if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                                    {
                                        if (Convert.ToString(obj.Discount_Perm) == "0")
                                        {
                                            if (Convert.ToString(obj.Discount_Amount) != "0" && Convert.ToString(obj.Discount_Amount) != "" && Convert.ToString(obj.Discount_Amount) != null)
                                            {

                                                wallet_currency = obj.FromCurrency_Code;
                                                obj.Discount_Amount = Convert.ToDouble(obj.Discount_Amount);
                                                rewardamount = obj.Discount_Amount;
                                                wallet_amt = newtotamount - rewardamount;
                                                lbl = "Discount";
                                                wallet_lbl = "Total Base Currency Amount: <span style='color:#000;font-weight: bold; '> " + wallet_currency + " " + wallet_amt.ToString("N2") + "</span>";

                                            }
                                        }
                                    }
                                    body = body.Replace("[amtinforeign]", obj.AmountInPKR.ToString());
                                    body = body.Replace("[totAmt]", newtotamount1.ToString("N2"));
                                    if (rewardamount > 0)
                                    {
                                        //body = body.Replace("[transaction_amount]", "<h3>Total Transaction Amount:&nbsp;<label class='orange'>" + obj.FromCurrency_Code + " " + newtotamount.ToString("0.00") + "</label></h3>");
                                        //body = body.Replace("[discountwallet_amount]", "<h3>" + lbl + " Amount:&nbsp;<label class='orange'>" + obj.FromCurrency_Code + " " + rewardamount.ToString("0.00") + "</label></h3>");
                                        body = body.Replace("[transaction_amount]", wallet_lbl);
                                        body = body.Replace("[discountwallet_amount]", "" + lbl + " Amount: <span style='color:#000;font-weight: bold; '>" + wallet_currency + " " + rewardamount.ToString("N2") + "</span>");
                                    }
                                    else
                                    {
                                        body = body.Replace("[transaction_amount]", "");
                                        body = body.Replace("[discountwallet_amount]", "<br/>");
                                    }


                                    //added by vyankatesh
                                    DataTable dtc_company_bank_details = (DataTable)CompanyInfo.GetBaseCurrencywisebankdetails(obj.Client_ID, obj.FromCurrency_Code, obj.PaymentDepositType_ID, obj.DeliveryType_Id);

                                    //for bank transfer //added by vyankatesh this code added from mail
                                    body = body.Replace("[wire1]", Convert.ToString(dtc_company_bank_details.Rows[0]["AccountHolderName"]));
                                    body = body.Replace("[wire2]", Convert.ToString(dtc_company_bank_details.Rows[0]["BankName"]));
                                    body = body.Replace("[wire3]", Convert.ToString(dtc_company_bank_details.Rows[0]["AccountNumber"]));
                                    body = body.Replace("[wire5]", Convert.ToString(dtc_company_bank_details.Rows[0]["Sort_ID"]));


                                    string paybtn = "";
                                    body = body.Replace("[link]", paybtn);
                                    //Subject                        
                                    subject = "[company_name] - Money Transfer Request Submitted Successfully - " + Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]) + " ";
                                    if (obj.PaymentType_ID == 2)
                                    {
                                        body = body.Replace("[divwirestyle]", "display:block;");
                                        body = body.Replace("[Note3]", Convert.ToString(ds.Rows[0]["Review_Transfer_Message"]));
                                    }
                                    else
                                    {
                                        body = body.Replace("[divwirestyle]", "display:none;");
                                        body = body.Replace("[Note3]", "");
                                    }
                                    body = body.Replace("[wire6]", Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]));
                                    string mail_send = (string)CompanyInfo.Send_Mail(dtc, email, body, subject, obj.Client_ID, obj.CB_ID, "Insert Transaction", "", "", _srvTransactionContext);

                                    if (mail_send == "Success")
                                    {
                                        CompanyInfo.InsertActivityLogDetails("App - Email sent successfully on send money success.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                    }
                                    else
                                    {
                                        CompanyInfo.InsertActivityLogDetails("App - " + mail_send, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                    }
                                }
                                catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App InsertOnline Error Send Email - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }
                            }
                            transaction.Commit();
                            #region check location
                            string act = "";
                            try
                            {
                                obj.userAgent = (context.Request.Headers["User-Agent"]).ToString();
                                DataTable chkLocation1 = CompanyInfo.check_location(obj.Client_ID, obj.userAgent, _srvTransactionContext);
                                Boolean chkLocation = true;
                                string country_log = "";
                                string device_ty = "";

                                try
                                {
                                    chkLocation = Convert.ToBoolean(chkLocation1.Rows[0]["is_valid"]);
                                    country_log = Convert.ToString(chkLocation1.Rows[0]["Country"]);
                                    device_ty = Convert.ToString(chkLocation1.Rows[0]["device_ty"]);

                                }
                                catch
                                {

                                }
                                if (!chkLocation)
                                {
                                    //Notification
                                    act = act + " | location is invalid";
                                    string notification_icon1 = "money-recive.jpg";
                                    string notification_message1 = "<span class='cls-admin'>Transaction <strong class='cls-new-benf'>Submitted from New Location</strong></span>";
                                    CompanyInfo.save_notification_compliance(notification_message1, notification_icon1, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), obj.Client_ID, 1, 0, obj.Branch_ID, 0, 1, 1, obj.Transaction_ID, _srvTransactionContext);
                                    act = act + " |notification sent for new location";

                                    //email
                                    string subject1 = string.Empty;
                                    string body1 = string.Empty;
                                    HttpWebRequest httpRequest = null, httpRequest1 = null;
                                    DataTable d2 = (DataTable)CompanyInfo.getCustomerDetails(obj.Client_ID, Customer_ID);
                                    string sendmsg = "Transaction Submitted from New Location";
                                    string company_name = Convert.ToString(dtc.Rows[0]["Company_Name"]);
                                    string URL = Convert.ToString(dtc.Rows[0]["Company_URL_Admin"]);
                                    string cust_url = Convert.ToString(dtc.Rows[0]["Company_URL_Customer"]);
                                    httpRequest = (HttpWebRequest)WebRequest.Create(URL + "Email/new-login.html");
                                    httpRequest.UserAgent = "Code Sample Web Client";
                                    HttpWebResponse webResponse = (HttpWebResponse)httpRequest.GetResponse();
                                    using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                                    {
                                        body1 = reader.ReadToEnd();
                                    }
                                    body1 = body1.Replace("[name]", Convert.ToString(ct.Rows[0]["First_Name"]));
                                    string enc_ref = CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]), true);
                                    string link = cust_url + "/secure-account-verfiy?reference=" + enc_ref;
                                    body1 = body1.Replace("[link]", link);
                                    body1 = body1.Replace("[New_Login_Detected]", "Transaction Submitted from New Location");
                                    body1 = body1.Replace("[country]", country_log);
                                    body1 = body1.Replace("[time]", (Convert.ToDateTime(CompanyInfo.gettime(obj.Client_ID, _srvTransactionContext))).ToString("dddd, dd MMMM yyyy HH:mm:ss"));
                                    body1 = body1.Replace("[location_msg]", "We noticed a transaction from your account from a location that you have not used before. If this wasn't you, we'll help you secure your account.");
                                    body1 = body1.Replace("[device]", device_ty);


                                    string EmailID = Convert.ToString(ct.Rows[0]["Email_ID"]);

                                    httpRequest1 = (HttpWebRequest)WebRequest.Create(URL + "Email/TransactionLocation.txt");
                                    httpRequest1.UserAgent = "Code Sample Web Client";
                                    HttpWebResponse webResponse1 = (HttpWebResponse)httpRequest1.GetResponse();
                                    using (StreamReader reader = new StreamReader(webResponse1.GetResponseStream()))
                                    {
                                        subject1 = reader.ReadLine();
                                    }
                                    subject1 += ct.Rows[0]["WireTransfer_ReferanceNo"];
                                    string send_mail = (string)CompanyInfo.Send_Mail(dtc, EmailID, body1, subject1, obj.Client_ID, obj.Branch_ID, "", "", "", _srvTransactionContext);
                                    CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);

                                    //Notification
                                    act = act + "| email sent for New Transaction Location ";

                                }
                            }
                            catch (Exception ex)
                            {
                                act = act + Convert.ToString(ex);
                                CompanyInfo.InsertActivityLogDetails("check location " + Convert.ToString(obj.Discount_Code) + ". transaction " + obj.ReferenceNo + ". Error: " + Convert.ToString(ex) + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Location", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                            }
                            CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);

                            #endregion
                        }
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        ds.Rows[0]["Status"] = 2;
                        ds.Rows[0]["Refno"] = ex.ToString();
                        ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;
                        //ds.Rows.Add(2, ex.ToString(), Cust_ReferanceNo);
                        //Error Log Handled
                        Model.ErrorLog objError = new Model.ErrorLog();
                        objError.User = new Model.User();
                        objError.Error = "Api : Login --" + ex.ToString();
                        objError.Date = DateTime.Now;
                        objError.User_ID = 1;
                        objError.Client_ID = obj.Client_ID;

                        Service.srvErrorLog srvError = new Service.srvErrorLog();
                        srvError.Create(objError, _srvTransactionContext);
                    }
                    finally
                    {
                        CompanyInfo.InsertActivityLogDetails(linkActivity, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertOnline", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);

                        try
                        {
                            if (con.State != ConnectionState.Closed)
                                con.Close();
                        }
                        catch { }
                    }

                }
            }
            finally
            {
                CompanyInfo.InsertActivityLogDetails(linkActivity, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertOnline", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);

                /*_cmdSession = new MySqlCommand("UpdateTransactionJourney");
                _cmdSession.CommandType = CommandType.StoredProcedure;
                _cmdSession.Parameters.AddWithValue("_Token", token);
                _cmdSession.Parameters.AddWithValue("_SendMoneyToken", DBNull.Value);
                _cmdSession.Parameters.AddWithValue("_RewardToken", DBNull.Value);
                _cmdSession.Parameters.AddWithValue("_SOFdocupload", DBNull.Value);
                _cmdSession.Parameters.AddWithValue("_sendmoneyhashexpire", DBNull.Value);
                _cmdSession.Parameters.AddWithValue("_TransactionStartdate", DBNull.Value);
                if (check_validity == null)
                {
                    _cmdSession.Parameters.AddWithValue("_chk_validity", DBNull.Value);

                }
                else
                {
                    _cmdSession.Parameters.AddWithValue("_chk_validity", DBNull.Value);

                }
                _cmdSession.Parameters.AddWithValue("_flag", 4);
                _cmdSession.Parameters.AddWithValue("_uploadSOF", 1);
                string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmdSession));*/
            }

            return ds;
        }

        public DataTable InsertOnline(Model.Transaction obj, HttpContext context)
        {
            _srvTransactionContext = context;
            string Cust_ReferanceNo = "";
            DataTable ds = new DataTable();
            ds.Columns.Add("Status", typeof(int));
            ds.Columns.Add("Refno", typeof(string));
            ds.Columns.Add("CustRefno", typeof(string));
            using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
            {
                if (con.State != ConnectionState.Open)
                    con.Open();

                int chk_transaction_status = 1;
                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
                MySqlCommand _cmd_comment = new MySqlCommand("AddCustomerComments");
                string cust_Comment = "";

                MySqlCommand cmd = new MySqlCommand("View_IncompleteTransfer");
                cmd.CommandType = CommandType.StoredProcedure;
                string where = "";
                if (obj.PaymentGateway_ID == 8)
                    obj.ReferenceNo= CompanyInfo.Decrypt(obj.ReferenceNo, true);
                if (obj.Client_ID != null && obj.Client_ID != -1)
                {
                    where = where + " and aa.Client_ID = " + obj.Client_ID;
                }
                //if (obj.ReferenceNo != "" && obj.ReferenceNo != null)
                //{
                where = where + " and ReferenceNo like '%" + obj.ReferenceNo + "%'";
                //}
                //if (Customer_ID > 0)
                //{
                where = where + " and  aa.customer_Id=" + Customer_ID;
                //}
                cmd.Parameters.AddWithValue("_whereclause", where);
                ds = db_connection.ExecuteQueryDataTableProcedure(cmd);


                DataTable dtc = CompanyInfo.get(obj.Client_ID, _srvTransactionContext);
                //Get Customer Details   
                MySqlCommand cmd3 = new MySqlCommand("customer_details_by_param");//Customer_getallcustdetails
                cmd3.CommandType = CommandType.StoredProcedure;
                cmd3.Connection = con;
                string _whereclause = " and cr.Client_ID=" + obj.Client_ID;
                //if (Customer_ID > 0)
                //{
                _whereclause = " and cr.Customer_ID=" + Customer_ID;
                //}
                cmd3.Parameters.AddWithValue("_whereclause", _whereclause);
                cmd3.Parameters.AddWithValue("_SecurityKey", CompanyInfo.SecurityKey());
                DataTable ct = db_connection.ExecuteQueryDataTableProcedure(cmd3);





                obj.Beneficiary_ID = Convert.ToInt32(ds.Rows[0]["Beneficiary_ID"]);
                //Get Receiver Details
                MySqlCommand cmd2 = new MySqlCommand("Beneficiary_Search");//SP_Save_Beneificiary_BankDetails
                cmd2.CommandType = CommandType.StoredProcedure;
                cmd2.Connection = con;
                string _where = " and bb.Beneficiary_ID=" + obj.Beneficiary_ID + " and bb.Client_ID=" + obj.Client_ID + "";
                cmd2.Parameters.AddWithValue("_whereclause", _where);
                DataTable bt = db_connection.ExecuteQueryDataTableProcedure(cmd2);

                string Customer_name = Convert.ToString(ct.Rows[0]["fullname1"]);
                obj.Beneficiary_Name = Convert.ToString(bt.Rows[0]["Beneficiary_Name"]);


                ds.Columns.Add("Status", typeof(int));
                ds.Columns.Add("Refno", typeof(string));
                ds.Columns.Add("CustRefno", typeof(string));

                cmd = new MySqlCommand("CheckDuplicateRefNo");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                DataTable ds1 = db_connection.ExecuteQueryDataTableProcedure(cmd);


                //MySqlTransaction transaction;
                //transaction = con.BeginTransaction(IsolationLevel.ReadCommitted);
                try
                {
                    string subject = string.Empty; string body = string.Empty; string lbl = "";
                    Double newtotamount = 0; Double newtotamount1 = 0; Double rewardamount = 0; Double rewardamount1 = 0;
                    if (ds.Rows.Count > 0)
                    {
                        if (ds1.Rows.Count > 0)
                        {
                            obj.Transaction_ID = Convert.ToInt32(ds.Rows[0]["Transaction_ID"]);
                            using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                cmd.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                int status = cmd.ExecuteNonQuery();
                            }
                            ds.Rows[0]["Transaction_ID"] = ds1.Rows[0]["Transaction_ID"];
                        }


                        if (Convert.ToString(ds.Rows[0]["Delete_Status"]) == "0" && ds1.Rows.Count == 0)
                        {
                            obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID, _srvTransactionContext);
                            DateTime dateTime = Convert.ToDateTime(obj.Record_Insert_DateTime);
                            string FromCurrency_Code = Convert.ToString(ds.Rows[0]["FromCurrency_Code"]);
                            obj.FromCurrency_Code = FromCurrency_Code;

                            #region checklimits
                            MySqlCommand _cmdl = new MySqlCommand("GetPermissions");
                            _cmdl.CommandType = CommandType.StoredProcedure;
                            _cmdl.Parameters.AddWithValue("_whereclause", "");
                            _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                            DataTable dttp = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                            //Check Daily Transfer Count perm
                            int chkdailycount = 1;
                            DataRow[] dr = dttp.Select("PID=59");
                            if (dr.Count() > 0)
                            {
                                foreach (DataRow drr in dr)
                                {
                                    chkdailycount = Convert.ToInt32(drr["Status_ForCustomer"]);
                                }
                            }
                            //Check daily limit perm
                            int chkdailylimit = 1;
                            dr = dttp.Select("PID=26");
                            if (dr.Count() > 0)
                            {
                                foreach (DataRow drr in dr)
                                {
                                    chkdailylimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                                }
                            }
                            DataTable dds = null;
                            if (chkdailylimit == 0 || chkdailycount == 0)
                            {
                                _cmdl = new MySqlCommand("customer_transferamount_minmax");
                                _cmdl.CommandType = CommandType.StoredProcedure;
                                _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                dds = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                            }
                            //Check Daily Transfer Count
                            if (chkdailycount == 0)
                            {
                                if (dds.Rows.Count > 0)
                                {
                                    int TotalDailyTransfer_count = Convert.ToInt32(dds.Rows[0]["Daily_Transfer_Count"]);
                                    _cmdl = new MySqlCommand("CustTotal_Amount");
                                    _cmdl.CommandType = CommandType.StoredProcedure;
                                    _cmdl.Parameters.AddWithValue("_From_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                                    _cmdl.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    _cmdl.Parameters.AddWithValue("_To_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                                    _cmdl.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    _cmdl.Parameters.AddWithValue("_FromCurrency_Code", obj.FromCurrency_Code);
                                    DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmdl);
                                    if ((sd.Rows.Count + 1) > TotalDailyTransfer_count)
                                    {
                                        string notification_icon = "tranfer-limit-exceeded.jpg";
                                        string notification_message = "<span class='cls-admin'>Daily transfer count <strong class='cls-cancel'>reached. Customer is on confirmation page.</strong></span><span class='cls-customer'></span>";
                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, Convert.ToInt32(obj.User_ID), Convert.ToInt32(obj.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                        //daily_transfer_count = 1;// count exceeded
                                        //daily_transfer_msg = "We are unable to process your transfer request at the moment. Please contact Support Team with your transfer request.";                                                                               
                                    }
                                }
                            }
                            #endregion checklimits

                            /**********************  Submit Transaction   **********************************/

                            obj.TransactionType_ID = 1;
                            obj.Delete_Status = 0;
                            obj.PaymentReceived_ID = 2;
                            obj.PartPay_Flag = 1;
                            obj.ManualRateChangedFlag = 1;
                            obj.TransactionStatus_ID = 1;
                            int ptid = Convert.ToInt32(ds.Rows[0]["PaymentType_ID"]);
                            try
                            {
                                MySqlCommand _cmd = new MySqlCommand("GetIDScanResultOnPerm");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_whereclause", " and dd.Customer_ID=" + Customer_ID);
                                _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                _cmd.Parameters.AddWithValue("_Branch_ID", Convert.ToInt32(ds.Rows[0]["CB_ID"]));
                                DataTable ids = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                if (ids.Rows.Count > 0)
                                {
                                    if (Convert.ToInt32(ids.Rows[0]["FrontResult"]) > 0 || Convert.ToInt32(ids.Rows[0]["LivenessResult"]) > 0 || Convert.ToInt32(ids.Rows[0]["FaceMatchResult"]) > 0)
                                    {
                                        obj.TransactionStatus_ID = 6;// Transaction should be on Hold for Invalid IDs
                                        #region transfercomment
                                        cust_Comment += "Hold Reason: Transaction should be on Hold for Invalid IDs";
                                        int TransferPerk_Flag = 1; //remind me flag
                                        obj.Delete_Status = 0;
                                        int status = 0;

                                        _cmd_comment.CommandType = CommandType.StoredProcedure;
                                        _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                        _cmd_comment.Parameters.AddWithValue("_comments", obj.Comment);
                                        _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                        _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                        _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                        _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                        _cmd_comment.Parameters.AddWithValue("_Status", 0);

                                        _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                        _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                        chk_transaction_status = 0;
                                        #endregion
                                    }
                                }

                                #region check_sanction
                                int chk_reponse_benef = 10; int chk_reponse_cust = 10;
                                if (obj.TransactionStatus_ID != 6)
                                {
                                    if (obj.sanction_responce_bene_aml != 10 && obj.sanction_responce_bene_aml != 4 && obj.sanction_responce_bene_aml != 0)
                                    {
                                        chk_reponse_benef = obj.sanction_responce_bene_aml;
                                    }
                                    else if (  obj.sanction_responce_bene_kyc != 10 && obj.sanction_responce_bene_kyc != 4 && obj.sanction_responce_bene_kyc != 0)
                                    {
                                        chk_reponse_benef = obj.sanction_responce_bene_kyc;
                                    }
                                    else if (  obj.sanction_responce_cust_aml != 10 && obj.sanction_responce_cust_aml != 4 && obj.sanction_responce_cust_aml != 0)
                                    {
                                        chk_reponse_cust = obj.sanction_responce_cust_aml;
                                    }
                                    else if (  obj.sanction_responce_cust_kyc != 10 && obj.sanction_responce_cust_kyc != 4 && obj.sanction_responce_cust_kyc != 0)
                                    {
                                        chk_reponse_cust = obj.sanction_responce_cust_kyc;
                                    }
                                    if (chk_reponse_cust != 10 && chk_reponse_cust != 4 && chk_reponse_cust != 0)
                                    {
                                        #region transfercomment
                                        obj.TransactionStatus_ID = 6;
                                        if (chk_reponse_cust == 1)
                                        {
                                            cust_Comment = "Hold Reason: Customer found in PEP sanctions list";
                                        }
                                        if (chk_reponse_cust == 2)
                                        {
                                            cust_Comment = "Hold Reason: Customer found in International sanctions list";
                                        }
                                        if (chk_reponse_cust == 3)
                                        {
                                            cust_Comment = "Hold Reason: Customer found in PEP and International sanctions list";
                                        }

                                        int TransferPerk_Flag = 1; //remind me flag
                                        obj.Delete_Status = 0;
                                        int status = 0;

                                        _cmd_comment.CommandType = CommandType.StoredProcedure;
                                        _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                        _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                        _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                        _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                        _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                        _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                        _cmd_comment.Parameters.AddWithValue("_Status", 2);

                                        _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                        _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                        chk_transaction_status = 0;
                                        #endregion
                                    }

                                    else if (chk_reponse_benef != 10 && chk_reponse_benef != 4 && chk_reponse_benef != 0)
                                    {

                                        #region transfercomment
                                        obj.TransactionStatus_ID = 6;
                                        if (chk_reponse_benef == 1)
                                        {
                                            cust_Comment = "Hold Reason: Beneficiary found in PEP Sanctions list";
                                        }
                                        if (chk_reponse_benef == 2)
                                        {
                                            cust_Comment = "Hold Reason: Beneficiary found in International Sanctions list";
                                        }
                                        if (chk_reponse_benef == 3)
                                        {
                                            cust_Comment = "Hold Reason: Beneficiary found in PEP and International Sanctions list";
                                        }
                                        int TransferPerk_Flag = 1; //remind me flag
                                        obj.Delete_Status = 0;
                                        int status = 0;

                                        _cmd_comment.CommandType = CommandType.StoredProcedure;
                                        _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                        _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                        _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                        _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", TransferPerk_Flag);
                                        _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                        _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                        _cmd_comment.Parameters.AddWithValue("_Status", 2);

                                        _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                        _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                        chk_transaction_status = 0;
                                        #endregion
                                    }
                                }
                                #endregion


                                if (obj.TransactionStatus_ID != 6)
                                {
                                    obj.Record_Insert_DateTime = CompanyInfo.gettime(obj.Client_ID, Customer_ID.ToString(), obj.Country_ID, _srvTransactionContext);
                                    _cmd = new MySqlCommand("GetPermissions");
                                    _cmd.CommandType = CommandType.StoredProcedure;

                                    _cmd.Parameters.AddWithValue("_whereclause", " and PID in (79 , 81 , 82 , 83, 94)");
                                    _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                    //_cmd.Parameters.AddWithValue("_Branch_ID", t.CB_ID);
                                    DataTable ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                    if (ids1.Rows.Count > 0)
                                    {
                                        //if (Convert.ToInt32(ids1.Rows[0]["Status_ForCustomer"]) == 0)
                                        //{
                                        //MySqlTransaction transaction;
                                        if (con.State != ConnectionState.Open)
                                            con.Open();
                                        //transaction = cn.BeginTransaction(IsolationLevel.ReadCommitted);

                                        String Record_Insert_Date = obj.Record_Insert_DateTime.Substring(0, 10);
                                        _cmd = new MySqlCommand("GetTransactions", con);
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_pid80", ids1.Rows[0]["Status_ForCustomer"]);
                                        _cmd.Parameters.AddWithValue("_pid81", ids1.Rows[1]["Status_ForCustomer"]);
                                        _cmd.Parameters.AddWithValue("_pid82", ids1.Rows[2]["Status_ForCustomer"]);
                                        _cmd.Parameters.AddWithValue("_pid94", ids1.Rows[4]["Status_ForCustomer"]); _cmd.Parameters.AddWithValue("_ptype_id", ptid); //191222

                                        _cmd.Parameters.AddWithValue("_Beneficiary_ID", obj.Beneficiary_ID);
                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        _cmd.Parameters.AddWithValue("_date", Record_Insert_Date);
                                        _cmd.Parameters.Add(new MySqlParameter("_existTran1", MySqlDbType.Int32));
                                        _cmd.Parameters["_existTran1"].Direction = ParameterDirection.Output;
                                        _cmd.Parameters.Add(new MySqlParameter("_existTran2", MySqlDbType.Int32));
                                        _cmd.Parameters["_existTran2"].Direction = ParameterDirection.Output;
                                        _cmd.Parameters.Add(new MySqlParameter("_existTran3", MySqlDbType.Int32));
                                        _cmd.Parameters["_existTran3"].Direction = ParameterDirection.Output;

                                        _cmd.Parameters.Add(new MySqlParameter("_newalert", MySqlDbType.Int32));
                                        _cmd.Parameters["_newalert"].Direction = ParameterDirection.Output;
                                        _cmd.Parameters.Add(new MySqlParameter("_alertmsg", MySqlDbType.String));
                                        _cmd.Parameters["_alertmsg"].Direction = ParameterDirection.Output;

                                        _cmd.ExecuteNonQuery();
                                        int Existtran1 = Convert.ToInt32(_cmd.Parameters["_existTran1"].Value);
                                        int Existtran2 = Convert.ToInt32(_cmd.Parameters["_existTran2"].Value);
                                        int Existtran3 = Convert.ToInt32(_cmd.Parameters["_existTran3"].Value);

                                        int newalert = Convert.ToInt32(_cmd.Parameters["_newalert"].Value);//new id upload alert
                                        string alertmsg = Convert.ToString(_cmd.Parameters["_alertmsg"].Value);

                                        //t.CustomerName = Convert.ToString(dictObjMain["cust_name"]);
                                        //t.Beneficiary_Name = Convert.ToString(dictObjMain["benf_name"]);
                                        string whereclause_new = "";

                                        whereclause_new = " and date(aa.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "'";
                                        whereclause_new = whereclause_new + " and (concat(cc.First_Name,' ',case when (cc.Middle_Name is not null and cc.Middle_Name!='') then concat(cc.Middle_Name,' ') else '' end,'',cc.Last_Name) like '%" + Customer_name + "%'"
                                             + " OR  (Beneficiary_Name like '%" + obj.Beneficiary_Name + "' or Beneficiary_Name like '" + obj.Beneficiary_Name + "%' ))";
                                        int cnt = 0;
                                        try
                                        {
                                            if (Convert.ToInt32(ids1.Rows[3]["Status_ForCustomer"]) == 0)
                                            {
                                                MySqlCommand _cmd1 = new MySqlCommand("sp_select_linked_txn_rpt");
                                                _cmd1.CommandType = CommandType.StoredProcedure;
                                                _cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                                _cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                _cmd1.Parameters.AddWithValue("_whereclause", whereclause_new);
                                                _cmd1.Parameters.AddWithValue("_conditionclause", "inner join user_master um on um.User_ID=aa.User_ID");
                                                _cmd1.Parameters.AddWithValue("_selectclause", "concat('') as pocname,");
                                                //_cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)<> 1 and Count(cr1.Last_Name)<>1 and Count(ifnull(cr1.Middle_Name,0))<>1) AS a)");
                                                _cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)>= 1 and Count(cr1.Last_Name)>=1 and Count(ifnull(cr1.Middle_Name,0))>=1) AS a)");
                                                _cmd1.Parameters.AddWithValue("_cust_clause", "and cc.Customer_ID=aa.Customer_ID");
                                                _cmd1.Parameters.AddWithValue("_benf_clause", "");
                                                _cmd1.Parameters.AddWithValue("_order_by_value", "Sender,aa.Customer_ID ");
                                                ids1 = db_connection.ExecuteQueryDataTableProcedure(_cmd1);

                                                if (ids1.Rows.Count > 0 && cnt == 0)
                                                {
                                                    obj.TransactionStatus_ID = 6;
                                                    cnt++;
                                                    cust_Comment = "Hold Reason: Linked transaction should be on hold";

                                                }
                                            }
                                        }
                                        catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }

                                        if (Existtran1 == 0 && cnt == 0)
                                        {
                                            obj.TransactionStatus_ID = 6;

                                            cust_Comment = "Hold Reason: First Transaction should be on hold";
                                            cnt++;
                                        }
                                        if (ptid == 3)
                                        {
                                            if (Existtran2 == 0 && cnt == 0)
                                            {
                                                obj.TransactionStatus_ID = 6;
                                                cnt++;
                                                cust_Comment = "Hold Reason: First pay by card transaction should be on hold";
                                            }
                                            if (Existtran3 == 0 && cnt == 0)
                                            {
                                                obj.TransactionStatus_ID = 6;
                                                cnt++;
                                                cust_Comment = "Hold Reason: First daily pay by card transaction should be on hold";

                                            }
                                        }

                                        if (newalert == 0 && cnt == 0)
                                        {
                                            obj.TransactionStatus_ID = 6;
                                            cnt++;
                                            cust_Comment = alertmsg;
                                        }

                                        if (cnt > 0)
                                        {
                                            #region transfercomment

                                            _cmd_comment.CommandType = CommandType.StoredProcedure;
                                            _cmd_comment.Parameters.AddWithValue("_cusomerID", Customer_ID);
                                            _cmd_comment.Parameters.AddWithValue("_comments", cust_Comment);
                                            _cmd_comment.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                            _cmd_comment.Parameters.AddWithValue("_TransferPerk_Flag", 1);
                                            _cmd_comment.Parameters.AddWithValue("_Delete_Status", 0);
                                            _cmd_comment.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            _cmd_comment.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                            _cmd_comment.Parameters.AddWithValue("_Status", 0);

                                            _cmd_comment.Parameters.AddWithValue("_Agent_MappingID", 1);
                                            _cmd_comment.Parameters.AddWithValue("_SalesRep_Flag", 1);
                                            chk_transaction_status = 0;
                                            #endregion
                                        }
                                        //}
                                    }
                                }
                            }
                            catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }

                            string cusID = Convert.ToString(ds.Rows[0]["WireTransfer_ReferanceNo"]);
                            double tot = Convert.ToDouble(ds.Rows[0]["AmountInGBP"]) + Convert.ToDouble(ds.Rows[0]["Transfer_Fees"]);
                            double amountPKR = Convert.ToDouble(ds.Rows[0]["AmountInPKR"]);//.Split('(');

                            string from = "App";
                            string authcode = Convert.ToString(ds.Rows[0]["Auth_Code"]);
                            obj.CB_ID = Convert.ToInt32(ds.Rows[0]["CB_ID"]);
                            Customer_ID = Convert.ToInt32(ds.Rows[0]["Customer_ID"]);
                            obj.Beneficiary_ID = Convert.ToInt32(ds.Rows[0]["Beneficiary_ID"]);
                            obj.PType_ID = ptid;
                            obj.AmountInGBP = Convert.ToDouble(ds.Rows[0]["AmountInGBP"]);
                            obj.Exchange_Rate = Convert.ToDouble(ds.Rows[0]["Exchange_Rate"]);
                            obj.AmountInPKR = amountPKR;
                            obj.Purpose_ID = Convert.ToInt32(ds.Rows[0]["Purpose_ID"]);
                            obj.Transfer_Fees = Convert.ToDouble(ds.Rows[0]["Transfer_Fees"]);
                            obj.improved_rate_flag = Convert.ToInt32(ds.Rows[0]["improved_rate_flag"]);
                            obj.ExtraTransfer_Fees = Convert.ToDouble(ds.Rows[0]["Extra_fees"]);
                            obj.offer_rate_flag = Convert.ToInt32(ds.Rows[0]["offer_rate_flag"]);
                            obj.Delete_Status = 0;
                            obj.PaymentDepositType_ID = Convert.ToInt32(ds.Rows[0]["PaymentDepositType_ID"]);
                            Double PartPayAmount = Convert.ToDouble(ds.Rows[0]["PartPay_Paid_Amount"]);
                            obj.HDelivery_Flag = Convert.ToInt32(ds.Rows[0]["HDelivery_Flag"]);
                            obj.HDelivery_Address = Convert.ToString(ds.Rows[0]["HDelivery_Address"]);
                            obj.CollectionPoint_ID = Convert.ToInt32(ds.Rows[0]["CollectionPoint_ID"]);
                            //string FromCurrency_Code = Convert.ToString(ds.Rows[0]["FromCurrency_Code"]);
                            //obj.FromCurrency_Code = FromCurrency_Code;
                            obj.PaymentReceived_ID = 1;
                            string bankGateway = Convert.ToString(obj.bankGateway);

                            //Ecommpay
                            if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "5")
                            {
                                obj.PaymentReceived_ID = 1;
                            }
                            else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "COMPLETED" || Convert.ToString(obj.Worldpay_Response) == "awaiting 3ds result" ||
                                Convert.ToString(obj.Worldpay_Response) == "awaiting merchant auth" || Convert.ToString(obj.Worldpay_Response) == "awaiting redirect result" ||
                                Convert.ToString(obj.Worldpay_Response) == "awaiting customer action" || Convert.ToString(obj.Worldpay_Response) == "awaiting clarification"
                                || Convert.ToString(obj.Worldpay_Response) == "awaiting confirmation" || Convert.ToString(obj.Worldpay_Response) == "awaiting customer"

                                ) && bankGateway == "5")
                            {
                                obj.PaymentReceived_ID = 3;
                            }

                            if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "1")
                            {
                                obj.PaymentReceived_ID = 1;
                            }
                            if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "1")
                            {
                                obj.PaymentReceived_ID = 3;
                            }

                            //Judopay
                            if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "Success" && bankGateway == "3")
                            {
                                obj.PaymentReceived_ID = 1;
                            }
                            else if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "Open" && bankGateway == "3")
                            {
                                obj.PaymentReceived_ID = 3;
                            }

                            //VolumePay
                            if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "4")
                            {
                                obj.PaymentReceived_ID = 1;
                            }
                            else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "PENDING" || Convert.ToString(obj.Worldpay_Response) == "AWAITING_AUTHORIZATION") && bankGateway == "4")
                            {
                                obj.PaymentReceived_ID = 3;
                            }
                            //LeatherBack
                            if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SUCCESSFUL" && bankGateway == "7")
                            {
                                obj.PaymentReceived_ID = 1;
                            }
                            else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "PENDING") && bankGateway == "7")
                            {
                                obj.PaymentReceived_ID = 3;
                            }
                            if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "10")// for Fire //rushikesh
                            {
                                obj.PaymentReceived_ID = 1;
                            }
                            else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "COMPLETED") && bankGateway == "10")
                            {
                                obj.PaymentReceived_ID = 3;
                            }
                            //MTBS Rushikesh
                            if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "11")
                            {
                                obj.PaymentReceived_ID = 1;
                            }
                            else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "COMPLETED") && bankGateway == "11")
                            {
                                obj.PaymentReceived_ID = 3;
                            }
                            if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "SETTLED" && bankGateway == "13")
                            {
                                obj.PaymentReceived_ID = 1;
                            }
                            else if (ptid == 6 && (Convert.ToString(obj.Worldpay_Response) == "COMPLETED") && bankGateway == "13")
                            {
                                obj.PaymentReceived_ID = 3;
                            }

                            if (ptid == 1 && Convert.ToString(PartPayAmount) != "" && Convert.ToString(PartPayAmount) != null && Convert.ToString(PartPayAmount) != "0")
                            {
                                obj.PartPay_Flag = 0;
                            }
                            else
                            {
                                obj.PartPay_Flag = 1;
                            }

                            obj.Country_ID = Convert.ToInt32(ds.Rows[0]["Country_ID"]);
                            obj.Currency_Code = Convert.ToString(ds.Rows[0]["Currency_Code"]);

                            obj.User_ID = Convert.ToInt32(ds.Rows[0]["User_ID"]);
                            obj.Transaction_From_Flag = Convert.ToString(ds.Rows[0]["Transaction_Source"]);
                            if (authcode == "undefined")
                            {
                                authcode = "";
                            }
                            obj.auth_code = authcode;
                            obj.DeliveryType_Id = Convert.ToInt32(ds.Rows[0]["DeliveryType_ID"]);
                            PartPayAmount = 0;
                            Decimal ActualFXRate = 0;
                            if (ActualFXRate != 0)
                            {
                                obj.Actual_ExchangeRate = ActualFXRate.ToString();
                                obj.ManualRateChangedFlag = 0;
                            }
                            else
                            {
                                obj.Actual_ExchangeRate = ActualFXRate.ToString();
                                obj.ManualRateChangedFlag = 1;
                            }
                            obj.RateUpdateReason_ID = Convert.ToInt32(ds.Rows[0]["RateUpdateReason_ID"]);
                            obj.MsgToAgent = Convert.ToString(ds.Rows[0]["MsgToAgent"]);
                            obj.SourceComment_Flag = Convert.ToInt32(ds.Rows[0]["SourceComment_Flag"]);
                            obj.SourceComment = Convert.ToString(ds.Rows[0]["SourceComment"]);
                            string sofstr = obj.SourceComment;
                            if (obj.SourceComment != "" && obj.SourceComment != null)
                                sofstr = obj.SourceComment.Replace("null", "");

                            obj.SourceComment = sofstr;
                            if (Convert.ToString(obj.Purpose_ID) == "10")
                            {
                                obj.Other_Purpose = Convert.ToString(ds.Rows[0]["Purpose"]);
                            }
                            else
                            {
                                obj.Other_Purpose = "";
                            }
                            if (Convert.ToString(ds.Rows[0]["Wallet_ID"]) != null && Convert.ToString(ds.Rows[0]["Wallet_ID"]) != "")
                            {
                                obj.Wallet_ID = Convert.ToInt32(ds.Rows[0]["Wallet_ID"]);
                                if (obj.Wallet_ID > 0) { obj.Wallet_Amount = Convert.ToDouble(ds.Rows[0]["Wallet_Amount"]); }
                            }
                            if (Convert.ToString(ds.Rows[0]["Discount_ID"]) != null && Convert.ToString(ds.Rows[0]["Discount_ID"]) != "")
                            {
                                obj.Discount_ID = Convert.ToInt32(ds.Rows[0]["Discount_ID"]);
                                if (obj.Discount_ID > 0) { obj.Discount_Amount = Convert.ToDouble(ds.Rows[0]["Discount_Amount"]); }
                            }
                            if (ds.Rows[0]["PaymentGateway_Flag"] != null)
                                obj.PaymentGateway_ID = Convert.ToInt32(ds.Rows[0]["PaymentGateway_Flag"]);
                            if (ds.Rows[0]["PayByCard_ID"] != null)
                            {
                                obj.PayByCard_ID = Convert.ToInt32(ds.Rows[0]["PayByCard_ID"]);
                                obj.NameOnCard = Convert.ToString(ds.Rows[0]["NameOnCard"]);
                            }
                            obj.Comment = Convert.ToString(ds.Rows[0]["Comment"]);

                            using (cmd = new MySqlCommand("Insert_Transfer", con))
                            {
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                cmd.Parameters.AddWithValue("_Beneficiary_ID", obj.Beneficiary_ID);
                                cmd.Parameters.AddWithValue("_TransactionType_ID", obj.TransactionType_ID);
                                cmd.Parameters.AddWithValue("_PType_ID", obj.PType_ID);
                                cmd.Parameters.AddWithValue("_TransactionStatus_ID", obj.TransactionStatus_ID);

                                cmd.Parameters.AddWithValue("_AmountInBase", obj.AmountInGBP.ToString("0.00"));

                                cmd.Parameters.AddWithValue("_Rate", obj.Exchange_Rate.ToString("0.0000"));
                                cmd.Parameters.AddWithValue("_AmountInForeign", obj.AmountInPKR.ToString("0.00"));

                                cmd.Parameters.AddWithValue("_ExtraTransfer_Fees", obj.ExtraTransfer_Fees.ToString("0.00"));
                                cmd.Parameters.AddWithValue("_offer_rate_flag", obj.offer_rate_flag);
                                cmd.Parameters.AddWithValue("_improved_rate_flag", obj.improved_rate_flag); //vyankatesh 02-09

                                cmd.Parameters.AddWithValue("_Purpose_ID", obj.Purpose_ID);
                                cmd.Parameters.AddWithValue("_Transfer_Fees", obj.Transfer_Fees.ToString("0.00"));

                                cmd.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime) ;
                                cmd.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                cmd.Parameters.AddWithValue("_PaymentDepositType_ID", obj.PaymentDepositType_ID);
                                cmd.Parameters.AddWithValue("_paymentReceived_ID", obj.PaymentReceived_ID);
                                cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);

                                cmd.Parameters.AddWithValue("_User_ID", obj.User_ID);
                                cmd.Parameters.AddWithValue("_CB_ID", obj.CB_ID);

                                cmd.Parameters.AddWithValue("_Country_ID", obj.Country_ID);
                                cmd.Parameters.AddWithValue("_Currency_Code", obj.Currency_Code);
                                cmd.Parameters.AddWithValue("_Transaction_From_Flag", obj.Transaction_From_Flag);
                                cmd.Parameters.AddWithValue("_auth_code", obj.auth_code);
                                cmd.Parameters.AddWithValue("_DeliveryType_ID", obj.DeliveryType_Id);

                                cmd.Parameters.AddWithValue("_Actual_ExchangeRate", obj.Actual_ExchangeRate);

                                cmd.Parameters.AddWithValue("_ManualRateChangedFlag", obj.ManualRateChangedFlag);
                                cmd.Parameters.AddWithValue("_RateUpdateReason_ID", obj.RateUpdateReason_ID);

                                cmd.Parameters.AddWithValue("_MsgToAgent", obj.MsgToAgent);
                                cmd.Parameters.AddWithValue("_PartPay_Flag", obj.PartPay_Flag);
                                
                                cmd.Parameters.AddWithValue("_SourceComment_Flag", obj.SourceComment_Flag);
                                cmd.Parameters.AddWithValue("_SourceComment", obj.SourceComment);
                                cmd.Parameters.AddWithValue("_Other_Purpose", obj.Other_Purpose);
                                cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                cmd.Parameters.AddWithValue("_HomeDeliveryflag", obj.HDelivery_Flag);
                                cmd.Parameters.AddWithValue("_HomeDeliveryAddress", obj.HDelivery_Address);

                                cmd.Parameters.AddWithValue("_CollectionPoint_ID", obj.CollectionPoint_ID);
                                cmd.Parameters.AddWithValue("_BaseCurrency", obj.FromCurrency_Code);
                                cmd.Parameters.AddWithValue("_PayByCard_ID", obj.PayByCard_ID);
                                cmd.Parameters.AddWithValue("_PaymentGateway_Flag", obj.PaymentGateway_ID);
                                if (obj.Wallet_Perm == 0)
                                {
                                    cmd.Parameters.AddWithValue("_wallet_id", obj.Wallet_ID);
                                    cmd.Parameters.AddWithValue("_Wallet_Amount", obj.Wallet_Amount);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("_wallet_id", 0);
                                    cmd.Parameters.AddWithValue("_Wallet_Amount", 0);
                                }
                                if (obj.Discount_Perm == 0)
                                {
                                    cmd.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                    cmd.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                                }
                                else
                                {
                                    cmd.Parameters.AddWithValue("_Discount_ID", 0);
                                    cmd.Parameters.AddWithValue("_Discount_Amount", 0);
                                }
                                //cmd.Parameters.Add(new MySqlParameter("_Transaction_ID", MySqlDbType.Int32));
                                //cmd.Parameters["_Transaction_ID"].Direction = ParameterDirection.Output;

                                cmd.Parameters.AddWithValue("_Comment", obj.Comment);

                                if (obj.Till_ID <= 0 || obj.Till_ID == null) { obj.Till_ID = 1; }
                                cmd.Parameters.AddWithValue("_Till_ID", obj.Till_ID);
                                obj.Transaction_ID = Convert.ToInt32(cmd.ExecuteScalar());
                                //if (obj.Transaction_ID == 0) // insert
                                //{
                                //    try
                                //    {
                                //        obj.Transaction_ID = Convert.ToInt32(cmd.Parameters["_Transaction_ID"].Value);
                                //    }
                                //    catch (Exception)
                                //    {
                                //    }
                                //}
                                cmd.Dispose();
                                if (obj.Transaction_ID > 0)
                                {
                                    if (chk_transaction_status == 0)
                                    {
                                        _cmd_comment.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                        _cmd_comment.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                        int chk_comment = db_connection.ExecuteNonQueryProcedure(_cmd_comment);
                                    }
                                    //DataTable dtc = CompanyInfo.get(obj.Client_ID);

                                    Cust_ReferanceNo = Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]);
                                    //ds.Rows.Add(0, obj.ReferenceNo, Cust_ReferanceNo);
                                    ds.Rows[0]["Status"] = 0;
                                    ds.Rows[0]["Refno"] = obj.ReferenceNo;
                                    ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;

                                    using (cmd = new MySqlCommand("Inactive_TempTransaction", con))
                                    {
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                        cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        cmd.Parameters.AddWithValue("_Transaction_ID", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                        int status = cmd.ExecuteNonQuery();
                                    }

                                    if (ptid == 6)
                                    {
                                        try
                                        {
                                            using (cmd = new MySqlCommand("sp_update_request_response", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                                                cmd.Parameters.AddWithValue("_functionNameId", "'%" + obj.payvyne_trans_id + "%'");
                                                cmd.Parameters.AddWithValue("_branchId", obj.CB_ID);
                                                cmd.Parameters.AddWithValue("_clientId", obj.Client_ID);
                                                int status = cmd.ExecuteNonQuery();
                                            }
                                        }
                                        catch (Exception sperr)
                                        {
                                            CompanyInfo.InsertActivityLogDetails("SP sp_update_request_response error: " + sperr.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext);
                                        }

                                        try
                                        {
                                            using (cmd = new MySqlCommand("sp_update_activity_log_tracker", con))
                                            {
                                                cmd.CommandType = CommandType.StoredProcedure;
                                                cmd.Parameters.AddWithValue("_temptransactionId", Convert.ToInt32(ds.Rows[0]["Transaction_ID"]));
                                                cmd.Parameters.AddWithValue("_transactionId", obj.Transaction_ID);
                                                cmd.Parameters.AddWithValue("_functionName", obj.ReferenceNo);
                                                cmd.Parameters.AddWithValue("_functionNameId", "'%" + obj.ReferenceNo + "%'");
                                                cmd.Parameters.AddWithValue("_branchId", obj.CB_ID);
                                                cmd.Parameters.AddWithValue("_clientId", obj.Client_ID);
                                                int status = cmd.ExecuteNonQuery();
                                            }
                                        }
                                        catch (Exception sperr)
                                        {
                                            CompanyInfo.InsertActivityLogDetails("SP sp_update_activity_log_tracker error: " + sperr.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext);
                                        }


                                    }
                                    ds.Rows[0]["Transaction_ID"] = obj.Transaction_ID;
                                    CompanyInfo.InsertActivityLogDetails("App - Money Transfer Request Submitted Successfully. Transaction Reference - " + obj.ReferenceNo + ".", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertOnline", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                    CompanyInfo.InsertTrackingLogDetails(1, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                    if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "1")
                                    {
                                        CompanyInfo.InsertTrackingLogDetails(2, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                    }
                                    else if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "4")
                                    {
                                        CompanyInfo.InsertTrackingLogDetails(2, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                    }
                                    else if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "Success" && bankGateway == "3")
                                    {
                                        CompanyInfo.InsertTrackingLogDetails(2, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                    }
                                    else if (ptid == 6 && Convert.ToString(obj.Worldpay_Response) == "COMPLETED" && bankGateway == "5")
                                    {
                                        CompanyInfo.InsertTrackingLogDetails(2, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                    }
                                    else
                                    {
                                        CompanyInfo.InsertTrackingLogDetails(3, obj.Transaction_ID, 0, obj.Client_ID, obj.CB_ID, _srvTransactionContext);
                                    }
                                    string notification_icon = "request-money.jpg";
                                    string notification_message = "<span class='cls-admin'>transfer <strong class='cls-transferinitiate'>request</strong> sent successfully. <strong>Transfer Ref.- " + obj.ReferenceNo + "</strong></span><span class='cls-customer'><strong>Money transfer request submited</strong><span>Your request for the money transfer has been submitted successfully.</span></span>";
                                    CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, obj.User_ID, Convert.ToInt32(obj.CB_ID), 0, 0, 1, obj.Transaction_ID, _srvTransactionContext);
                                    try
                                    {
                                        string browserinfo = "";
                                        string IPAddress1 = context.Connection.RemoteIpAddress.ToString();
                                        browserinfo = "IP Address: " + IPAddress1;
                                        try
                                        {
                                            ServicePointManager.Expect100Continue = true;
                                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls13;
                                            //| SecurityProtocolType.Tls11
                                            //| SecurityProtocolType.Tls12
                                            //| SecurityProtocolType.Ssl3;
                                            var client = new RestClient("https://tools.keycdn.com/geo.json?host=" + IPAddress1);
                                            client.Timeout = -1;
                                            var request = new RestRequest(Method.GET);
                                            client.UserAgent = "keycdn-tools:" + Convert.ToString(dtc.Rows[0]["company_website"]); //dtc.Rows[0]["Company_URL_Customer"] //keycdn-tools:https://www.calyx-solutions.com
                                            request.AddHeader("Accept-Encoding", "gzip, deflate, br");

                                            IRestResponse response = client.Execute(request);

                                            GeoLocation GeoLocationList = Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(response.Content);
                                            browserinfo = Newtonsoft.Json.JsonConvert.SerializeObject(GeoLocationList.data.geo);
                                        }
                                        catch (Exception ex)
                                        {
                                            browserinfo = "IP Address: " + IPAddress1;
                                        }
                                        int chk_validity = 1;
                                        //try
                                        //{
                                        //    if (HttpContext.Current.Session["chk_validity"] != null)
                                        //    {
                                        //        chk_validity = 0;
                                        //    }
                                        //}
                                        //catch (Exception ex_validity)
                                        //{

                                        //}
                                        MySqlCommand cmd1 = new MySqlCommand("Insert_TransactionDetails");
                                        cmd1.CommandType = CommandType.StoredProcedure;
                                        cmd1.Connection = con;
                                        cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                        cmd1.Parameters.AddWithValue("_chk_validity_poa", chk_validity);
                                        cmd1.Parameters.AddWithValue("_APITransaction_ID", "0");
                                        if (Convert.ToString(ds.Rows[0]["API_ID"]) == null || Convert.ToString(ds.Rows[0]["API_ID"]) == "")
                                        {
                                            ds.Rows[0]["API_ID"] = 0;
                                        }
                                        cmd1.Parameters.AddWithValue("_BranchListAPI_ID", Convert.ToString(ds.Rows[0]["API_ID"]));
                                        cmd1.Parameters.AddWithValue("_APIBranch_Details", Convert.ToString(ds.Rows[0]["API_BranchDetails"]));
                                        cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        cmd1.Parameters.AddWithValue("_NameOnCard", obj.NameOnCard);
                                        cmd1.Parameters.AddWithValue("_Location_Details", browserinfo);
                                        cmd1.Parameters.AddWithValue("_Benf_BankDetails_ID", obj.Benf_BankDetails_ID);
                                        int msg = cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                        if (msg > 0) { }
                                        MySqlCommand _cmd = new MySqlCommand("Update_MonthlyLimit");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_From_Date", obj.Record_Insert_DateTime);
                                        _cmd.Parameters.AddWithValue("_Transfer_ID", 0);// Primary ID of customer transfer limit
                                        _cmd.Parameters.AddWithValue("_Amount", obj.AmountInGBP.ToString("0.00"));
                                        _cmd.Parameters.AddWithValue("_Queryflag", 2);
                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        string success1 = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                    }
                                    catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }
                                    newtotamount = Convert.ToDouble(obj.AmountInGBP) + Convert.ToDouble(obj.Transfer_Fees);
                                    rewardamount = 0; lbl = "";
                                    if (Convert.ToString(ds.Rows[0]["Wallet_ID"]) != null && Convert.ToString(ds.Rows[0]["Wallet_ID"]) != "")
                                    {
                                        if (obj.Wallet_ID > 0 && Convert.ToString(obj.Wallet_Amount) != "" && Convert.ToString(obj.Wallet_Amount) != null)
                                        {
                                            obj.Wallet_Amount = Convert.ToDouble(ds.Rows[0]["Wallet_Amount"]);
                                            rewardamount = obj.Wallet_Amount;
                                            lbl = "Wallet";
                                        }
                                    }

                                    if (Convert.ToString(ds.Rows[0]["Discount_ID"]) != null && Convert.ToString(ds.Rows[0]["Discount_ID"]) != "")
                                    {
                                        if (obj.Discount_ID > 0 && Convert.ToString(obj.Discount_Amount) != "" && Convert.ToString(obj.Discount_Amount) != null)
                                        {
                                            obj.Discount_Amount = Convert.ToDouble(ds.Rows[0]["Discount_Amount"]);
                                            rewardamount = obj.Discount_Amount;
                                            lbl = "Discount";
                                        }
                                    }
                                    newtotamount1 = newtotamount - rewardamount;
                                    #region stock
                                    try
                                    {
                                        if (obj.PaymentReceived_ID == 1)//&& obj.PaymentGateway_Flag != 2
                                        {
                                            string totamount = Convert.ToString(newtotamount1);//Transfer Cost
                                            string foreignamount = Convert.ToString(obj.AmountInPKR);
                                            string foreigncurrency = obj.Currency_Code;
                                            string basecurrency = FromCurrency_Code;
                                            int branch_id = obj.CB_ID;

                                            #region STOCK UPDATE
                                            MySqlCommand cms = new MySqlCommand("GetAllCurrencies");
                                            cms.CommandType = CommandType.StoredProcedure;
                                            cms.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cms.Parameters.AddWithValue("_whereclause", " and (Currency_Code = '" + basecurrency + "' or Currency_Code = '" + foreigncurrency + "' or BankCurrency_Flag = 0)");
                                            DataTable dt1c = db_connection.ExecuteQueryDataTableProcedure(cms);
                                            int basecurrency_id = 0, foreigncurrency_id = 0, bankcurrency_id = 0;
                                            double basespot_rate = 0, foreignspot_rate = 0;
                                            if (dt1c.Rows.Count > 1)
                                            {
                                                for (int i = 0; i < dt1c.Rows.Count; i++)
                                                {
                                                    string ccode = Convert.ToString(dt1c.Rows[i]["Currency_Code"]); int cid = Convert.ToInt32(dt1c.Rows[i]["Currency_ID"]);
                                                    double spot = Convert.ToDouble(dt1c.Rows[i]["Spot_Rate"]);
                                                    if (ccode == basecurrency) { basecurrency_id = cid; basespot_rate = spot; }
                                                    else if (ccode == foreigncurrency) { foreigncurrency_id = cid; foreignspot_rate = spot; }
                                                    else if (Convert.ToString(dt1c.Rows[i]["BankCurrency_Flag"]) == "0") { bankcurrency_id = cid; }
                                                }
                                            }

                                            string StockBalance; string StockActivity = "", s = "";
                                            MySqlCommand cmd1 = null; DataTable dtAvgRate = null;
                                            double _CurrencyAmt = 0, _AvgRate = 0, _AmountInGbp = 0, _AvergeRate = 0;
                                            double _newAmtInGbp = 0, _AverageAmountInGBP = 0, _AverageCurrencyAmt;
                                            try
                                            {
                                                StockActivity = "Updating foreign currency stock.";
                                                using (cms = new MySqlCommand("sp_update_foreign_currency_stock", con))
                                                {
                                                    if (con.State != ConnectionState.Open) { con.Open(); }
                                                    cms.CommandType = CommandType.StoredProcedure;
                                                    cms.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    cms.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                    cms.Parameters.AddWithValue("_till_ID", obj.Till_ID);
                                                    cms.Parameters.AddWithValue("_currencyD_ID", foreigncurrency_id);
                                                    cms.Parameters.AddWithValue("_currency_Amount", foreignamount);
                                                    cms.Parameters.AddWithValue("_flag", "In");
                                                    cms.Parameters.Add(new MySqlParameter("_stock", MySqlDbType.VarChar));
                                                    cms.Parameters["_stock"].Direction = ParameterDirection.Output;
                                                    cms.ExecuteNonQuery();
                                                    StockBalance = cms.Parameters["_stock"].Value.ToString();
                                                    //if (con.State != ConnectionState.Closed) { con.Close(); }
                                                }
                                                string[] stock = StockBalance.Split(',');
                                                string BeforeStock = stock[0].Substring(3);
                                                string AfterStock = stock[1].Substring(3);

                                                StockActivity += " Branch ID: " + branch_id + ", Currency Code: " + foreigncurrency + ", Currency Amount: " + foreignamount + ", Pervious Stock: " + BeforeStock + ", Updated Stock: " + AfterStock + "";
                                                CompanyInfo.InsertActivityLogDetails(StockActivity, 1, 0, obj.User_ID, Customer_ID, "Insert Transaction", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                                #region Avg
                                                cmd1 = new MySqlCommand("sp_select_average_rate_details");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Parameters.AddWithValue("_CurrencyDId", foreigncurrency_id);
                                                cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);

                                                //if (obj.StockType.Id == 1) //till
                                                //{
                                                cmd1.Parameters.AddWithValue("_RateType", 1);
                                                //}
                                                //else if (obj.StockType.Id == 2) //shared till
                                                //{
                                                //    cmd.Parameters.AddWithValue("_RateType", 1);
                                                //}

                                                dtAvgRate = db_connection.ExecuteQueryDataTableProcedure(cmd1);

                                                // check avg rate - if not present then insert
                                                if (dtAvgRate.Rows.Count == 0)
                                                {
                                                    _CurrencyAmt = obj.AmountInPKR;
                                                    _AvgRate = foreignspot_rate;
                                                    _AmountInGbp = _CurrencyAmt / _AvgRate;

                                                    cmd1 = new MySqlCommand("sp_save_average_rate_table", con);
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    if (con.State != ConnectionState.Open) { con.Open(); }
                                                    cmd1.Parameters.AddWithValue("_CurrencyDId", foreigncurrency_id);
                                                    cmd1.Parameters.AddWithValue("_CurrencyAmt", _CurrencyAmt);
                                                    cmd1.Parameters.AddWithValue("_AmtInGbp", _AmountInGbp);
                                                    cmd1.Parameters.AddWithValue("_AvgRate", _AvgRate);
                                                    cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                    cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                                    cmd1.Parameters.AddWithValue("_DeleteStatus", 0);

                                                    //if (StockType.Id == 0) //vault
                                                    //{
                                                    //    cmd1.Parameters.AddWithValue("_RateType", 0);
                                                    //}
                                                    //else if (StockType.Id == 1) //till
                                                    //{
                                                    cmd1.Parameters.AddWithValue("_RateType", 1);
                                                    //}
                                                    //else if (StockType.Id == 2) //shared till
                                                    //{
                                                    //    cmd1.Parameters.AddWithValue("_RateType", 1);
                                                    //}
                                                    cmd1.ExecuteNonQuery();
                                                    //if (con.State != ConnectionState.Closed) { con.Close(); }
                                                }
                                                else
                                                {
                                                    _CurrencyAmt = Convert.ToDouble(dtAvgRate.Rows[0]["Currency_Amount"].ToString());
                                                    _AmountInGbp = Convert.ToDouble(dtAvgRate.Rows[0]["AmountINGBP"].ToString());
                                                    _AvgRate = Convert.ToDouble(dtAvgRate.Rows[0]["Average_Rate"].ToString());
                                                    if (_AvgRate == 0) { _AvgRate = foreignspot_rate; }
                                                }

                                                _AverageAmountInGBP = Math.Round((obj.AmountInPKR / Math.Round(_AvgRate, 4)), 2);

                                                _AverageCurrencyAmt = _CurrencyAmt + obj.AmountInPKR;
                                                _newAmtInGbp = Math.Round((_AverageAmountInGBP + _AmountInGbp), 2);

                                                if (_newAmtInGbp > 0)
                                                {
                                                    _AvergeRate = _AverageCurrencyAmt / _newAmtInGbp;
                                                }
                                                s = Math.Round(_AvergeRate, 4).ToString();

                                                if (_AverageCurrencyAmt <= 0)
                                                {
                                                    _AverageCurrencyAmt = 0;
                                                    _AverageAmountInGBP = 0;
                                                    _AvergeRate = 0;
                                                }
                                                else
                                                {
                                                    _AvergeRate = Convert.ToDouble(s);
                                                }

                                                cmd1 = new MySqlCommand("sp_update_average_rate_for_bureau_account_manager", con);
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                if (con.State != ConnectionState.Open) { con.Open(); }
                                                cmd1.Parameters.AddWithValue("_CurrencyAmount", _AverageCurrencyAmt);
                                                cmd1.Parameters.AddWithValue("_AmountInGBP", _newAmtInGbp);
                                                cmd1.Parameters.AddWithValue("_AverageRate", _AvergeRate);
                                                cmd1.Parameters.AddWithValue("_CurrencyDId", foreigncurrency_id);
                                                cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);

                                                //if (StockType.Id == 0) //vault
                                                //{
                                                //    cmd1.Parameters.AddWithValue("_RateType", 0);
                                                //}
                                                //else if (StockType.Id == 1) //till
                                                //{
                                                cmd1.Parameters.AddWithValue("_RateType", 1);
                                                //}
                                                //else if (obj.StockType.Id == 2) //shared till
                                                //{
                                                //    cmd.Parameters.AddWithValue("_RateType", 1);
                                                //}
                                                cmd1.ExecuteNonQuery();
                                                //if (con.State != ConnectionState.Closed) { con.Close(); }
                                                #endregion
                                            }
                                            catch { }
                                            //UPDATE BASE CURRENCY STOCK                            
                                            StockActivity = "Updating base currency stock.";
                                            using (cms = new MySqlCommand("sp_update_base_currency_stock", con))
                                            {
                                                if (con.State != ConnectionState.Open) { con.Open(); }
                                                cms.CommandType = CommandType.StoredProcedure;
                                                cms.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cms.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                cms.Parameters.AddWithValue("_till_ID", obj.Till_ID);
                                                if (ptid == 1)//"Cash"
                                                    cms.Parameters.AddWithValue("_currencyD_ID", basecurrency_id);
                                                else
                                                    cms.Parameters.AddWithValue("_currencyD_ID", bankcurrency_id);
                                                cms.Parameters.AddWithValue("_currency_Amount", totamount);
                                                cms.Parameters.AddWithValue("_flag", "In");
                                                cms.Parameters.Add(new MySqlParameter("_stock", MySqlDbType.VarChar));
                                                cms.Parameters["_stock"].Direction = ParameterDirection.Output;
                                                cms.ExecuteNonQuery();
                                                StockBalance = cms.Parameters["_stock"].Value.ToString();
                                                //if (con.State != ConnectionState.Closed) { con.Close(); }
                                            }
                                            string[] stock1 = StockBalance.Split(',');
                                            string BeforeStock1 = stock1[0].Substring(3);
                                            string AfterStock1 = stock1[1].Substring(3);
                                            StockActivity += " Branch ID: " + branch_id + ", Currency Code: " + basecurrency + ", Currency Amount: " + totamount + ", Pervious Stock: " + BeforeStock1 + ", Updated Stock: " + AfterStock1 + "";
                                            CompanyInfo.InsertActivityLogDetails(StockActivity, 1, obj.Transaction_ID, obj.User_ID, Customer_ID, "Insert Transaction", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                            #region BaseAvg
                                            cmd1 = new MySqlCommand("sp_select_average_rate_details");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            if (ptid == 1)//"Cash"
                                                cmd1.Parameters.AddWithValue("_CurrencyDId", basecurrency_id);
                                            else
                                                cmd1.Parameters.AddWithValue("_CurrencyDId", bankcurrency_id);

                                            cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                            cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);

                                            //if (obj.StockType.Id == 1) //till
                                            //{
                                            cmd1.Parameters.AddWithValue("_RateType", 1);
                                            //}
                                            //else if (obj.StockType.Id == 2) //shared till
                                            //{
                                            //    cmd.Parameters.AddWithValue("_RateType", 1);
                                            //}

                                            dtAvgRate = db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                            _CurrencyAmt = 0; _AvgRate = 0; _AmountInGbp = 0;
                                            // check avg rate - if not present then insert
                                            if (dtAvgRate.Rows.Count == 0)
                                            {
                                                _CurrencyAmt = obj.AmountInGBP;
                                                _AvgRate = basespot_rate;
                                                _AmountInGbp = _CurrencyAmt / _AvgRate;

                                                cmd1 = new MySqlCommand("sp_save_average_rate_table", con);
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                if (con.State != ConnectionState.Open) { con.Open(); }
                                                if (ptid == 1)//"Cash"
                                                    cmd1.Parameters.AddWithValue("_CurrencyDId", basecurrency_id);
                                                else
                                                    cmd1.Parameters.AddWithValue("_CurrencyDId", bankcurrency_id);
                                                cmd1.Parameters.AddWithValue("_CurrencyAmt", _CurrencyAmt);
                                                cmd1.Parameters.AddWithValue("_AmtInGbp", _AmountInGbp);
                                                cmd1.Parameters.AddWithValue("_AvgRate", _AvgRate);
                                                cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                                cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);
                                                cmd1.Parameters.AddWithValue("_DeleteStatus", 0);

                                                //if (StockType.Id == 0) //vault
                                                //{
                                                //    cmd1.Parameters.AddWithValue("_RateType", 0);
                                                //}
                                                //else if (StockType.Id == 1) //till
                                                //{
                                                cmd1.Parameters.AddWithValue("_RateType", 1);
                                                //}
                                                //else if (StockType.Id == 2) //shared till
                                                //{
                                                //    cmd1.Parameters.AddWithValue("_RateType", 1);
                                                //}
                                                cmd1.ExecuteNonQuery();
                                                //if (con.State != ConnectionState.Closed) { con.Close(); }
                                            }
                                            else
                                            {
                                                _CurrencyAmt = Convert.ToDouble(dtAvgRate.Rows[0]["Currency_Amount"].ToString());
                                                _AmountInGbp = Convert.ToDouble(dtAvgRate.Rows[0]["AmountINGBP"].ToString());
                                                _AvgRate = Convert.ToDouble(dtAvgRate.Rows[0]["Average_Rate"].ToString());
                                                if (_AvgRate == 0) { _AvgRate = basespot_rate; }
                                            }
                                            _newAmtInGbp = 0; _AverageAmountInGBP = 0; _AverageCurrencyAmt = 0;
                                            _AverageAmountInGBP = Math.Round((obj.AmountInGBP / Math.Round(_AvgRate, 4)), 2);

                                            _AverageCurrencyAmt = _CurrencyAmt + obj.AmountInGBP;
                                            _newAmtInGbp = Math.Round((_AverageAmountInGBP + _AmountInGbp), 2);

                                            _AvergeRate = _AverageCurrencyAmt / _newAmtInGbp;
                                            s = Math.Round(_AvergeRate, 4).ToString();

                                            if (_AverageCurrencyAmt <= 0)
                                            {
                                                _AverageCurrencyAmt = 0;
                                                _AverageAmountInGBP = 0;
                                                _AvergeRate = 0;
                                            }
                                            else
                                            {
                                                _AvergeRate = Convert.ToDouble(s);
                                            }

                                            cmd1 = new MySqlCommand("sp_update_average_rate_for_bureau_account_manager", con);
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            if (con.State != ConnectionState.Open) { con.Open(); }
                                            cmd1.Parameters.AddWithValue("_CurrencyAmount", _AverageCurrencyAmt);
                                            cmd1.Parameters.AddWithValue("_AmountInGBP", _newAmtInGbp);
                                            cmd1.Parameters.AddWithValue("_AverageRate", _AvergeRate);
                                            if (ptid == 1)//"Cash"
                                                cmd1.Parameters.AddWithValue("_CurrencyDId", basecurrency_id);
                                            else
                                                cmd1.Parameters.AddWithValue("_CurrencyDId", bankcurrency_id);
                                            cmd1.Parameters.AddWithValue("_BranchId", obj.CB_ID);
                                            cmd1.Parameters.AddWithValue("_ClientId", obj.Client_ID);

                                            //if (StockType.Id == 0) //vault
                                            //{
                                            //    cmd1.Parameters.AddWithValue("_RateType", 0);
                                            //}
                                            //else if (StockType.Id == 1) //till
                                            //{
                                            cmd1.Parameters.AddWithValue("_RateType", 1);
                                            //}
                                            //else if (obj.StockType.Id == 2) //shared till
                                            //{
                                            //    cmd.Parameters.AddWithValue("_RateType", 1);
                                            //}
                                            cmd1.ExecuteNonQuery();
                                            //if (con.State != ConnectionState.Closed) { con.Close(); }
                                            #endregion
                                            #endregion
                                        }
                                    }
                                    catch (Exception ee1) { CompanyInfo.InsertActivityLogDetails("App - Stock Update - " + ee1.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext); }
                                    #endregion stock
                                    try
                                    {
                                        //Insert Wallet Transaction
                                        if (obj.Wallet_ID > 0)
                                        {
                                            obj.transfer_type = 2; obj.paytype = 5;
                                            obj.exchangerate = 1; obj.fee = 0;
                                            MySqlCommand _cmd = new MySqlCommand("GetWallets");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            string whereclause = " and c.Client_ID=" + obj.Client_ID + " and w.Client_ID=" + obj.Client_ID + " and w.Customer_ID=" + Customer_ID + " and w.Wallet_ID = " + obj.Wallet_ID + "";
                                            _cmd.Parameters.AddWithValue("_whereclause", whereclause);
                                            DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                            obj.Wallet_Amount = Convert.ToDouble(ds.Rows[0]["Wallet_Amount"]);
                                            if (dtwallets.Rows.Count > 0)
                                            {
                                                obj.Currency_ID = Convert.ToInt32(dtwallets.Rows[0]["Currency_ID"]);
                                                obj.oldwalletbalance = Convert.ToDouble(dtwallets.Rows[0]["Wallet_Balance"]);
                                                obj.newwalletbalance = obj.oldwalletbalance - obj.Wallet_Amount;
                                            }
                                            obj.Transfer_Cost = Convert.ToDouble(ds.Rows[0]["Transfer_Cost"]);

                                            MySqlCommand cmd1 = new MySqlCommand("Update_WalletBalance");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Connection = con;
                                            cmd1.Parameters.AddWithValue("_newwalletbalance", obj.newwalletbalance);
                                            cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd1.Parameters.AddWithValue("_Wallet_ID", obj.Wallet_ID);
                                            double Transfer_Cost = Convert.ToDouble(obj.Transfer_Cost);

                                            int msg = cmd1.ExecuteNonQuery();
                                            cmd1.Dispose();
                                            if (msg > 0)
                                            {
                                                cmd1 = new MySqlCommand("insert_wallet_transaction");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Connection = con;
                                                cmd1.Parameters.AddWithValue("_Wallet_ID", obj.Wallet_ID);
                                                cmd1.Parameters.AddWithValue("_transfer_type", obj.transfer_type);
                                                cmd1.Parameters.AddWithValue("_Currency_ID", obj.Currency_ID);
                                                cmd1.Parameters.AddWithValue("_transfer_amount", obj.Wallet_Amount);
                                                cmd1.Parameters.AddWithValue("_oldwalletbalance", obj.oldwalletbalance);
                                                cmd1.Parameters.AddWithValue("_newwalletbalance", obj.newwalletbalance);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);
                                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd1.Parameters.AddWithValue("_Branch_ID", obj.CB_ID);
                                                cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                cmd1.Parameters.AddWithValue("_paytype", obj.paytype);
                                                cmd1.Parameters.AddWithValue("_exchangerate", obj.exchangerate);
                                                cmd1.Parameters.AddWithValue("_fee", obj.fee);

                                                cmd1.Parameters.AddWithValue("_User_ID", 0);
                                                cmd1.Parameters.AddWithValue("_AgentFlag", 1);
                                                cmd1.Parameters.AddWithValue("_referee_id", 0);
                                                cmd1.Parameters.AddWithValue("_Referral_Flag", 1);
                                                obj.Wallet_Description = "Wallet Amount " + obj.Wallet_Amount + " used for transaction " + obj.ReferenceNo + ".";
                                                cmd1.Parameters.AddWithValue("_Wallet_Description", obj.Wallet_Description);
                                                msg = cmd1.ExecuteNonQuery();
                                                if (msg > 0)
                                                {
                                                    string act = "App - " + Convert.ToString(obj.Wallet_Currency) + " Wallet Balance used for transaction " + obj.ReferenceNo + ". Wallet Amount: " + obj.Wallet_Amount + " New Wallet Balance: " + obj.newwalletbalance + " Old Wallet Balance: " + obj.oldwalletbalance + " ";
                                                    CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertOnline", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);
                                                }
                                            }
                                        }

                                        try
                                        {
                                            //Insert Discount Transaction
                                            obj.Discount_Amount = Convert.ToDouble(ds.Rows[0]["Discount_Amount"]);
                                            double Transfer_Cost = Convert.ToDouble(ds.Rows[0]["Transfer_Cost"]);
                                            if (obj.Discount_ID > 0)
                                            {
                                                MySqlCommand cmd1 = new MySqlCommand("Insert_DiscountDetails");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Connection = con;
                                                cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                cmd1.Parameters.AddWithValue("_Discount_Amount", obj.Discount_Amount);
                                                cmd1.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                cmd1.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                                cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                cmd1.Parameters.AddWithValue("_Delete_Status", obj.Delete_Status);

                                                int msg = cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                                //Get Usage limit
                                                if (msg > 0)
                                                {
                                                    CompanyInfo.InsertActivityLogDetails(" Discount Code " + Convert.ToString(obj.Discount_Code) + " applied for transaction " + obj.ReferenceNo + ". Discount " + Convert.ToString(obj.DiscountType) + ": " + obj.Discount_Amount + ". ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertOnline", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                                    cmd1 = new MySqlCommand("GetDiscountUsage");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                    cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                    DataTable dtuse = db_connection.ExecuteQueryDataTableProcedure(cmd1); cmd1.Dispose();
                                                    if (dtuse.Rows.Count > 0)
                                                    {
                                                        int usage_limit = Convert.ToInt32(dtuse.Rows[0]["Usage_Limit"]);
                                                        int used_count = Convert.ToInt32(dtuse.Rows[0]["used_count"]);
                                                        if ((used_count + 1) >= usage_limit)
                                                        {
                                                            //update discount available status
                                                            cmd1 = new MySqlCommand("Update_DiscountAvailable");
                                                            cmd1.CommandType = CommandType.StoredProcedure;
                                                            cmd1.Connection = con;
                                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", obj.Record_Insert_DateTime);
                                                            cmd1.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                                            cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                            cmd1.Parameters.AddWithValue("_Discount_ID", obj.Discount_ID);
                                                            cmd1.ExecuteNonQuery(); cmd1.Dispose();
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }

                                    }
                                    catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }


                                    cmd2.Dispose();

                                    //Insert Bank details
                                    if (obj.PaymentDepositType_ID == 1)
                                    {
                                        if (bt.Rows.Count > 0)
                                        {
                                            cmd2 = new MySqlCommand("Insert_BankDepositDetails");//SP_Save_Beneificiary_BankDetails
                                            cmd2.CommandType = CommandType.StoredProcedure;
                                            cmd2.Connection = con;
                                            cmd2.Parameters.AddWithValue("_CB_ID", obj.CB_ID);
                                            cmd2.Parameters.AddWithValue("_BBank_ID", Convert.ToInt32(bt.Rows[0]["BBank_ID"]));
                                            cmd2.Parameters.AddWithValue("_Account_Number", Convert.ToString(bt.Rows[0]["Account_Number"]));
                                            cmd2.Parameters.AddWithValue("_AccountHolderName", Convert.ToString(bt.Rows[0]["AccountHolderName"]));
                                            cmd2.Parameters.AddWithValue("_Branch", Convert.ToString(bt.Rows[0]["Branch"]));
                                            cmd2.Parameters.AddWithValue("_BranchCode", Convert.ToString(bt.Rows[0]["BranchCode"]));
                                            cmd2.Parameters.AddWithValue("_BankCode", Convert.ToString(bt.Rows[0]["BankCode"]));
                                            cmd2.Parameters.AddWithValue("_Ifsc_Code", Convert.ToString(bt.Rows[0]["Ifsc_Code"]));
                                            cmd2.Parameters.AddWithValue("_Beneficiary_Country_ID", Convert.ToInt32(bt.Rows[0]["Beneficiary_Country_ID"]));
                                            cmd2.Parameters.AddWithValue("_Beneficiary_City_ID", Convert.ToInt32(bt.Rows[0]["Beneficiary_City_ID"]));
                                            cmd2.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                            cmd2.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                            cmd2.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                            cmd2.Parameters.AddWithValue("_Benf_Iban", Convert.ToString(bt.Rows[0]["Iban_ID"]));
                                            cmd2.Parameters.AddWithValue("_Benf_BIC", Convert.ToString(bt.Rows[0]["BIC_Code"]));
                                            int bankmsg = cmd2.ExecuteNonQuery(); cmd2.Dispose();
                                            //reset to previous value                                    
                                        }
                                        notification_icon = "money-recive.jpg";
                                        notification_message = "<span class='cls-admin'transfer is <strong class='cls-deposite'> complete</strong>. Status- <strong>Deposited</strong>. <strong>Transaction ref. - " + Convert.ToString(obj.ReferenceNo) + "</strong></span><span class='cls-customer'> <strong>Transfer is Complete</strong><span>" + obj.ReferenceNo.ToString() + "</span><span class='cls-payment-img'><img src='assets/img/icon/status/checkmark.png' alt='image' class='imaged w16'> Deposited</span>,</span>";
                                        CompanyInfo.save_notification(notification_message, notification_icon, Convert.ToInt32(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), Convert.ToInt32(obj.Client_ID), 1, obj.User_ID, Convert.ToInt32(obj.CB_ID), 0, 0, 1, obj.Transaction_ID, _srvTransactionContext);
                                    }
                                    obj.SOFID = Convert.ToInt32(ds.Rows[0]["SOFID"]);
                                    if (obj.SOFID > 0 && Convert.ToString(obj.SourceComment_Flag) == "1")
                                    {
                                        cmd2 = new MySqlCommand("Update_TxnIDSof");
                                        cmd2.CommandType = CommandType.StoredProcedure;
                                        cmd2.Connection = con;
                                        cmd2.Parameters.AddWithValue("_Transaction_ID", obj.Transaction_ID);
                                        cmd2.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                                        cmd2.Parameters.AddWithValue("_SourceId", obj.SOFID);
                                        int sourcesuccess = cmd2.ExecuteNonQuery(); cmd2.Dispose();
                                    }

                                    CompanyInfo.InsertActivityLogDetails("App - Transaction Details : Reference: " + obj.ReferenceNo + ", Sender Name: " + Convert.ToString(ct.Rows[0]["First_Name"]) + ", Receiver Name: " + Convert.ToString(bt.Rows[0]["Beneficiary_Address"]) + "," +
                                        " Amount: " + obj.AmountInGBP + " " + obj.FromCurrency_Code + ", <br />Exchange Rate: " + obj.Exchange_Rate + ", Amount in Foreign Currency: " + obj.AmountInPKR + " " + obj.Currency_Code + ", Transfer Fees:" + obj.Transfer_Fees + "", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Online", obj.CB_ID, obj.Client_ID, "Insert Transaction", _srvTransactionContext);
                                    CompanyInfo.InsertActivityLogDetails("App - Email sending initiated on send money success.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send-Money", _srvTransactionContext);


                                }
                                else
                                {
                                    ds.Rows[0]["Status"] = 1;
                                    ds.Rows[0]["Refno"] = obj.ReferenceNo;
                                    ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;
                                    //ds.Rows.Add(1, obj.ReferenceNo, Cust_ReferanceNo);
                                }
                            }
                        }
                        else
                        {
                            ds.Rows[0]["Status"] = 3;
                            ds.Rows[0]["Refno"] = obj.ReferenceNo;
                            ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;
                            //ds.Rows.Add(1, obj.ReferenceNo, Cust_ReferanceNo);
                        }
                    }

                    cmd = new MySqlCommand("CheckDuplicateRefNo");
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("_ReferenceNo", obj.ReferenceNo);
                    cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                    ds1 = db_connection.ExecuteQueryDataTableProcedure(cmd);
                    if (ds1.Rows.Count > 0)//obj.PType_ID we can use this for PayByCard to avoid rollback
                    {
                        //transaction.Rollback();
                        CompanyInfo.InsertActivityLogDetails("App - Transaction Rollback due to Duplicate reference on send money success. Transaction Reference: " + obj.ReferenceNo, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Online Transfer-Transaction Rollback", obj.CB_ID, obj.Client_ID, "Send-Money", _srvTransactionContext);
                        ds.Rows[0]["Status"] = 0;
                        ds.Rows[0]["Transaction_ID"] = ds1.Rows[0]["Transaction_ID"];
                        ds.Rows[0]["Refno"] = obj.ReferenceNo;
                        ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;
                    }
                    else
                    {
                        if (dtc != null && dtc.Rows.Count > 0)
                        {
                            try
                            {
                                string URL = Convert.ToString(dtc.Rows[0]["Company_URL_Admin"]);
                                string cust_url = Convert.ToString(dtc.Rows[0]["Company_URL_Customer"]);
                                HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(URL + "Email/NewSendmoney-SuccessMailforCash.htm");
                                httpRequest.UserAgent = "Code Sample Web Client";
                                HttpWebResponse webResponse = (HttpWebResponse)httpRequest.GetResponse();
                                using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                                {
                                    body = reader.ReadToEnd();
                                }
                                string First_Name = Convert.ToString(ct.Rows[0]["First_Name"]);
                                string Email_ID = Convert.ToString(ct.Rows[0]["Email_ID"]);
                                string email = Email_ID.Trim();

                                body = body.Replace("[name]", First_Name);
                                body = body.Replace("[receivername]", Convert.ToString(bt.Rows[0]["Beneficiary_Name"]));

                                //----sender Details
                                body = body.Replace("[senderadd]", Convert.ToString(ct.Rows[0]["Address"]));
                                body = body.Replace("[senderphoneno]", Convert.ToString(ct.Rows[0]["Phone_Number"]));
                                body = body.Replace("[sendermobno]", Convert.ToString(ct.Rows[0]["Mobile_Number"]));
                                body = body.Replace("[senderemailid]", Email_ID);
                                body = body.Replace("[amtingbp]", obj.AmountInGBP.ToString());
                                body = body.Replace("[amtinforeign]", obj.AmountInPKR.ToString());
                                body = body.Replace("[transferfees]", obj.Transfer_Fees.ToString());
                                body = body.Replace("[Currency]", obj.Currency_Code);
                                body = body.Replace("[Customerrefno]", Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]));
                                body = body.Replace("[Hours]", Convert.ToString(dtc.Rows[0]["Cancel_Transaction_Hours"]));
                                //double newtotamount = Convert.ToDouble(obj.AmountInGBP) + Convert.ToDouble(obj.Transfer_Fees);
                                body = body.Replace("[totAmt]", newtotamount.ToString("0.00"));

                                body = body.Replace("[exchangerate]", obj.Exchange_Rate.ToString());

                                //----sender Details

                                body = body.Replace("[RefNo]", obj.ReferenceNo);
                                body = body.Replace("[receiveradd]", Convert.ToString(bt.Rows[0]["Beneficiary_Address"]));
                                body = body.Replace("[receiverphoneno]", Convert.ToString(bt.Rows[0]["Beneficiary_Telephone"]));
                                body = body.Replace("[receivermobno]", Convert.ToString(bt.Rows[0]["Beneficiary_Mobile"]));
                                body = body.Replace("[receiverbankname]", Convert.ToString(bt.Rows[0]["Bank_Name"]));
                                body = body.Replace("[receiveraccountno]", Convert.ToString(bt.Rows[0]["Account_Number"]));
                                body = body.Replace("[ttype]", obj.PaymentDepositType_ID.ToString());
                                body = body.Replace("[countrymsg]", Convert.ToString(""));
                                body = body.Replace("[CashCollectionMsg]", Convert.ToString(""));
                                body = body.Replace("[BaseCurrency]", Convert.ToString(dtc.Rows[0]["BaseCurrency_Code"]));
                                string timezone = Convert.ToString(dtc.Rows[0]["BaseCurrency_Timezone"]);
                                if (timezone != "" && timezone != null)
                                {
                                    var britishZone = TimeZoneInfo.FindSystemTimeZoneById("" + timezone + "");
                                    var d = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                                    body = body.Replace("[TransDate]", d.ToString("dd/MM/yyyy"));
                                }
                                else
                                {
                                    body = body.Replace("[TransDate]", DateTime.Now.ToString("dd/MM/yyyy"));
                                }
                                body = body.Replace("[PaymentType]", Convert.ToString(ds.Rows[0]["Ptype"]));
                                body = body.Replace("[TransferType]", Convert.ToString(ds.Rows[0]["Type_Name"]));
                                //double rewardamount = 0; string lbl = "";
                                //if (Convert.ToString(ds.Rows[0]["Wallet_ID"]) != null && Convert.ToString(ds.Rows[0]["Wallet_ID"]) != "")
                                //{
                                //    if (obj.Wallet_ID > 0 && Convert.ToString(obj.Wallet_Amount) != "" && Convert.ToString(obj.Wallet_Amount) != null)
                                //    {
                                //        obj.Wallet_Amount = Convert.ToDouble(ds.Rows[0]["Wallet_Amount"]);
                                //        rewardamount = obj.Wallet_Amount;
                                //        lbl = "Wallet";
                                //    }
                                //}

                                //if (Convert.ToString(ds.Rows[0]["Discount_ID"]) != null && Convert.ToString(ds.Rows[0]["Discount_ID"]) != "")
                                //{
                                //    if (obj.Discount_ID > 0 && Convert.ToString(obj.Discount_Amount) != "" && Convert.ToString(obj.Discount_Amount) != null)
                                //    {
                                //        obj.Discount_Amount = Convert.ToDouble(ds.Rows[0]["Discount_Amount"]);
                                //        rewardamount = obj.Discount_Amount;
                                //        lbl = "Discount";
                                //    }
                                //}
                                //double newtotamount1 = newtotamount - rewardamount;
                                body = body.Replace("[totAmt]", newtotamount1.ToString("0.00"));
                                if (rewardamount > 0)
                                {
                                    //body = body.Replace("[transaction_amount]", "<h3>Total Transaction Amount:&nbsp;<label class='orange'>" + obj.FromCurrency_Code + " " + newtotamount.ToString("0.00") + "</label></h3>");
                                    //body = body.Replace("[discountwallet_amount]", "<h3>" + lbl + " Amount:&nbsp;<label class='orange'>" + obj.FromCurrency_Code + " " + rewardamount.ToString("0.00") + "</label></h3>");
                                    body = body.Replace("[transaction_amount]", "Total Transfer Amount: <span style='color:#000;font-weight: bold; '> " + obj.FromCurrency_Code + " " + newtotamount.ToString("0.00") + "</span>");
                                    body = body.Replace("[discountwallet_amount]", "" + lbl + " Amount: <span style='color:#000;font-weight: bold; '>" + obj.FromCurrency_Code + " " + rewardamount.ToString("0.00") + "</span>");
                                }
                                else
                                {
                                    body = body.Replace("[transaction_amount]", "");
                                    body = body.Replace("[discountwallet_amount]", "<br/>");
                                }


                                string paybtn = "";
                                body = body.Replace("[link]", paybtn);
                                //Subject                        
                                subject = "[company_name] - Money Transfer Request Submitted Successfully - " + Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]) + " ";
                                if (obj.PaymentType_ID == 2)
                                {
                                    body = body.Replace("[divwirestyle]", "display:block;");
                                    body = body.Replace("[Note3]", Convert.ToString(ds.Rows[0]["Review_Transfer_Message"]));
                                }
                                else
                                {
                                    body = body.Replace("[divwirestyle]", "display:none;");
                                    body = body.Replace("[Note3]", "");
                                }
                                body = body.Replace("[wire6]", Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]));
                                string mail_send = (string)CompanyInfo.Send_Mail(dtc, email, body, subject, obj.Client_ID, obj.CB_ID, "Insert Transaction", "", "", _srvTransactionContext);

                                if (mail_send == "Success")
                                {
                                    CompanyInfo.InsertActivityLogDetails("App - Email sent successfully on send money success.", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Transfer", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                }
                                else
                                {
                                    CompanyInfo.InsertActivityLogDetails("App - " + mail_send, obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                                }
                            }
                            catch (Exception ex) { CompanyInfo.InsertActivityLogDetails("App - " + ex.ToString(), obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Email Sending", obj.CB_ID, obj.Client_ID, "Send Money Online", _srvTransactionContext); }
                        }
                        //transaction.Commit();
                        #region check location
                        string act = "";
                        try
                        {
                            obj.userAgent = (context.Request.Headers["User-Agent"]).ToString();
                            DataTable chkLocation1 = CompanyInfo.check_location(obj.Client_ID, obj.userAgent, _srvTransactionContext);
                            Boolean chkLocation = true;
                            string country_log = "";
                            string device_ty = "";

                            try
                            {
                                chkLocation = Convert.ToBoolean(chkLocation1.Rows[0]["is_valid"]);
                                country_log = Convert.ToString(chkLocation1.Rows[0]["Country"]);
                                device_ty = Convert.ToString(chkLocation1.Rows[0]["device_ty"]);

                            }
                            catch
                            {

                            }
                            if (!chkLocation)
                            {
                                //Notification
                                act = act + " | location is invalid";
                                string notification_icon1 = "money-recive.jpg";
                                string notification_message1 = "<span class='cls-admin'>Transaction <strong class='cls-new-benf'>Submitted from New Location</strong></span>";
                                CompanyInfo.save_notification_compliance(notification_message1, notification_icon1, Convert.ToString(Customer_ID), Convert.ToDateTime(obj.Record_Insert_DateTime), obj.Client_ID, 1, 0, obj.Branch_ID, 0, 1, 1, obj.Transaction_ID, _srvTransactionContext);
                                act = act + " |notification sent for new location";

                                //email
                                string subject1 = string.Empty;
                                string body1 = string.Empty;
                                HttpWebRequest httpRequest = null, httpRequest1 = null;
                                DataTable d2 = (DataTable)CompanyInfo.getCustomerDetails(obj.Client_ID, Customer_ID);
                                string sendmsg = "Transaction Submitted from New Location";
                                string company_name = Convert.ToString(dtc.Rows[0]["Company_Name"]);
                                string URL = Convert.ToString(dtc.Rows[0]["Company_URL_Admin"]);
                                string cust_url = Convert.ToString(dtc.Rows[0]["Company_URL_Customer"]);
                                httpRequest = (HttpWebRequest)WebRequest.Create(URL + "Email/new-login.html");
                                httpRequest.UserAgent = "Code Sample Web Client";
                                HttpWebResponse webResponse = (HttpWebResponse)httpRequest.GetResponse();
                                using (StreamReader reader = new StreamReader(webResponse.GetResponseStream()))
                                {
                                    body1 = reader.ReadToEnd();
                                }
                                body1 = body1.Replace("[name]", Convert.ToString(ct.Rows[0]["First_Name"]));
                                string enc_ref = CompanyInfo.Encrypt(Convert.ToString(ct.Rows[0]["WireTransfer_ReferanceNo"]), true);
                                string link = cust_url + "/secure-account-verfiy?reference=" + enc_ref;
                                body1 = body1.Replace("[link]", link);
                                body1 = body1.Replace("[New_Login_Detected]", "Transaction Submitted from New Location");
                                body1 = body1.Replace("[country]", country_log);
                                body1 = body1.Replace("[time]", (Convert.ToDateTime(CompanyInfo.gettime(obj.Client_ID, _srvTransactionContext))).ToString("dddd, dd MMMM yyyy HH:mm:ss"));
                                body1 = body1.Replace("[location_msg]", "We noticed a transaction from your account from a location that you have not used before. If this wasn't you, we'll help you secure your account.");
                                body1 = body1.Replace("[device]", device_ty);


                                string EmailID = Convert.ToString(ct.Rows[0]["Email_ID"]);

                                httpRequest1 = (HttpWebRequest)WebRequest.Create(URL + "Email/TransactionLocation.txt");
                                httpRequest1.UserAgent = "Code Sample Web Client";
                                HttpWebResponse webResponse1 = (HttpWebResponse)httpRequest1.GetResponse();
                                using (StreamReader reader = new StreamReader(webResponse1.GetResponseStream()))
                                {
                                    subject1 = reader.ReadLine();
                                }
                                subject1 += ct.Rows[0]["WireTransfer_ReferanceNo"];
                                string send_mail = (string)CompanyInfo.Send_Mail(dtc, EmailID, body1, subject1, obj.Client_ID, obj.Branch_ID, "", "", "", _srvTransactionContext);
                                CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);

                                //Notification
                                act = act + "| email sent for New Transaction Location ";

                            }
                        }
                        catch (Exception ex)
                        {
                            act = act + Convert.ToString(ex);
                            CompanyInfo.InsertActivityLogDetails("check location " + Convert.ToString(obj.Discount_Code) + ". transaction " + obj.ReferenceNo + ". Error: " + Convert.ToString(ex) + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-Insert Location", obj.CB_ID, obj.Client_ID, "Send Money", _srvTransactionContext);
                        }
                        CompanyInfo.InsertActivityLogDetails(act + " ", obj.User_ID, obj.Transaction_ID, obj.User_ID, Customer_ID, "Send-InsertTransfer", obj.CB_ID, obj.Client_ID, "", _srvTransactionContext);

                        #endregion
                    }
                }
                catch (Exception ex)
                {
                    //transaction.Rollback();
                    ds.Rows[0]["Status"] = 2;
                    ds.Rows[0]["Refno"] = ex.ToString();
                    ds.Rows[0]["CustRefno"] = Cust_ReferanceNo;
                    //ds.Rows.Add(2, ex.ToString(), Cust_ReferanceNo);
                    //Error Log Handled
                    //Model.ErrorLog objError = new Model.ErrorLog();
                    //objError.User = new Model.User();
                    //objError.Error = "Api : Login --" + ex.ToString();
                    //objError.Date = DateTime.Now;
                    //objError.User_ID = 1;
                    //objError.Client_ID = obj.Client_ID;

                    //Service.srvErrorLog srvError = new Service.srvErrorLog();
                    //srvError.Create(objError);
                    CompanyInfo.InsertErrorLogTracker(ex.ToString(), 0, 0, 0, 0, "InsertOnline", Convert.ToInt32(obj.Branch_ID), Convert.ToInt32(obj.Client_ID), "", _srvTransactionContext);

                }
                finally
                {
                    try
                    {
                        if (con.State != ConnectionState.Closed)
                            con.Close();
                    }
                    catch { }
                }

            }
            return ds;
        }


        public DataTable CheckAllLimits(Model.Transaction t, HttpContext context)
        {
            _srvTransactionContext = context;
            String CustomerName = t.Username;
            string token = ""; string limit_activity = ""; string POA_activity = "";
            int check_sec_limit = 1; int Validity_POA = 1; int chk_sec_validity = 1;
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));

            MySqlCommand _cmdCustdetails = new MySqlCommand("Customer_RegDetails");
            _cmdCustdetails.CommandType = CommandType.StoredProcedure;
            _cmdCustdetails.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            _cmdCustdetails.Parameters.AddWithValue("_Customer_ID", Customer_ID);
            DataTable dCustdetails = db_connection.ExecuteQueryDataTableProcedure(_cmdCustdetails);
            _cmdCustdetails.Dispose();
            if (dCustdetails.Rows.Count > 0)
            {
                CustomerName = Convert.ToString(dCustdetails.Rows[0]["First_Name"]) + " "+ Convert.ToString(dCustdetails.Rows[0]["Last_Name"]);
            }

            MySqlCommand _cmd = new MySqlCommand("GetPermissions");
            _cmd.CommandType = CommandType.StoredProcedure;
            _cmd.Parameters.AddWithValue("_whereclause", "");
            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            DataTable dt = db_connection.ExecuteQueryDataTableProcedure(_cmd);
            string SendMoneyToken = "";
            string RewardToken = "";
            DateTime sendhashexpire = DateTime.Now;
            string SOFdocupload = "";
            int uploadSOF = 1;
            int showalertAML = 1;
            int AMLflag = 0;
            DateTime TransactionStartdate = Convert.ToDateTime("0001-01-01");
            try
            {

                //token = (context.Request.Headers["Authorization"]).Substring("Bearer ".Length);
                token =  Convert.ToString(t.readTokenValue)  ;
                _cmd = new MySqlCommand("SetTransactionJourney");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Token", token);
                _cmd.Parameters.AddWithValue("_SendMoneyToken", SendMoneyToken);
                _cmd.Parameters.AddWithValue("_RewardToken", RewardToken);
                _cmd.Parameters.AddWithValue("_SOFdocupload", SOFdocupload);
                _cmd.Parameters.AddWithValue("_sendmoneyhashexpire", sendhashexpire);
                _cmd.Parameters.AddWithValue("_TransactionStartdate", TransactionStartdate);
                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                DataTable journerydata = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (journerydata.Rows.Count > 0)
                {
                    if (journerydata.Rows[0]["SendMoneyToken"] != DBNull.Value)
                    {
                        SendMoneyToken = Convert.ToString(journerydata.Rows[0]["SendMoneyToken"]);
                    }
                    if (journerydata.Rows[0]["RewardToken"] != DBNull.Value)
                    {
                        RewardToken = Convert.ToString(journerydata.Rows[0]["RewardToken"]);
                    }
                    if (journerydata.Rows[0]["SOFdocupload"] != DBNull.Value)
                    {
                        SOFdocupload = Convert.ToString(journerydata.Rows[0]["SOFdocupload"]);
                    }
                    if (journerydata.Rows[0]["sendmoneyhashexpire"] != DBNull.Value)
                    {
                        sendhashexpire = Convert.ToDateTime(journerydata.Rows[0]["sendmoneyhashexpire"]);
                    }
                    if (journerydata.Rows[0]["TransactionStartdate"] != DBNull.Value)
                    {
                        TransactionStartdate = Convert.ToDateTime(journerydata.Rows[0]["TransactionStartdate"]);
                    }
                    if (journerydata.Rows[0]["uploadSOF"] != DBNull.Value)
                    {
                        uploadSOF = Convert.ToInt32(journerydata.Rows[0]["uploadSOF"]);
                    }

                }
            }
            catch (Exception ex) { }

            DataTable ds = new DataTable();
            ds.Columns.Add("Status", typeof(int));
            ds.Columns.Add("Errormessage", typeof(string));
            try
            {
                int blacklisted = 1;
                DataRow[] dr = dt.Select("PID=41");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        blacklisted = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                DataRow[] dr1 = dt.Select("PID=138");
                if (dr1.Count() > 0)
                {
                    foreach (DataRow drr in dr1)
                    {

                        chk_sec_validity = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                //Check ID Upload on perm
                int idperm = 1;
                dr = dt.Select("PID=43");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        idperm = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                //vyankatesh change
                int perm_primaryid_as_POA = 1;
                dr = dt.Select("PID=203");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        perm_primaryid_as_POA = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                DataRow[] dr2 = dt.Select("PID=171");//Rushikesh checking compliance assist and id3 aml check has done or not.
                if (dr2.Count() > 0)
                {
                    foreach (DataRow drr in dr2)
                    {

                        showalertAML = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }



                ds.Columns.Add("BlacklistedFlag", typeof(int)); ds.Columns.Add("Blacklistedmessage", typeof(string));
                //Monthly Limit && SOF perm status
                ds.Columns.Add("SourceofFunds", typeof(int)); ds.Columns.Add("exceedAmount", typeof(int));
                ds.Columns.Add("monlimit", typeof(int)); ds.Columns.Add("monthlylimitmsg", typeof(string));
                //AML Limit
                ds.Columns.Add("SOFDaysCount", typeof(int)); ds.Columns.Add("SOFDaysCount_Msg", typeof(string));
                ds.Columns.Add("AMLlimit", typeof(int)); ds.Columns.Add("AMLlimitmsg", typeof(string)); ds.Columns.Add("SourceOfFunds_Limit", typeof(double));
                ds.Columns.Add("PrimaryID_Limit", typeof(double)); ds.Columns.Add("SecondaryID_Limit", typeof(double));
                //Customer limit
                ds.Columns.Add("Custlimit", typeof(int)); ds.Columns.Add("Custlimitmsg", typeof(string));
                //Daily limit
                ds.Columns.Add("daily_transfer_count", typeof(int)); ds.Columns.Add("daily_transfer_msg", typeof(string));
                ds.Columns.Add("dailylimit", typeof(int)); ds.Columns.Add("Daily_Limit_Message", typeof(string)); ds.Columns.Add("TotalCustAmount", typeof(string));
                //Payment type and collection type limit
                ds.Columns.Add("paymenttypelimit", typeof(int)); ds.Columns.Add("paymenttypelimitmsg", typeof(string));
                ds.Columns.Add("collectiontypelimit", typeof(int)); ds.Columns.Add("collectiontypelimitmsg", typeof(string));
                //Check ID Upload
                ds.Columns.Add("IsValidID", typeof(int)); ds.Columns.Add("IDUploadmsg", typeof(string));
                //Restrict Send Money Proceed 
                ds.Columns.Add("AllowProceedFlag", typeof(int)); ds.Columns.Add("AllowProceedFlag_Msg", typeof(string));
                ds.Columns.Add("TotalBenfAmount", typeof(double)); ds.Columns.Add("TotalCustAmount1", typeof(double));
                ds.Columns.Add("TotalBenfAmtYr", typeof(double));
                ds.Columns.Add("transfer_count_days", typeof(int)); ds.Columns.Add("paywithwallet", typeof(int));
                ds.Columns.Add("PrimaryIdmsg", typeof(string));
                bool flag = false; int paywithwallet = 0;
                int ExpiryMonths = 3, count = 0, sof = 1, monlimit = 0, amllimit = 0, custlimit = 0, dailylimit = 0, IsValidID = 0, daily_transfer_count = 0, SOFDaysCount = 0, transfer_count_days = 0;
                double exceedAmt = 0, SourceOfFunds_Limit = 0, PrimaryID_Limit = 0, SecondaryID_Limit = 0, TotalCustAmount = 0;
                string Blacklistemsg = "", monthlylimitmsg = "", amlmsg = "", custlimitmsg = "", dailylimitmsg = "", IDUploadmsg = "", daily_transfer_msg = "", SOFDaysCount_Msg = "";
                string basecurrency = "", PrimaryIdmsg = "";
                int AllowProceedFlag = 0; string AllowProceedFlag_Msg = "";
                //t.Customer_ID = Convert.ToInt32(dictObjMain["Customer_ID"]);
                //t.Beneficiary_ID = Convert.ToInt32(dictObjMain["Beneficiary_ID"]);

                #region payment type wise limit declaration
                int chkdayslimit = 1;
                double total = 0;
                double total_benf = 0;
                double total_cust = 0;
                double total_benf_year = 0;
                int chkdailycount = 1;
                int chkdailylimit = 1;
                DataTable dds = null;
                DataTable d1 = null;
                DataTable dsPayment = new DataTable();
                #endregion

                DateTime dateTime = DateTime.Now;
                DataTable cdt = (DataTable)CompanyInfo.get(t.Client_ID, _srvTransactionContext);
                if (cdt.Rows.Count > 0)
                {
                    basecurrency = Convert.ToString(cdt.Rows[0]["BaseCurrency_Code"]);
                    string timezone = Convert.ToString(cdt.Rows[0]["BaseCurrency_Timezone"]);
                    if (timezone != "" && timezone != null)
                    {
                        var britishZone = TimeZoneInfo.FindSystemTimeZoneById("" + timezone + "");
                        dateTime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                    }
                    if (Convert.ToString(cdt.Rows[0]["ExpiryMonths"]) != "" && Convert.ToString(cdt.Rows[0]["ExpiryMonths"]) != null)
                        ExpiryMonths = Convert.ToInt32(cdt.Rows[0]["ExpiryMonths"]);
                    Validity_POA = Convert.ToInt32(cdt.Rows[0]["Validity_POA"]);
                }
                //string Record_DateTime = dateTime.ToString("yyyy-MM-dd HH:mm:ss");
                string Record_DateTime = CompanyInfo.gettime(t.Client_ID, Customer_ID.ToString(), Convert.ToInt32(cdt.Rows[0]["BaseCountry_ID"]), _srvTransactionContext);
                if (Record_DateTime != null && Record_DateTime != "")
                {
                    dateTime = Convert.ToDateTime(Record_DateTime);
                }
                t.Record_Insert_DateTime = dateTime.Date.ToString("yyyy-MM-dd");

                if (t.PaymentType_ID == 7)
                {
                    paywithwallet = 1;
                    _cmd = new MySqlCommand("SP_GetWalletDetails");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    _cmd.Parameters.AddWithValue("_where", " and wallet_table.AgentFlag=1 and currency_master.Currency_Code='" + t.FromCurrency_Code + "'");
                    DataTable dw = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    _cmd.Dispose();
                    if (dw.Rows.Count == 1)
                    {
                        double balance = Convert.ToDouble(dw.Rows[0]["Wallet_balance"]);
                        if (balance >= (t.AmountInGBP + t.Transfer_Fees))
                        {
                            paywithwallet = 0;//sufficient Balance

                        }
                        else
                        { // added by siddhi
                            paywithwallet = 1;//InSufficient Balance
                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                            PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                            0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                            transfer_count_days, paywithwallet, PrimaryIdmsg);

                            return ds;
                        }
                    }
                }
                if (blacklisted == 0)
                {
                    _cmd = new MySqlCommand("Customer_RegDetails");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    DataTable d2 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    _cmd.Dispose();
                    if (d2.Rows.Count > 0)
                    {
                        string cnt = Convert.ToString(d2.Rows[0]["Blacklisted_flag"]);
                        if (cnt != "" && cnt != null)
                        {
                            count = Convert.ToInt32(cnt);
                            if (count == 1)
                            {
                                Blacklistemsg = "Sorry, it looks like we need more information from you. Please contact us for Sending Money.";
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                  PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                  0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                  transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                            else
                            {
                                Blacklistemsg = "";
                            }
                        }
                    }
                }
                else
                {
                    Blacklistemsg = "";
                }

                if (showalertAML == 0)//Rushikesh Check aml check is done or not for compliance assist and id3.
                {

                    try
                    {

                        MySqlCommand cmdp_active = new MySqlCommand("Check_AML_history");
                        cmdp_active.CommandType = CommandType.StoredProcedure;
                        // string whereclause = "Beneficiary_Ref = \"" + benef_ref_num + "\"";
                        string whereclause = "Client_ID =1";
                        cmdp_active.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        cmdp_active.Parameters.AddWithValue("_Whereclause", whereclause);


                        DataTable dtaml = db_connection.ExecuteQueryDataTableProcedure(cmdp_active);

                        if (dtaml != null && dtaml.Rows.Count > 0)
                        {
                            // Initialize flags
                            bool hasApiId1 = false;
                            bool hasApiId10 = false;
                            bool isactiveApiId1 = false;
                            bool isactiveApiId10 = false;
                            // Check for the presence of API_ID values
                            foreach (DataRow row in dtaml.Rows)
                            {
                                if (row.Field<int>("API_ID") == 1)
                                {
                                    hasApiId1 = true;
                                }
                                if (row.Field<int>("API_ID") == 10)
                                {
                                    hasApiId10 = true;
                                }
                            }
                            MySqlCommand cmdp_active1 = new MySqlCommand("active_thirdparti_aml_api");
                            cmdp_active1.CommandType = CommandType.StoredProcedure;
                            string whclause = "Client_ID = " + t.Client_ID;
                            cmdp_active1.Parameters.AddWithValue("_whereclause", whclause);
                            DataTable dtr = db_connection.ExecuteQueryDataTableProcedure(cmdp_active1);
                            foreach (DataRow row in dtr.Rows)
                            {

                                if (row.Field<int>("API_ID") == 1)
                                {
                                    isactiveApiId1 = true;
                                }
                                if (row.Field<int>("API_ID") == 10)
                                {
                                    isactiveApiId10 = true;
                                }


                            }
                            if (hasApiId1 && hasApiId10)
                            {
                                AMLflag = 3;
                            }
                            else if (hasApiId1 && isactiveApiId1)
                            {
                                AMLflag = 1;
                            }
                            else if (hasApiId10 && isactiveApiId10)
                            {
                                AMLflag = 2;
                            }
                            else
                            {
                                AMLflag = 4;
                            }


                        }
                    }
                    catch (Exception ex)
                    {

                    }


                }
                else
                {
                    AMLflag = 3;
                }
                if (AMLflag != 3)//Rushikesh If aml is not done then return the alert.
                {
                    PrimaryIdmsg = "Primary ID Has Not Been Uploaded Correctly, Please Contact Our Compliance Team.";
                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                            PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                            0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                            transfer_count_days, paywithwallet, PrimaryIdmsg);

                    return ds;
                }


                #region check limit from transaction date
                try
                {
                    int perTransac = 1;
                    dr = dt.Select("PID=220");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            perTransac = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    //limit_activity += "220 permission status" + perTransac;
                    if (perTransac == 0)
                    {
                        string customer_where = " and Customer_ID = " + Customer_ID + "";
                        MySqlCommand cmdst = new MySqlCommand("gettransaction");
                        cmdst.CommandType = CommandType.StoredProcedure;
                        cmdst.Parameters.AddWithValue("_whereclause", customer_where);
                        DataTable cmttr = db_connection.ExecuteQueryDataTableProcedure(cmdst);
                        // limit_activity += "cmttr Count" + Convert.ToInt32(cmttr.Rows.Count);
                        if (Convert.ToInt32(cmttr.Rows[0]["tranCount"]) == 0)
                        {
                            MySqlCommand cmd1 = new MySqlCommand("Updatetransferlimits");
                            cmd1.CommandType = CommandType.StoredProcedure;
                            cmd1.Parameters.AddWithValue("_startDate", Record_DateTime);
                            cmd1.Parameters.AddWithValue("_Customer_id", Customer_ID);
                            string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(cmd1));
                        }
                    }
                }
                catch (Exception ex)
                {
                    //limit_activity = "220 limit_activity" + ex.ToString().Replace("\'", "\\'");
                    string stattus = (string)CompanyInfo.InsertErrorLogDetails("220 exception" + ex.Message.Replace("\'", "\\'"), Convert.ToInt32(t.User_ID), "Complience Assist AMl Check - 2st api call (PDF download)  ", Convert.ToInt32(t.Branch_ID), Convert.ToInt32(t.Client_ID));

                }
                #endregion
                #region Address mismatch
                int adrmismatch = 1;
                dr = dt.Select("PID=141");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        adrmismatch = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 0A10:", 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                if (adrmismatch == 0)
                {
                    _cmd = new MySqlCommand("CheckIDExpiry");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    DataTable table = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 0A1:", 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                    if (table.Rows.Count > 0)// Check 1
                    {
                        int AddressMismatchFlag = Convert.ToInt32(table.Rows[0]["AddressMismatchFlag"]);
                        string senPExpDate = Convert.ToString(table.Rows[0]["SenderID_ExpiryDate"]);
                        DateTime dt1 = DateTime.Now.Date;
                        DateTime From_Date = new DateTime(); DateTime To_Date = new DateTime();
                        //if (senPExpDate != "" && senPExpDate != null && senPExpDate != "VGrYRT2Em7s=")
                        //{
                        //    DateTime dt2 = DateTime.ParseExact(Convert.ToDateTime(senPExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                        //    if (dt1 < dt2)
                        //    {

                        CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 0A:", 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                        if (AddressMismatchFlag == 0)
                        {

                            DataTable dds1 = CompanyInfo.get(t.Client_ID, _srvTransactionContext);

                            double amlthresholdlimit = 2500;
                            if (dds1.Rows.Count > 0)
                            {
                                amlthresholdlimit = Convert.ToDouble(dds1.Rows[0]["Aml_Threshold_Limit"]);
                            }

                            #region step 1 
                            _cmd = new MySqlCommand("chkCustSOF");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            DataTable d11 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                            CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 0B:", 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                            if (d11.Rows.Count != 0)
                            {
                                CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 0C:", 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                double pil = Convert.ToInt32(d11.Rows[0]["PrimaryID_Limit"]);
                                double sil = Convert.ToInt32(d11.Rows[0]["SecondaryID_Limit"]);
                                double amount = Convert.ToDouble(d11.Rows[0]["SourceOfFunds_Limit"]);
                                DateTime regdate = Convert.ToDateTime(d11.Rows[0]["StartDate"]);
                                int month = Convert.ToInt32(d11.Rows[0]["Validation_Days"]);
                                int txncount = Convert.ToInt32(d11.Rows[0]["Transfer_Count"]);
                                int chk_last_90_lmt = Convert.ToInt32(d11.Rows[0]["chk_last_days_lmt"]);
                                DateTime dt11 = regdate.Date.AddDays(month);
                                DateTime ddt_poa = regdate.Date.AddDays(month);
                                double totgbp = 0.0;
                                DateTime today = dateTime; // DateTime.Today;
                                DateTime last_90_days_dt = today.AddDays(-month);
                                if (chk_last_90_lmt == 0)
                                {
                                    From_Date = last_90_days_dt;
                                    To_Date = today;
                                }
                                else
                                {
                                    if (dateTime.Date > dt11.Date)
                                    {
                                        string newstartdate = ""; string newenddate = "";
                                        //Update Date to the Customer AML Limit
                                        for (DateTime dd = dt11; dd <= dateTime.AddDays(month); dd = dd.AddDays(month))
                                        {
                                            if (newstartdate == null || newstartdate == "")
                                            {
                                                if (dd.AddDays(month) >= DateTime.Now)
                                                {
                                                    newstartdate = dd.ToString(); //newenddate = Convert.ToString(dd.AddMonths(month));
                                                    From_Date = Convert.ToDateTime(newstartdate);
                                                    To_Date = dd.AddDays(month);



                                                }
                                            }
                                        }
                                    }

                                    else
                                    {
                                        From_Date = regdate;
                                        To_Date = dt11;
                                    }
                                }
                                _cmd = new MySqlCommand("Transaction_MonthWise");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                                _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                if (dtt.Rows.Count > 0)
                                {

                                    if (dtt.Rows[0]["AmountInGBP"] != null && Convert.ToString(dtt.Rows[0]["AmountInGBP"]) != "")
                                    {
                                        totgbp += Convert.ToDouble(dtt.Rows[0]["AmountInGBP"].ToString());
                                    }
                                }
                                double totgbpvalue = 0.0;//double totgbpvalue = t.AmountInBase; //
                                totgbpvalue = totgbp + t.AmountInGBP;
                                CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 0:", 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                if (totgbpvalue > amlthresholdlimit)// Check 2
                                {
                                    _cmd = new MySqlCommand("CheckIDExpiry");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                    _cmd.Parameters.AddWithValue("_IDType_ID", 2);
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    DataTable tbl = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                    CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 1 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                    if (tbl.Rows.Count > 0)
                                    {
                                        string recDate = Convert.ToString(tbl.Rows[0]["Record_Insert_DateTime"]);
                                        DateTime indt = DateTime.ParseExact(Convert.ToDateTime(recDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                        DateTime fifth = To_Date;// indt.Date.AddMonths(ExpiryMonths);//AddDays(150);
                                        DateTime expDat = To_Date; string exp = Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"]);
                                        if (exp != null && exp != "")
                                            expDat = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                        bool exp_lmt = true;
                                        if (exp != null && exp != "")
                                        {
                                            exp_lmt = (expDat < dt1 && exp != null && exp != "");
                                        }
                                        DateTime recDate_validity = Convert.ToDateTime(indt.AddYears(Validity_POA));
                                        CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 2 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                        if ((dt1 > ddt_poa) || (expDat < dt1 && exp != null && exp != ""))//(indt <= dt1 && dt1 >= fifth)
                                        {
                                        CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 3 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                            //if ((expDat > dt1) && ((exp != null && exp != "") || recDate_validity > indt) && Convert.ToInt32(chk_sec_validity) == 0)
                                            if (recDate_validity > indt && Convert.ToInt32(chk_sec_validity) == 0)
                                            {
                                                check_sec_limit = 0; amllimit = 10;
                                                CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 4 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                sof = 0;
                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                       PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                        0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                       transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                return ds;
                                            }
                                            else if ((expDat < dt1) || recDate_validity < indt)
                                            {
                                                amllimit = 2;
                                                amlmsg = "Address proof needs to be uploaded to proceed with this transfer, as there is an address mismatch during the AML check. Do you want to Upload?";
                                                sof = 0;
                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                       PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                        0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                       transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                return ds;
                                            }

                                        }

                                    }
                                    else
                                    {
                                        amllimit = 2;
                                        amlmsg = "Address proof needs to be uploaded to proceed with this transfer, as there is an address mismatch during the AML check. Do you want to Upload?";
                                        sof = 0;
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                       PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                        0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                       transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                }
                                else
                                {
                                    _cmd = new MySqlCommand("CheckIDExpiry");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                    _cmd.Parameters.AddWithValue("_IDType_ID", 2);
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    DataTable tbl = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                    if (tbl.Rows.Count > 0)
                                    {
                                        string recDate = Convert.ToString(tbl.Rows[0]["Record_Insert_DateTime"]);
                                        DateTime indt = DateTime.ParseExact(Convert.ToDateTime(recDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                        DateTime fifth = To_Date;// indt.Date.AddMonths(ExpiryMonths);//AddDays(150);
                                        DateTime expDat = To_Date; string exp = Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"]);
                                        if (exp != null && exp != "")
                                            expDat = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                        bool exp_lmt = true;
                                        if (exp != null && exp != "")
                                        {
                                            exp_lmt = (expDat < dt1 && exp != null && exp != "");
                                        }
                                        DateTime recDate_validity = Convert.ToDateTime(indt.AddYears(Validity_POA));

                                        if ((dt1 > ddt_poa) || (expDat < dt1 && exp != null && exp != ""))//(indt <= dt1 && dt1 >= fifth)
                                        {
                                            //if ((expDat > dt1) && ((exp != null && exp != "") || recDate_validity > indt) && Convert.ToInt32(chk_sec_validity) == 0)
                                            if (recDate_validity > indt && Convert.ToInt32(chk_sec_validity) == 0)
                                            {
                                                string Query = "update customer_aml_table set SecondaryID_Limit=" + amlthresholdlimit + " where Customer_ID =" + Customer_ID;
                                                _cmd = new MySqlCommand("Default_SP");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("_Query", Query);
                                                int p = db_connection.ExecuteNonQueryProcedure(_cmd);
                                            }
                                            else if ((expDat < dt1) || recDate_validity < indt)
                                            {
                                                string Query = "update customer_aml_table set SecondaryID_Limit=" + amlthresholdlimit + " where Customer_ID =" + Customer_ID;
                                                _cmd = new MySqlCommand("Default_SP");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("_Query", Query);
                                                int p = db_connection.ExecuteNonQueryProcedure(_cmd);
                                            }

                                        }

                                    }
                                    else
                                    {
                                        string Query = "update customer_aml_table set SecondaryID_Limit=" + amlthresholdlimit + " where Customer_ID =" + Customer_ID;
                                        _cmd = new MySqlCommand("Default_SP");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_Query", Query);
                                        int p = db_connection.ExecuteNonQueryProcedure(_cmd);
                                    }

                                }

                            }

                            #endregion

                        }
                        //    }
                        //}
                    }
                }
                #endregion


                //Id Upload Redirection 
                int idupload = 1;
                dr = dt.Select("PID=110");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        idupload = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                if (idupload == 0)
                {
                    _cmd = new MySqlCommand("sp_IDUpload_permission");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    int Country_ID = Convert.ToInt32(cdt.Rows[0]["BaseCountry_ID"]);
                    t.Record_Insert_DateTime = CompanyInfo.gettime(t.Client_ID, Customer_ID.ToString(), Country_ID, _srvTransactionContext);
                    //gettime(t.Client_ID, Customer_ID, Country);
                    string dateTimeString8 = dateTime.ToString("dd/MM/yyyy");
                    dateTimeString8 = dateTimeString8.Replace("-", "/");
                    //_cmd.Parameters.AddWithValue("_whereclause", Customer_ID);
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_whereclause", " and documents_details.Customer_ID = '" + Customer_ID + "' and documents_details.IDType_ID = 1 and (SenderID_ExpiryDate)<= " + dateTimeString8 + " = 0");
                    DataTable dt_id1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    int Expired_ID = 0; int verified = 0;
                    if (dt_id1 != null && dt_id1.Rows.Count > 0)
                    {

                        for (int i = 0; i < dt_id1.Rows.Count; i++)
                        {
                            Expired_ID = Convert.ToInt32(dt_id1.Rows[0]["Expired"].ToString());
                            verified = Convert.ToInt32(dt_id1.Rows[0]["Verfied"].ToString());
                        }

                    }
                    if (Expired_ID == 0 && verified != 0)
                    {
                        PrimaryIdmsg = "Thank you for uploading your photo identification document. Your ID verification is under process.";

                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                    PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                    0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                    transfer_count_days, paywithwallet, PrimaryIdmsg);

                        return ds;
                    }

                }


                #region Beneficiary linked transaction exceeded ask for sof
                DataTable dt_link = new DataTable(); //added  by vyankatesh
                int sofupload_benef = 1; var benfwcnt = 0;// int hold_beneflinkedtrnsaction_limitexce = 1;
                //If beneficiary Linked transaction limit exceed then ask for sof
                string whereclause_new = ""; string activitybeneflink = string.Empty; DataTable Benef_limit = new DataTable();
                string phone = ""; string bank_details = ""; string linkActivity = "";
                dr = dt.Select("PID=213");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        sofupload_benef = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }

                CompanyInfo.InsertrequestLogTracker("Beneficiary linked transaction exceeded ask for sof sofupload_benef:" + sofupload_benef + " and Beneficiary_ID:" + t.Beneficiary_ID, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                if (sofupload_benef == 0 && t.Beneficiary_ID > 0)
                {
                    int hold_beneflink_mob_bankDetails = 1;
                    String Record_Insert_Date = Record_DateTime.Substring(0, 10);
                    dr = dt.Select("PID=206");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            hold_beneflink_mob_bankDetails = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    whereclause_new = " and date(aa.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "'";
                    whereclause_new = whereclause_new + " and (concat(cc.First_Name,' ',case when (cc.Middle_Name is not null and cc.Middle_Name!='') then concat(cc.Middle_Name,' ') else '' end,'',cc.Last_Name) like '%" + CustomerName + "%'";
                    //Get Receiver Details
                    MySqlCommand _cmdbenf = new MySqlCommand("Beneficiary_Search");
                    _cmdbenf.CommandType = CommandType.StoredProcedure;
                    string whereclause = " ";
                    if (t.Beneficiary_ID > 0)
                    {
                        whereclause = whereclause + " and bb.Beneficiary_ID=" + t.Beneficiary_ID + "";
                    }
                    _cmdbenf.Parameters.AddWithValue("_whereclause", whereclause);
                    DataTable bt1 = db_connection.ExecuteQueryDataTableProcedure(_cmdbenf);
                    t.Beneficiary_Name = Convert.ToString(bt1.Rows[0]["Beneficiary_Name"]);
                    if (hold_beneflink_mob_bankDetails == 0)
                    {
                        if (bt1.Rows.Count >= 0)
                        {
                            if (bt1.Rows[0]["Beneficiary_Mobile"] != "" && bt1.Rows[0]["Beneficiary_Mobile"] != null)
                            {
                                linkActivity += ", Beneficiary_Mobile :" + bt1.Rows[0]["Beneficiary_Mobile"];
                                phone = phone + " OR (Beneficiary_Mobile ='" + bt1.Rows[0]["Beneficiary_Mobile"] + "' )";
                            }
                            if ((bt1.Rows[0]["BBank_ID"] != "" && bt1.Rows[0]["BBank_ID"] != null && Convert.ToString(bt1.Rows[0]["BBank_ID"]) != "0") || (bt1.Rows[0]["Account_Number"] != null && bt1.Rows[0]["Account_Number"] != ""))
                            {
                                linkActivity += ", Beneficiary Bank ID : " + bt1.Rows[0]["BBank_ID"] + ", Beneficiary Bank Account Number : " + bt1.Rows[0]["Account_Number"];
                                bank_details = " OR (";
                                int o = 0;
                                if ((bt1.Rows[0]["BBank_ID"] != "" && bt1.Rows[0]["BBank_ID"] != null && bt1.Rows[0]["BBank_ID"] != "0"))
                                {

                                    bank_details = bank_details + "  (BBank_ID ='" + bt1.Rows[0]["BBank_ID"] + "' )";
                                }
                                if ((bt1.Rows[0]["Account_Number"] != "" && bt1.Rows[0]["Account_Number"] != null))
                                {
                                    if (o != 0)
                                    {
                                        bank_details = bank_details + " (Account_Number ='" + bt1.Rows[0]["Account_Number"] + "' )";
                                    }
                                    else
                                    {
                                        bank_details = bank_details + " and (Account_Number ='" + bt1.Rows[0]["Account_Number"] + "' )";
                                    }
                                }
                                bank_details = bank_details + " )";
                            }
                        }
                        whereclause_new = whereclause_new + "  OR ((Beneficiary_Name like '%" + t.Beneficiary_Name + "' or Beneficiary_Name like '" + t.Beneficiary_Name + "%')" + phone + bank_details + "))";
                    }
                    else
                    {
                        whereclause_new = whereclause_new + "  OR   (Beneficiary_Name like '%" + t.Beneficiary_Name + "' or Beneficiary_Name like '" + t.Beneficiary_Name + "%' ))";
                    }
                    try
                    {
                        int hold_link_transaction = 1; var cnt = 0;
                        dr = dt.Select("PID=83"); //hold linked transaction
                        if (dr.Count() > 0)
                        {
                            foreach (DataRow drr in dr)
                            {
                                hold_link_transaction = Convert.ToInt32(drr["Status_ForCustomer"]);
                            }
                        }
                        string cust_Comment = "";
                        linkActivity += ", Link transaction Perm Status :" + hold_link_transaction;
                        CompanyInfo.InsertrequestLogTracker("Link transaction Perm Step 1", 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                        if (hold_link_transaction == 0)
                        {
                            MySqlCommand _cmd1 = new MySqlCommand("sp_select_linked_txn_rpt");
                            _cmd1.CommandType = CommandType.StoredProcedure;
                            _cmd1.Parameters.AddWithValue("_ClientId", t.Client_ID);
                            _cmd1.Parameters.AddWithValue("_BranchId", t.Branch_ID);
                            _cmd1.Parameters.AddWithValue("_whereclause", whereclause_new);
                            _cmd1.Parameters.AddWithValue("_conditionclause", "inner join user_master um on um.User_ID=aa.User_ID");
                            _cmd1.Parameters.AddWithValue("_selectclause", "concat('') as pocname,");
                            //_cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)<> 1 and Count(cr1.Last_Name)<>1 and Count(ifnull(cr1.Middle_Name,0))<>1) AS a)");
                            _cmd1.Parameters.AddWithValue("_chk_clause", "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)>= 1 and Count(cr1.Last_Name)>=1 and Count(ifnull(cr1.Middle_Name,0))>=1) AS a)");
                            _cmd1.Parameters.AddWithValue("_cust_clause", "and cc.Customer_ID=aa.Customer_ID");
                            _cmd1.Parameters.AddWithValue("_benf_clause", "");
                            _cmd1.Parameters.AddWithValue("_order_by_value", "Sender,aa.Customer_ID ");
                            dt_link = db_connection.ExecuteQueryDataTableProcedure(_cmd1); //dt replace with ddy_link by vyankatesh due to error in permiss

                            CompanyInfo.InsertrequestLogTracker("Link transaction Perm Step 2 whereclause_new: "+ whereclause_new, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            CompanyInfo.InsertrequestLogTracker("Link transaction Perm Step 21 whereclause_new: " + "concat(cc.First_Name,' ',ifnull(cc.Middle_Name,''),' ',cc.Last_Name) IN (SELECT * FROM (SELECT concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) FROM customer_registration cr1  inner join transaction_table tt1 on tt1.Customer_ID=cr1.Customer_ID where 1=1  and   date(tt1.Record_Insert_DateTime) between '" + Record_Insert_Date + "' and '" + Record_Insert_Date + "' GROUP BY concat(cr1.First_Name,' ',ifnull(cr1.Middle_Name,''),' ',cr1.Last_Name) HAVING COUNT(cr1.First_Name)>= 1 and Count(cr1.Last_Name)>=1 and Count(ifnull(cr1.Middle_Name,0))>=1) AS a)", 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            CompanyInfo.InsertrequestLogTracker("Link transaction Perm Step 22 whereclause_new: " + dt_link.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                            if (dt_link.Rows.Count > 0 /*&& cnt == 0*/)
                            {
                                linkActivity += ", Link transaction Match found count :" + dt_link.Rows.Count;

                                t.TransactionStatus_ID = 6;
                                cnt++;
                                //cust_Comment = "Hold Reason: Linked transaction should be on hold";

                                //vyankatesh 16-09-24 // hold linked transcation cheked Customer or Beneficiary Match 
                                var custwcnt = 0; var benfphonewcnt = 0; var benfbankwcnt = 0;
                                try
                                {

                                    var benfwhere = "Reciever like '%" + t.Beneficiary_Name.Trim() + "' or Reciever like '" + t.Beneficiary_Name.Trim() + "%'";

                                    var phonewhere = phone;
                                    var bankewhere = bank_details;

                                    DataRow[] drs = dt_link.Select(benfwhere);
                                    if (drs.Count() > 0)
                                    {
                                        benfwcnt++;
                                    }
                                }
                                catch (Exception _ex) { }
                                if (benfwcnt > 0)
                                {
                                    cnt++;
                                    cust_Comment += "Hold Reason: Beneficiary Linked transaction should be on hold";
                                }


                                linkActivity += ", Link transaction Hold Reason :" + cust_Comment;

                            }
                        }
                    }
                    catch { }



                    #region Beneficiary limit wise linkedTransaction Teeparam

                    try
                    {
                        // if (hold_beneflinkedtrnsaction_limitexce == 0)
                        // {
                        //Get Beneficiary limit details

                        string Whereclause_beneflink = "";
                        DateTime dt1 = DateTime.Now.Date;
                        DateTime From_Date = new DateTime(); DateTime To_Date = new DateTime();
                        string From_Date1 = ""; string To_Date1 = "";

                        using (MySqlCommand _cmdBenfl = new MySqlCommand("chk_Beneficiary_limit"))
                        {
                            _cmdBenfl.CommandType = CommandType.StoredProcedure;
                            _cmdBenfl.Parameters.AddWithValue("_ClientId", t.Client_ID);
                            _cmdBenfl.Parameters.AddWithValue("_BeneficiaryId", t.Beneficiary_ID);
                            Benef_limit = db_connection.ExecuteQueryDataTableProcedure(_cmdBenfl);
                        }
                        activitybeneflink = "Beneficiary limit :- " + Benef_limit.Rows.Count;

                        CompanyInfo.InsertrequestLogTracker("Beneficiary limit wise linkedTransaction "+ dt_link.Rows.Count  + " and benfwcnt:" + benfwcnt+ " and t.Beneficiary_ID="+ t.Beneficiary_ID, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                        if (dt_link.Rows.Count > 0 && benfwcnt > 0)
                        {
                            CompanyInfo.InsertrequestLogTracker("Beneficiary limit wise linkedTransaction step 2 " + dt_link.Rows.Count + " and benfwcnt:" + benfwcnt, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            if (Benef_limit.Rows.Count != 0)
                            {
                                CompanyInfo.InsertrequestLogTracker("Beneficiary limit wise linkedTransaction step 3 " + dt_link.Rows.Count + " and benfwcnt:" + benfwcnt, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                int month = Convert.ToInt32(Benef_limit.Rows[0]["Days"]);
                                //int transaction_Hold = Convert.ToInt32(Benef_limit.Rows[0]["Transhold_flag"]);
                                int Sof_upload_Flag = Convert.ToInt32(Benef_limit.Rows[0]["Sof_flag"]);
                                double amount = Convert.ToDouble(Benef_limit.Rows[0]["Amount"]);
                                int chk_last_90days_benef = Convert.ToInt32(Benef_limit.Rows[0]["Chk_last_days_lmt_benef"]);
                                //DateTime regdate_benef = Convert.ToDateTime(Benef_limit.Rows[0]["Start_Date"]);
                                DateTime regdate = Convert.ToDateTime(Benef_limit.Rows[0]["Start_Date"]);
                                //DateTime dt_benef = regdate_benef.Date.AddDays(month);
                                DateTime dt11 = regdate.Date.AddDays(month);
                                DateTime ddt_poa = regdate.Date.AddDays(month);
                                double totalbeneftxn = 0.0;
                                DateTime today = DateTime.Today;
                                DateTime last_90_days_dt = today.AddDays(-month);

                                CompanyInfo.InsertrequestLogTracker("Beneficiary limit wise linkedTransaction step 3.1 Sof_upload_Flag" + Sof_upload_Flag  , 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                if (Sof_upload_Flag == 0)
                                {
                                    if (chk_last_90days_benef == 0)
                                    {
                                        CompanyInfo.InsertrequestLogTracker("Beneficiary limit wise linkedTransaction step 3.2 chk_last_90days_benef" + chk_last_90days_benef, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                        From_Date1 = last_90_days_dt.ToString("yyyy-MM-dd");
                                        To_Date1 = today.ToString("yyyy-MM-dd");
                                    }
                                    else
                                    {
                                        CompanyInfo.InsertrequestLogTracker("Beneficiary limit wise linkedTransaction step 3.3  : " , 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                        if (dateTime.Date > dt11.Date)
                                        {
                                            string newstartdate = ""; string newenddate = "";
                                            //Update Date to the Customer AML Limit
                                            for (DateTime dd = dt11; dd <= dateTime.AddDays(month); dd = dd.AddDays(month))
                                            {
                                                if (newstartdate == null || newstartdate == "")
                                                {
                                                    if (dd.AddDays(month) >= DateTime.Now)
                                                    {
                                                        newstartdate = dd.ToString();
                                                        From_Date = Convert.ToDateTime(newstartdate);
                                                        To_Date = dd.AddDays(month);

                                                        From_Date1 = From_Date.ToString("yyyy-MM-dd");
                                                        To_Date1 = To_Date.ToString("yyyy-MM-dd");

                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            From_Date = regdate;
                                            To_Date = dt11;

                                            From_Date1 = From_Date.ToString("yyyy-MM-dd");
                                            To_Date1 = To_Date.ToString("yyyy-MM-dd");
                                        }
                                    }
                                    Whereclause_beneflink = " date(aa.Record_Insert_DateTime) between " + From_Date1 + " and " + To_Date1 + "";

                                    if (hold_beneflink_mob_bankDetails == 0)
                                    {
                                        Whereclause_beneflink = Whereclause_beneflink + "  OR ((Beneficiary_Name like '%" + t.Beneficiary_Name + "' or Beneficiary_Name like '" + t.Beneficiary_Name + "%')" + phone + bank_details + ")";
                                    }
                                    else
                                    {
                                        Whereclause_beneflink = Whereclause_beneflink + " OR (Beneficiary_Name  like '%" + t.Beneficiary_Name.Trim() + "' or Beneficiary_Name  like '" + t.Beneficiary_Name.Trim() + "%')";
                                    }

                                    CompanyInfo.InsertrequestLogTracker("Beneficiary limit wise linkedTransaction step 3.4 Whereclause_beneflink: " + Whereclause_beneflink, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                    MySqlCommand _cmd1_benflink = new MySqlCommand("Benef_linkedtrans_total");
                                    _cmd1_benflink.CommandType = CommandType.StoredProcedure;
                                    _cmd1_benflink.Parameters.AddWithValue("_whereclause", Whereclause_beneflink);
                                    DataTable dt_beneflink = db_connection.ExecuteQueryDataTableProcedure(_cmd1_benflink);
                                    activitybeneflink = activitybeneflink.Replace("'", "");
                                    activitybeneflink = activitybeneflink + " Beneficiary linked transaction total :- " + Whereclause_beneflink + "Table COunt :- " + dt_beneflink.Rows.Count;

                                    if (dt_beneflink.Rows.Count > 0)
                                    {

                                        totalbeneftxn = Convert.ToDouble(dt_beneflink.Rows[0]["AmountInGBP_Benef"]) + Convert.ToDouble(t.AmountInGBP);
                                        activitybeneflink = activitybeneflink + "Amount in GBP for linked transaction beneficiary :- " + totalbeneftxn;
                                    }
                                    MySqlCommand cmd_id = new MySqlCommand("check_sof_count");
                                    cmd_id.CommandType = CommandType.StoredProcedure;
                                    cmd_id.Parameters.AddWithValue("_CustomerId", Customer_ID);
                                    cmd_id.Parameters.AddWithValue("_IdTypeId", "4");
                                    cmd_id.Parameters.AddWithValue("_RecordDate", Record_Insert_Date);
                                    DataTable dt_custId = db_connection.ExecuteQueryDataTableProcedure(cmd_id);
                                    int sof_count_link = Convert.ToInt32(dt_custId.Rows[0]["Sofup_count"]);

                                    if ((totalbeneftxn > amount) && (sof_count_link == 0))
                                    {
                                        flag = true;//Amount exceeded
                                        custlimit = 1;
                                        sof = 0;
                                        custlimitmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";
                                       
                                        SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                }
                                //CompanyInfo.InsertActivityLogDetails(activitybeneflink + " ", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "Send-InsertTransfer", t.CB_ID, t.Client_ID, "");
                            }
                        }

                        // }


                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Beneficiary limit wise linkedTransaction Teeparam Error"+ex.Message.Replace("\'", "\\'"), t.User_ID, "linked transaction beneficiary cl - Insert function  ", t.Branch_ID, t.Client_ID);
                    }



                    #endregion
                }

                #endregion

                #region Check All Ids Verification vyankatesh change 30-11-24
                //Check All Ids Verification //vyankatesh change 30-11-24
                int Check_All_Ids_Verify = 1;
                dr = dt.Select("PID=229");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        Check_All_Ids_Verify = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                if (Check_All_Ids_Verify == 0)
                {
                    try
                    {
                        MySqlCommand _cmd12 = new MySqlCommand("Transactiondetails_Search");
                        _cmd12.CommandType = CommandType.StoredProcedure;
                        _cmd12.Parameters.AddWithValue("_whereclause", " and aa.Customer_ID = " + Customer_ID);
                        _cmd12.Parameters.AddWithValue("_limit", " Limit 1");
                        DataTable trans_dt = db_connection.ExecuteQueryDataTableProcedure(_cmd12);

                        if (trans_dt.Rows.Count == 0)
                        {
                            string dateTimeString8 = dateTime.ToString("yyyy/MM/dd");
                            dateTimeString8 = dateTimeString8.Replace("-", "/");

                            _cmd = new MySqlCommand("Getlatest_Customer_DocIds");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_whereclause", " and dd.Customer_ID = '" + Customer_ID + "'");
                            DataTable dt_id1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                            int verifiedcnt = 0; int notverified = 0; string Senderids = "";
                            if (dt_id1 != null && dt_id1.Rows.Count > 0)
                            {
                                for (int i = 0; i < dt_id1.Rows.Count; i++)
                                {
                                    int verified = Convert.ToInt32(dt_id1.Rows[i]["Verfied"].ToString());
                                    Senderids = Senderids + "," + Convert.ToInt32(dt_id1.Rows[i]["SenderID_ID"].ToString());
                                    if (verified != 0)
                                    {
                                        notverified++;
                                    }
                                    else
                                    {
                                        verifiedcnt++;
                                    }
                                }
                            }

                            var activityts = "Custoner document Count " + dt_id1.Rows.Count + ", Verified Count : " + verifiedcnt + ", Unverified Count : " + notverified + ", Sender Ids :" + Senderids + ", Customer ID :" + Customer_ID;
                            CompanyInfo.InsertActivityLogDetails(activityts, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "CheckAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);

                            if (notverified != 0)
                            {
                                PrimaryIdmsg = "Thank you for uploading your documents. Your ID verification is under process.";

                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                            PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                            0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                            transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        var error_msg = " exception  " + ex.Message.ToString();
                        error_msg = error_msg.Replace("'", "");

                        string stattus = (string)CompanyInfo.InsertErrorLogDetails(error_msg.Replace("\'", "\\'"), t.User_ID, "App CheckAllLimits allidverification ", t.CB_ID, t.Client_ID);
                    }
                }

                #endregion

                //Check how many times limits exceeded and Restrict if count is exceeded
                int sendmoneypro = 1;
                dr = dt.Select("PID=44");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        sendmoneypro = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }

                if (sendmoneypro == 0)
                {
                    _cmd = new MySqlCommand("Get_DailySOFCount");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);

                    DataTable d2 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    _cmd.Dispose();
                    if (d2.Rows.Count > 0)
                    {
                        AllowProceedFlag = Convert.ToInt32(d2.Rows[0]["AllowProceed"]);
                        int Trans_Count = Convert.ToInt32(d2.Rows[0]["Trans_Count"]);
                        int ProceedCount_AftLimitExceed = Convert.ToInt32(d2.Rows[0]["ProceedCount_AftLimitExceed"]);
                        if (ProceedCount_AftLimitExceed > 0)
                        {
                            if (AllowProceedFlag > 0)
                            {
                                AllowProceedFlag_Msg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                        else if (ProceedCount_AftLimitExceed == 0 && Trans_Count != 0)
                        {
                            AllowProceedFlag = 1;
                            AllowProceedFlag_Msg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                      PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                      0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                      transfer_count_days, paywithwallet, PrimaryIdmsg);

                            return ds;
                        }
                    }
                }

                // Check monthly wise limit. if exceeds, ask for sof on permission.
                int asksof = 1;
                dr = dt.Select("PID=20");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        asksof = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                string msg = "Do you want to continue";
                if (asksof == 0)
                {
                    sof = 0;
                    msg = "Please provide us with more documents.";
                }
                //t.whereclause = "";
                //t.AmountInBase = Convert.ToDouble(dictObjMain["Amount"]);

                int chkmonthlimit = 1;
                dr = dt.Select("PID=23");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        chkmonthlimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                //Check Payment limit
                int paymenttypelimit = 0; string paymenttypelimitmsg = "";
                int chkpaymenttypelimit = 1;
                DataTable pd = new DataTable();
                dr = dt.Select("PID=27");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        chkpaymenttypelimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                if (chkpaymenttypelimit == 0 && t.checklimit_step == 0 )
                {
                    _cmd = new MySqlCommand("PaymentType_Limit");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    pd = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    if (pd.Rows.Count > 0  )
                    {
                        double paylimit = Convert.ToDouble(pd.Rows[0]["Max_Amount_Limit"]);
                        if (paylimit < t.AmountInGBP)
                        {

                            paymenttypelimit = 1;
                            paymenttypelimitmsg = "You can only send money upto: " + paylimit + " for selected payment type.";
                            #region createtoken
                            try
                            {
                                SendMoneyToken = ""; RewardToken = "";
                                sendhashexpire = Convert.ToDateTime("0001-01-01");
                            }
                            catch { }
                            #endregion createtoken
                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, paymenttypelimit,
                         paymenttypelimitmsg, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                            return ds;

                        }
                    }
                }

                int chkSOFlimit = 1;
                dr = dt.Select("PID=25");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        chkSOFlimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }

                if (chkSOFlimit == 0)//|| chkmonthlimit == 0
                {
                    _cmd = new MySqlCommand("chkCustSOF");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    d1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                }
                //DateTime startDate = new DateTime(2023, 1, 1);
                //DateTime currentDate = DateTime.Now;
                //DateTime endDate = startDate.AddDays(30);

                //while (currentDate > endDate)
                //{
                //    startDate = endDate;
                //    endDate = startDate.AddDays(30);
                //}

                //create token before Skip and proceed limits starts
                #region createtoken
                string stringtohash = "myMTSHashingStarts" + t.Beneficiary_ID + t.Customer_ID + Convert.ToDouble(t.GCCAmountInGBP) + t.AmountInPKR + t.Transfer_Fees +
                    t.Exchange_Rate + t.PaymentDepositType_ID + t.PaymentType_ID + t.DeliveryType_Id + "myMTSHashingEnds";
                string sendmoneyhash = CompanyInfo.GetHash(stringtohash);
                DateTime sendmoneyhashexpire = dateTime.AddMinutes(15);
                try
                {
                    SendMoneyToken = sendmoneyhash;
                    sendhashexpire = sendmoneyhashexpire;
                }
                catch { }

                #endregion
                SOFdocupload = "No";


                #region check limit payment wise
                try
                {

                    if (chkpaymenttypelimit == 0)
                    {

                        int Transfer_Monthly_limit_flag = Convert.ToInt32(pd.Rows[0]["Transfer_Monthly_limit_flag"]);
                        int Transfer_limit_flag = Convert.ToInt32(pd.Rows[0]["Transfer_limit_flag"]);
                        string PaymentTypeName = Convert.ToString(pd.Rows[0]["PType"]);
                        /** New Monthly Limit **/
                        #region Monthly limit
                        if (chkmonthlimit == 0 && Transfer_Monthly_limit_flag == 0)
                        {
                            _cmd = new MySqlCommand("Customer_MonthlyPTypewiseLimit");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                            DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                            if (d.Rows.Count != 0)
                            {
                                //check perms
                                dr = dt.Select("PID=118 or PID=119 or PID=120 or PID=126");//3months,6,12 and 1month permissions
                                int PID118 = 3, PID119 = 6, PID120 = 12, PID126 = 1;
                                if (dr.Count() > 0)
                                {
                                    foreach (DataRow drr in dr)
                                    {
                                        if (Convert.ToInt32(drr["PID"]) == 118) { PID118 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                        else if (Convert.ToInt32(drr["PID"]) == 119) { PID119 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                        else if (Convert.ToInt32(drr["PID"]) == 120) { PID120 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                        else if (Convert.ToInt32(drr["PID"]) == 126) { PID126 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                    }
                                }
                                for (int i = 0; i < d.Rows.Count; i++)
                                {
                                    int month = Convert.ToInt32(d.Rows[i]["Months_For_Limit"]);

                                    double amount = Convert.ToDouble(d.Rows[i]["Transaction_Limit"]);
                                    DateTime regdate = Convert.ToDateTime(d.Rows[i]["Start_Date"]);
                                    DateTime dt1 = regdate.Date.AddMonths(month);
                                    double totgbp = 0.0;
                                    DateTime From_Date = regdate; DateTime To_Date = dt1;
                                    int chk_last_month_lmt = Convert.ToInt32(d.Rows[i]["chk_last_month_lmt"]);
                                    string amount_fromstartdate = Convert.ToString(d.Rows[i]["Amount_FromStartDate"]);

                                    DateTime today = DateTime.Today;
                                    DateTime chk_last_month_lmtt = today.AddMonths(-month);
                                    if (chk_last_month_lmt == 0)
                                    {
                                        From_Date = chk_last_month_lmtt;
                                        To_Date = today;
                                    }
                                    else
                                    {


                                        if (dateTime.Date > dt1.Date)
                                        {
                                            string newstartdate = ""; string newenddate = "";
                                            //Update Date to the Customer Transfer Limit
                                            for (DateTime dd = dt1; dd <= dateTime.AddMonths(month); dd = dd.AddMonths(month))
                                            {
                                                if (newstartdate == null || newstartdate == "")
                                                {
                                                    if (dd.AddMonths(month) >= dateTime)//DateTime.Now)
                                                    {
                                                        newstartdate = dd.ToString(); //newenddate = Convert.ToString(dd.AddMonths(month));   
                                                        From_Date = Convert.ToDateTime(newstartdate);
                                                        To_Date = dd.AddMonths(month);
                                                        string Transfer_ID = Convert.ToString(d.Rows[i]["PType_Cust_Monthlimit_ID"]);// Primary ID of customer transfer limit
                                                        _cmd = new MySqlCommand("Update_PaymentwiseMonthlyLimit");
                                                        _cmd.CommandType = CommandType.StoredProcedure;
                                                        _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd HH:mm:ss"));
                                                        _cmd.Parameters.AddWithValue("_Transfer_ID", Transfer_ID);
                                                        _cmd.Parameters.AddWithValue("_Amount", 0);
                                                        _cmd.Parameters.AddWithValue("_Queryflag", 1);
                                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                        _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                                                        amount_fromstartdate = "0";
                                                        string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (month == 3 && PID118 == 0 || month == 6 && PID119 == 0 || month == 12 && PID120 == 0 || month == 1 && PID126 == 0)
                                    {
                                        if (amount_fromstartdate == null || amount_fromstartdate == "" || amount_fromstartdate == "0")
                                        {
                                            _cmd = new MySqlCommand("Transaction_againstPType");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Parameters.AddWithValue("_From_Date", From_Date);
                                            _cmd.Parameters.AddWithValue("_To_Date", To_Date);
                                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                            _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                            _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                                            DataTable dt2 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                            if (dt2.Rows.Count > 0)
                                            {
                                                if (dt2.Rows[0]["AmountInGBP"] != null && Convert.ToString(dt2.Rows[0]["AmountInGBP"]) != "")
                                                {
                                                    totgbp += Convert.ToDouble(dt2.Rows[0]["AmountInGBP"].ToString());
                                                }
                                            }
                                            _cmd = new MySqlCommand("Update_PaymentwiseMonthlyLimit");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd HH:mm:ss"));
                                            _cmd.Parameters.AddWithValue("_Transfer_ID", Convert.ToString(d.Rows[i]["PType_Cust_Monthlimit_ID"]));// Primary ID of customer transfer limit
                                            _cmd.Parameters.AddWithValue("_Amount", totgbp);
                                            _cmd.Parameters.AddWithValue("_Queryflag", 2);
                                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                            _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                                            string success1 = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                        }
                                        else
                                        {
                                            string ss = Convert.ToString(d.Rows[i]["Amount_FromStartDate"]) ?? "0";//Convert.ToString(d.Rows[0]["Amount_FromStartDate"].ToString() == "" ? d.Rows[0]["Amount_FromStartDate"].ToString(): "0");
                                            totgbp = Convert.ToDouble(ss);
                                        }

                                        double totgbpvalue = 0.0;
                                        totgbpvalue = totgbp + t.AmountInGBP;

                                        if (totgbpvalue > Convert.ToDouble(amount))
                                        {
                                            string notification_icon = "monthly-limit-exceeded.jpg";
                                            string notification_message = "<span class='cls-admin'>Roll Over " + month + " month limit<strong class='cls-cancel'> exceeded  for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                            exceedAmt = totgbpvalue - Convert.ToDouble(amount);

                                            if (Convert.ToString(d.Rows[i]["Set_complaince_alert"]) == "0" || Convert.ToString(d.Rows[i]["Set_complaince_alert"]) == "")
                                            {
                                                monlimit = 1;//complaince alert
                                                monthlylimitmsg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                                #region createtoken
                                                try
                                                {
                                                    SendMoneyToken = ""; RewardToken = "";
                                                    sendhashexpire = Convert.ToDateTime("0001-01-01");
                                                }
                                                catch { }
                                                #endregion createtoken
                                            }
                                            else
                                            {
                                                if (uploadSOF != 2)
                                                {
                                                    uploadSOF = 0;
                                                    monlimit = 2;//sof alert
                                                    monthlylimitmsg = "Your roll over " + month + " month limit is exceeded  for " + PaymentTypeName + ". " + msg + "";
                                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                }
                                            }
                                            //"Amount Limit: " + amount + " " + basecurrency + ". Total transaction amount in " + month + " months from your registration is " + totgbpvalue + " " + basecurrency + ". " + msg + "";

                                            if (t.checklimit_step == 0 || monlimit == 1)
                                            {
                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                          PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                          0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                          transfer_count_days, paywithwallet, PrimaryIdmsg);
                                                break;
                                            }

                                            //return ds;
                                        }//end if amount exceeded
                                    }
                                }//end for loop
                                if (monlimit > 0)
                                {
                                    return ds;
                                }
                            }
                        }
                        #endregion Monthly limit


                        //Skip and proceed starts Check Source of funds limit
                        d1 = null;
                        if (chkSOFlimit == 0 && Transfer_limit_flag == 0)//|| chkmonthlimit == 0
                        {
                            _cmd = new MySqlCommand("chkCustSOFPaymentwise");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                            d1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);


                            #region sof
                            if (d1.Rows.Count != 0)
                            {
                                double pil = Convert.ToInt32(d1.Rows[0]["PrimaryID_Limit"]);
                                double sil = Convert.ToInt32(d1.Rows[0]["SecondaryID_Limit"]);
                                double amount = Convert.ToDouble(d1.Rows[0]["SourceOfFunds_Limit"]);
                                DateTime regdate = Convert.ToDateTime(d1.Rows[0]["Start_Date"]);
                                int month = Convert.ToInt32(d1.Rows[0]["Validation_Days"]);
                                int txncount = Convert.ToInt32(d1.Rows[0]["Transfer_Count"]);
                                int chk_last_days_lmt = Convert.ToInt32(d1.Rows[0]["chk_last_days_lmt"]);
                                double AskforSOFAmount_Limit = 0;
                                if (d1.Rows[0]["AskforSOFAmount_Limit"] != null && d1.Rows[0]["AskforSOFAmount_Limit"] != "")
                                    AskforSOFAmount_Limit = Convert.ToDouble(d1.Rows[0]["AskforSOFAmount_Limit"]);
                                DateTime dt11 = regdate.Date.AddDays(month);//AddMonths
                                double totgbp = 0.0;

                                string notification_icon = "", notification_message = "";
                                DateTime From_Date = regdate; DateTime To_Date = dt11;
                                DateTime ddt_poa = regdate.Date.AddDays(month);
                                DateTime today = DateTime.Today;
                                DateTime last_validation_days_dt = today.AddDays(-month);
                                if (chk_last_days_lmt == 0)
                                {
                                    From_Date = last_validation_days_dt;
                                    To_Date = today;
                                }
                                else
                                {
                                    if (dateTime.Date > dt11.Date)
                                    {
                                        string newstartdate = ""; string newenddate = "";
                                        //Update Date to the Customer Transfer Limit
                                        for (DateTime dd = dt11; dd <= dateTime.AddDays(month); dd = dd.AddDays(month))
                                        {
                                            if (newstartdate == null || newstartdate == "")
                                            {
                                                if (dd.AddDays(month) >= dateTime)//DateTime.Now)
                                                {
                                                    newstartdate = dd.ToString(); //newenddate = Convert.ToString(dd.AddMonths(month));   
                                                    From_Date = Convert.ToDateTime(newstartdate);
                                                    To_Date = dd.AddDays(month);
                                                    string Transfer_ID = Convert.ToString(d1.Rows[0]["PType_Cust_Transferlimit_ID"]);// Primary ID of customer transfer limit
                                                    _cmd = new MySqlCommand("Update_paymentwiseAMLLimit");
                                                    _cmd.CommandType = CommandType.StoredProcedure;
                                                    _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd HH:mm:ss"));
                                                    _cmd.Parameters.AddWithValue("_Transfer_ID", Transfer_ID);
                                                    string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                                }
                                            }
                                        }
                                    }

                                }
                                _cmd = new MySqlCommand("Transaction_againstPType");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_From_Date", From_Date);
                                _cmd.Parameters.AddWithValue("_To_Date", To_Date);
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                if (dtt.Rows.Count > 0)
                                {
                                    if (dtt.Rows[0]["Transaction_Count"] != null && Convert.ToString(dtt.Rows[0]["Transaction_Count"]) != "")
                                    {
                                        int custTransaction_Count = Convert.ToInt32(dtt.Rows[0]["Transaction_Count"]);
                                        if (custTransaction_Count >= txncount)
                                        {
                                            SOFDaysCount = 1;
                                            SOFDaysCount_Msg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                            #region createtoken
                                            try
                                            {
                                                SendMoneyToken = ""; RewardToken = "";
                                                sendhashexpire = Convert.ToDateTime("0001-01-01");
                                            }
                                            catch { }
                                            #endregion createtoken
                                            //notification_icon = "tranfer-limit-exceeded.jpg";
                                            //notification_message = "<span class='cls-admin'>" + month + " days transfer count <strong class='cls-cancel'>reached.</strong></span><span class='cls-customer'></span>";
                                            //CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToInt32(t.Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0,_srvTransactionContext);
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;
                                        }
                                        if (custTransaction_Count == txncount)
                                        {
                                            transfer_count_days = month;
                                        }
                                    }
                                    if (dtt.Rows[0]["AmountInGBP"] != null && Convert.ToString(dtt.Rows[0]["AmountInGBP"]) != "")
                                    {
                                        totgbp += Convert.ToDouble(dtt.Rows[0]["AmountInGBP"].ToString());
                                    }
                                }
                                double totgbpvalue = 0.0;//double totgbpvalue = t.AmountInBase; //
                                totgbpvalue = totgbp + t.AmountInGBP;

                                DateTime dt1 = dateTime.Date;// DateTime.Now.Date;


                                if (totgbpvalue > pil)
                                {
                                    //For Primary
                                    _cmd = new MySqlCommand("CheckIDExpiry");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                    _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    DataTable table = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                    //DateTime dt3 = DateTime.Now.Date.AddDays(60);
                                    if (table.Rows.Count > 0)// Check 1
                                    {
                                        for (int i = 0; i < table.Rows.Count; i++)
                                        {
                                            string senPExpDate = Convert.ToString(table.Rows[i]["SenderID_ExpiryDate"]);
                                            if (senPExpDate != "" && senPExpDate != null && senPExpDate != "VGrYRT2Em7s=")
                                            {
                                                DateTime dt2 = DateTime.ParseExact(Convert.ToDateTime(senPExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                if (dt1 > dt2)
                                                {
                                                    notification_icon = "id-threshold.jpg";
                                                    notification_message = "<span class='cls-admin'>ID threshold <strong>primary</strong> limit<strong class='cls-cancel'> exceeded  for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                    try
                                                    {
                                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                        if (db.Rows.Count > 0)
                                                        {
                                                        }
                                                        else
                                                        {
                                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                        }
                                                    }
                                                    catch
                                                    {

                                                    }

                                                    amlmsg = "Identification document is expired and need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                    #region createtoken
                                                    try
                                                    {
                                                        SendMoneyToken = ""; RewardToken = "";
                                                        sendhashexpire = Convert.ToDateTime("0001-01-01");
                                                    }
                                                    catch { }
                                                    #endregion createtoken
                                                    amllimit = 1; ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                              PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                              0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                              transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                    return ds;
                                                }
                                                else
                                                {
                                                    CompanyInfo.InsertrequestLogTracker("ST1 CheckIDExpiry Step  _Customer_ID:" + Customer_ID+ " & totgbpvalue:"+ totgbpvalue+ " & sil:"+ sil, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                    if (totgbpvalue > sil)// Check 2
                                                    {
                                                        //For Address proof
                                                        _cmd = new MySqlCommand("CheckIDExpiry");
                                                        _cmd.CommandType = CommandType.StoredProcedure;
                                                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                        _cmd.Parameters.AddWithValue("_IDType_ID", 2);
                                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                        DataTable tbl = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                        CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 4 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                        if (tbl.Rows.Count > 0)
                                                        {
                                                            string recDate = Convert.ToString(tbl.Rows[0]["Record_Insert_DateTime"]);
                                                            DateTime indt = DateTime.ParseExact(Convert.ToDateTime(recDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                            DateTime fifth = To_Date;// indt.Date.AddMonths(ExpiryMonths);//AddDays(150);
                                                            DateTime expDat = To_Date;
                                                            string exp = Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"]);
                                                            if (exp != null && exp != "")
                                                                expDat = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                            DateTime recDate_validity = Convert.ToDateTime(indt.AddYears(Validity_POA));
                                                            CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 5 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                            if ((dt1 > ddt_poa) || (expDat < dt1 && exp != null && exp != ""))//(indt > fifth)280823//(indt <= dt1 && dt1 >= fifth)
                                                            {
                                                                CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 6 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                                //if ((expDat > dt1) && ((exp != null && exp != "") || recDate_validity > indt) && Convert.ToInt32(chk_sec_validity) == 0)
                                                                if(recDate_validity > indt && Convert.ToInt32(chk_sec_validity) == 0)
                                                                {
                                                                    CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 7 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                                    check_sec_limit = 0;
                                                                    amllimit = 10;
                                                                }
                                                                else if ((expDat < dt1) || recDate_validity < indt)
                                                                {
                                                                    //vyankatesh change 
                                                                    if (perm_primaryid_as_POA == 0 && table.Rows.Count > 0)//perm for primary id as proof of address  //vyankatesh 28-10-24
                                                                    {
                                                                        POA_activity += "1952 : ";
                                                                        string ExpDate = Convert.ToString(table.Rows[0]["SenderID_ExpiryDate"]);
                                                                        if (ExpDate != "" && ExpDate != null && ExpDate != "VGrYRT2Em7s=")
                                                                        {
                                                                            DateTime dtexp = DateTime.ParseExact(Convert.ToDateTime(ExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                                            if (dt1 < dtexp) //check expire
                                                                            {
                                                                                if (Convert.ToInt32(table.Rows[0]["Gbg_Addressmatch_Flag"]) == 1)
                                                                                {
                                                                                    string InsDate = Convert.ToString(table.Rows[0]["Record_Insert_DateTime"]);
                                                                                    DateTime InsertDate = DateTime.ParseExact(Convert.ToDateTime(InsDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                                                    DateTime two_year_exp_date = InsertDate.AddYears(2); //document valid for 2 year from record insert date
                                                                                    if (dt1 > two_year_exp_date) //document valid for 2 year from record insert date
                                                                                    {
                                                                                        amlmsg = "ID3 Global AML Check Primary Id As Proof of Address of selected customer " + Convert.ToString(table.Rows[0]["First_Name"]) + " is expired.";
                                                                                        amllimit = 2;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        var activitys = "ID3 Global AML Check Address is Mactched of Primary Id and this document id is consider as Proof of Address is valid Document ID : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                                        CompanyInfo.InsertActivityLogDetails(activitys, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "checkAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    amllimit = 2;
                                                                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                                    POA_activity += "1977 : " + dtexp + ", Sender ID :" + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                amllimit = 2;
                                                                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                                POA_activity += "1984 : " + dtexp + ", Sender ID :" + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            amllimit = 2;
                                                                            amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                            POA_activity += "1991 :  Sender ID : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        amllimit = 2;
                                                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                        POA_activity += " 2000 :  id count : " + table.Rows.Count + " , perm_primaryid_as_POA " + perm_primaryid_as_POA;
                                                                    }
                                                                    if (amllimit == 2)
                                                                    {
                                                                        notification_icon = "id-threshold.jpg";
                                                                        notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded  for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                                        try
                                                                        {
                                                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                            cmd1.CommandType = CommandType.StoredProcedure;
                                                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                            if (db.Rows.Count > 0)
                                                                            {
                                                                            }
                                                                            else
                                                                            {
                                                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                            }
                                                                        }
                                                                        catch
                                                                        {

                                                                        }
                                                                        amllimit = 2;
                                                                        sof = 0;
                                                                        //amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                        SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                        return ds;
                                                                    }
                                                                }
                                                            }
                                                            else if (totgbpvalue > amount)// Check 3 SOF
                                                            {
                                                                //For SOF
                                                                _cmd = new MySqlCommand("CheckIDExpiry");
                                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                                _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                                                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                                DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                                if (tbls.Rows.Count > 0)
                                                                {
                                                                    string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                                                    DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                                    DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                                                    if (exp1 != null && exp1 != "")
                                                                        expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                                    if ( ((indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "")) && (uploadSOF != 2)) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                                                    {
                                                                        amllimit = 4;
                                                                        amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + "  for " + PaymentTypeName + ". " + msg + "";
                                                                        PrimaryID_Limit = pil;
                                                                        SecondaryID_Limit = sil;
                                                                        SourceOfFunds_Limit = amount;

                                                                        notification_icon = "id-threshold.jpg";
                                                                        notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded  for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                                        try
                                                                        {
                                                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                            cmd1.CommandType = CommandType.StoredProcedure;
                                                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                            if (db.Rows.Count > 0)
                                                                            {
                                                                            }
                                                                            else
                                                                            {
                                                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                            }
                                                                        }
                                                                        catch
                                                                        {

                                                                        }
                                                                        SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                        return ds;
                                                                    }
                                                                    else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                                                    {
                                                                        _cmd = new MySqlCommand("Check_IfSOFExcdForPType");
                                                                        _cmd.CommandType = CommandType.StoredProcedure;
                                                                        _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = '" + t.FromCurrency_Code + "' and t.PType_ID = " + t.PaymentType_ID + "");
                                                                        DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                                        int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                                                        if (tb.Rows.Count > 0)
                                                                        {
                                                                            isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                                                            SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                                                        }
                                                                        if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                                                        {
                                                                            amllimit = 4;
                                                                            amlmsg = "Source of fund amount limit is reached  for " + PaymentTypeName + ". " + msg + "";
                                                                            PrimaryID_Limit = pil;
                                                                            SecondaryID_Limit = sil;
                                                                            SourceOfFunds_Limit = amount;
                                                                            notification_icon = "id-threshold.jpg";
                                                                            notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded  for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                                            try
                                                                            {
                                                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                                if (db.Rows.Count > 0)
                                                                                {
                                                                                }
                                                                                else
                                                                                {
                                                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                                }
                                                                            }
                                                                            catch
                                                                            {

                                                                            }
                                                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                            return ds;
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    notification_icon = "id-threshold.jpg";
                                                                    notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                                    try
                                                                    {
                                                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                        if (db.Rows.Count > 0)
                                                                        {
                                                                        }
                                                                        else
                                                                        {
                                                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                        }
                                                                    }
                                                                    catch
                                                                    {

                                                                    }
                                                                    amllimit = 4;
                                                                    amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                    return ds;
                                                                }
                                                            }
                                                        }
                                                        else if (perm_primaryid_as_POA == 0 && table.Rows.Count > 0) //vyankatesh change
                                                        {
                                                            string ExpDate = Convert.ToString(table.Rows[0]["SenderID_ExpiryDate"]);
                                                            if (ExpDate != "" && ExpDate != null && ExpDate != "VGrYRT2Em7s=")
                                                            {
                                                                DateTime dtexp = DateTime.ParseExact(Convert.ToDateTime(ExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                                if (dt1 < dtexp) //check expire
                                                                {
                                                                    if (Convert.ToInt32(table.Rows[0]["Gbg_Addressmatch_Flag"]) == 1)
                                                                    {
                                                                        string InsDate = Convert.ToString(table.Rows[0]["Record_Insert_DateTime"]);
                                                                        DateTime InsertDate = DateTime.ParseExact(Convert.ToDateTime(InsDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                                        DateTime two_year_exp_date = InsertDate.AddYears(2); //document valid for 2 year from record insert date
                                                                        if (dt1 > two_year_exp_date) //document valid for 2 year from record insert date
                                                                        {
                                                                            amllimit = 2;
                                                                            amlmsg = "ID3 Global AML Check Primary Id As Proof of Address of selected customer " + Convert.ToString(table.Rows[0]["First_Name"]) + " is expired.";
                                                                        }
                                                                        else
                                                                        {
                                                                            var activitys = "ID3 Global AML Check Address is Mactched of Primary Id and this document id is consider as Proof of Address is valid Document ID : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                            CompanyInfo.InsertActivityLogDetails(activitys, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "checkAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        amllimit = 2;
                                                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                        POA_activity += " 2216 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    amllimit = 2;
                                                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                    POA_activity += " 2223 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                amllimit = 2;
                                                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                POA_activity += " 2232 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                            }
                                                            if (amllimit == 2)
                                                            {

                                                                notification_icon = "id-threshold.jpg";
                                                                notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                                try
                                                                {
                                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                    if (db.Rows.Count > 0)
                                                                    {
                                                                    }
                                                                    else
                                                                    {
                                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                                    }
                                                                }
                                                                catch
                                                                {

                                                                }
                                                                amllimit = 2;
                                                                sof = 0;
                                                                //amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                return ds;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            notification_icon = "id-threshold.jpg";
                                                            notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                            try
                                                            {
                                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                if (db.Rows.Count > 0)
                                                                {
                                                                }
                                                                else
                                                                {
                                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                                }
                                                            }
                                                            catch
                                                            {

                                                            }
                                                            amllimit = 2;
                                                            sof = 0;
                                                            amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                            POA_activity += " 2306";
                                                            return ds;
                                                        }
                                                    }
                                                    else if (totgbpvalue > amount)// Check 3 SOF
                                                    {
                                                        //For SOF
                                                        _cmd = new MySqlCommand("CheckIDExpiry");
                                                        _cmd.CommandType = CommandType.StoredProcedure;
                                                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                        _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                        DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                        if (tbls.Rows.Count > 0)
                                                        {
                                                            string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                                            DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                            DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                                            if (exp1 != null && exp1 != "")
                                                                expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                            if ( ( (indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "") )  && (uploadSOF != 2)) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                                            {
                                                                amllimit = 4;
                                                                amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + " for " + PaymentTypeName + ". " + msg + "";
                                                                PrimaryID_Limit = pil;
                                                                SecondaryID_Limit = sil;
                                                                SourceOfFunds_Limit = amount;
                                                                notification_icon = "id-threshold.jpg";
                                                                notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                                try
                                                                {
                                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                    if (db.Rows.Count > 0)
                                                                    {
                                                                    }
                                                                    else
                                                                    {
                                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                                    }
                                                                }
                                                                catch
                                                                {

                                                                }
                                                                SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                return ds;
                                                            }
                                                            else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                                            {
                                                                _cmd = new MySqlCommand("Check_IfSOFExcdForPType");
                                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                                _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = '" + t.FromCurrency_Code + "' and t.PType_ID = " + t.PaymentType_ID + "");
                                                                DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                                int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                                                if (tb.Rows.Count > 0)
                                                                {
                                                                    isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                                                    SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                                                }
                                                                if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                                                {
                                                                    amllimit = 4;
                                                                    amlmsg = "Source of fund amount limit is reached. " + msg + "";
                                                                    PrimaryID_Limit = pil;
                                                                    SecondaryID_Limit = sil;
                                                                    SourceOfFunds_Limit = amount;
                                                                    notification_icon = "id-threshold.jpg";
                                                                    notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                                    try
                                                                    {
                                                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                        if (db.Rows.Count > 0)
                                                                        {
                                                                        }
                                                                        else
                                                                        {
                                                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                                        }
                                                                    }
                                                                    catch
                                                                    {

                                                                    }
                                                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                    return ds;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            notification_icon = "id-threshold.jpg";
                                                            notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                            try
                                                            {
                                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                if (db.Rows.Count > 0)
                                                                {
                                                                }
                                                                else
                                                                {
                                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                                }
                                                            }
                                                            catch
                                                            {

                                                            }
                                                            amllimit = 4;
                                                            amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                            return ds;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        notification_icon = "id-threshold.jpg";
                                        notification_message = "<span class='cls-admin'>ID threshold <strong>primary</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                        try
                                        {
                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                            if (db.Rows.Count > 0)
                                            {
                                            }
                                            else
                                            {
                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                            }
                                        }
                                        catch
                                        {

                                        }

                                        amlmsg = "Identification document need to be uploaded to proceed this transfer. Do you want to Upload?";
                                        amllimit = 1;
                                        #region createtoken
                                        try
                                        {
                                            SendMoneyToken = ""; RewardToken = "";
                                            sendhashexpire = Convert.ToDateTime("0001-01-01");
                                        }
                                        catch { }
                                        #endregion createtoken
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                  PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                  0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                  transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                }
                                else if (totgbpvalue > sil)// Check 2
                                {
                                    //For Address proof
                                    _cmd = new MySqlCommand("CheckIDExpiry");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                    _cmd.Parameters.AddWithValue("_IDType_ID", 2);
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    DataTable tbl = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                    if (tbl.Rows.Count > 0)
                                    {
                                        string recDate = Convert.ToString(tbl.Rows[0]["Record_Insert_DateTime"]);
                                        DateTime indt = DateTime.ParseExact(Convert.ToDateTime(recDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                        DateTime fifth = To_Date;// indt.Date.AddMonths(ExpiryMonths);//AddDays(150);
                                        DateTime expDat = To_Date; string exp = Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"]);
                                        if (exp != null && exp != "")
                                            expDat = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                        DateTime recDate_validity = Convert.ToDateTime(indt.AddYears(Validity_POA));
                                        CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 8 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                        if ((dt1 > ddt_poa) || (expDat < dt1 && exp != null && exp != ""))//(indt > fifth)280823//(indt <= dt1 && dt1 >= fifth)
                                        {
                                            CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 9 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                            //if ((expDat > dt1) && ((exp != null && exp != "") || recDate_validity > indt) && Convert.ToInt32(chk_sec_validity) == 0)
                                            if (recDate_validity > indt && Convert.ToInt32(chk_sec_validity) == 0)
                                            {
                                                CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step 10 _Customer_ID:" + Customer_ID + " and tbl.Rows.Count:" + tbl.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                check_sec_limit = 0;
                                                amllimit = 10;
                                            }
                                            else if ((expDat < dt1) || recDate_validity < indt)
                                            {
                                                //vyankatesh change 
                                                if (perm_primaryid_as_POA == 0)//perm for primary id as proof of address  //vyankatesh 28-10-24
                                                {
                                                    //For Primary
                                                    _cmd = new MySqlCommand("CheckIDExpiry");
                                                    _cmd.CommandType = CommandType.StoredProcedure;
                                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                    _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                    DataTable tabpid = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                                    if (tabpid.Rows.Count > 0)
                                                    {
                                                        string ExpDate = Convert.ToString(tabpid.Rows[0]["SenderID_ExpiryDate"]);
                                                        if (ExpDate != "" && ExpDate != null && ExpDate != "VGrYRT2Em7s=")
                                                        {
                                                            DateTime dtexp = DateTime.ParseExact(Convert.ToDateTime(ExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                            if (dt1 < dtexp) //check expire
                                                            {
                                                                if (Convert.ToInt32(tabpid.Rows[0]["Gbg_Addressmatch_Flag"]) == 1)
                                                                {
                                                                    string InsDate = Convert.ToString(tabpid.Rows[0]["Record_Insert_DateTime"]);
                                                                    DateTime InsertDate = DateTime.ParseExact(Convert.ToDateTime(InsDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                                    DateTime two_year_exp_date = InsertDate.AddYears(2); //document valid for 2 year from record insert date
                                                                    if (dt1 > two_year_exp_date) //document valid for 2 year from record insert date
                                                                    {
                                                                        amlmsg = "ID3 Global AML Check Primary Id As Proof of Address of selected customer " + Convert.ToString(tabpid.Rows[0]["First_Name"]) + " is expired.";
                                                                        amllimit = 2;
                                                                    }
                                                                    else
                                                                    {
                                                                        var activitys = "ID3 Global AML Check Address is Mactched of Primary Id and this document id is consider as Proof of Address is valid Document ID : " + Convert.ToString(tabpid.Rows[0]["SenderID_ID"]);
                                                                        CompanyInfo.InsertActivityLogDetails(activitys, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "checkAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    amllimit = 2;
                                                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                    POA_activity += " 2568 :  Sender Id : " + Convert.ToString(tabpid.Rows[0]["SenderID_ID"]);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                amllimit = 2;
                                                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                POA_activity += " 2575 :  Sender Id : " + Convert.ToString(tabpid.Rows[0]["SenderID_ID"]);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            amllimit = 2;
                                                            amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        amllimit = 2;
                                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                        POA_activity += " 2588";
                                                    }
                                                }
                                                else
                                                {
                                                    amllimit = 2;
                                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                    POA_activity += " 2595";
                                                }
                                                if (amllimit == 2)
                                                {
                                                    notification_icon = "id-threshold.jpg";
                                                    notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                    try
                                                    {
                                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                        if (db.Rows.Count > 0)
                                                        {
                                                        }
                                                        else
                                                        {
                                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                        }
                                                    }
                                                    catch
                                                    {

                                                    }
                                                    amllimit = 2;
                                                    sof = 0;
                                                    //amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                          PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                          0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                          transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                    return ds;
                                                }
                                            }
                                        }
                                    }
                                    else if (perm_primaryid_as_POA == 0) //vyankatesh change
                                    {

                                        //For Primary
                                        _cmd = new MySqlCommand("CheckIDExpiry");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                        _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        DataTable tabpid = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                        if (tabpid.Rows.Count > 0)
                                        {
                                            string ExpDate = Convert.ToString(tabpid.Rows[0]["SenderID_ExpiryDate"]);
                                            if (ExpDate != "" && ExpDate != null && ExpDate != "VGrYRT2Em7s=")
                                            {
                                                DateTime dtexp = DateTime.ParseExact(Convert.ToDateTime(ExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                if (dt1 < dtexp) //check expire
                                                {
                                                    if (Convert.ToInt32(tabpid.Rows[0]["Gbg_Addressmatch_Flag"]) == 1)
                                                    {
                                                        string InsDate = Convert.ToString(tabpid.Rows[0]["Record_Insert_DateTime"]);
                                                        DateTime InsertDate = DateTime.ParseExact(Convert.ToDateTime(InsDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                        DateTime two_year_exp_date = InsertDate.AddYears(2); //document valid for 2 year from record insert date
                                                        if (dt1 > two_year_exp_date) //document valid for 2 year from record insert date
                                                        {
                                                            amllimit = 2;
                                                            amlmsg = "ID3 Global AML Check Primary Id As Proof of Address of selected customer " + Convert.ToString(tabpid.Rows[0]["First_Name"]) + " is expired.";
                                                        }
                                                        else
                                                        {
                                                            var activitys = "ID3 Global AML Check Address is Mactched of Primary Id and this document id is consider as Proof of Address is valid Document ID : " + Convert.ToString(tabpid.Rows[0]["SenderID_ID"]);
                                                            CompanyInfo.InsertActivityLogDetails(activitys, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "checkAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        amllimit = 2;
                                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                        POA_activity += " 2675 :  Sender Id : " + Convert.ToString(tabpid.Rows[0]["SenderID_ID"]);
                                                    }
                                                }
                                                else
                                                {
                                                    amllimit = 2;
                                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                    POA_activity += " 2682 :  Sender Id : " + Convert.ToString(tabpid.Rows[0]["SenderID_ID"]);
                                                }
                                            }
                                            else
                                            {
                                                amllimit = 2;
                                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                POA_activity += " 2689 :  Sender Id : " + Convert.ToString(tabpid.Rows[0]["SenderID_ID"]);
                                            }
                                        }
                                        else
                                        {
                                            amllimit = 2;
                                            amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                            POA_activity += " 2696 ";
                                        }
                                        if (amllimit == 2)
                                        {
                                            notification_icon = "id-threshold.jpg";
                                            notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                            try
                                            {
                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                if (db.Rows.Count > 0)
                                                {
                                                }
                                                else
                                                {
                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                }
                                            }
                                            catch
                                            {

                                            }
                                            amllimit = 2;
                                            sof = 0;
                                            //amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;
                                        }
                                    }
                                    else
                                    {
                                        notification_icon = "id-threshold.jpg";
                                        notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                        try
                                        {
                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                            if (db.Rows.Count > 0)
                                            {
                                            }
                                            else
                                            {
                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                            }
                                        }
                                        catch
                                        {

                                        }
                                        amllimit = 2;
                                        sof = 0;
                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                        POA_activity += " 2763 ";
                                        SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                }
                                else if (totgbpvalue > amount) // Check 3 SOF
                                {
                                    //For SOF
                                    _cmd = new MySqlCommand("CheckIDExpiry");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                    _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                    if (tbls.Rows.Count > 0)
                                    {
                                        string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                        DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                        DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                        if (exp1 != null && exp1 != "")
                                            expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                        if ( ((indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "")) && (uploadSOF != 2)) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                        {
                                            amllimit = 1;
                                            amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + " for " + PaymentTypeName + ". " + msg + "";
                                            PrimaryID_Limit = pil;
                                            SecondaryID_Limit = sil;
                                            SourceOfFunds_Limit = amount;

                                            notification_icon = "id-threshold.jpg";
                                            notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                            try
                                            {
                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                if (db.Rows.Count > 0)
                                                {
                                                }
                                                else
                                                {
                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                }
                                            }
                                            catch
                                            {

                                            }
                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;
                                        }
                                        else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                        {
                                            _cmd = new MySqlCommand("Check_IfSOFExcdForPType");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = '" + t.FromCurrency_Code + "' and t.PType_ID = " + t.PaymentType_ID + "");

                                            DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                            int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                            if (tb.Rows.Count > 0)
                                            {
                                                isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                                SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                            }
                                            if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                            {
                                                amllimit = 1;
                                                amlmsg = "Source of fund limit is reached. " + msg + "";
                                                PrimaryID_Limit = pil;
                                                SecondaryID_Limit = sil;
                                                SourceOfFunds_Limit = amount;
                                                notification_icon = "id-threshold.jpg";
                                                notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                                try
                                                {
                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                    if (db.Rows.Count > 0)
                                                    {
                                                    }
                                                    else
                                                    {
                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                    }
                                                }
                                                catch
                                                {

                                                }
                                                SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                return ds;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        amllimit = 4;
                                        amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";

                                        notification_icon = "id-threshold.jpg";
                                        notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                        try
                                        {
                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                            if (db.Rows.Count > 0)
                                            {
                                            }
                                            else
                                            {
                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                            }
                                        }
                                        catch
                                        {

                                        }
                                        SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                }
                            }
                            #endregion sof
                        }

                        total = 0;
                        total_benf = 0;
                        total_cust = 0;
                        total_benf_year = 0;

                        //Check Daily Transfer Count perm
                        chkdailycount = 1;
                        dr = dt.Select("PID=59");
                        if (dr.Count() > 0)
                        {
                            foreach (DataRow drr in dr)
                            {
                                chkdailycount = Convert.ToInt32(drr["Status_ForCustomer"]);
                            }
                        }
                        //Check daily limit perm
                        chkdailylimit = 1;
                        dr = dt.Select("PID=26");
                        if (dr.Count() > 0)
                        {
                            foreach (DataRow drr in dr)
                            {
                                chkdailylimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                            }
                        }
                        dds = null;
                        if ((chkdailylimit == 0 || chkdailycount == 0) && Transfer_limit_flag == 0)
                        {
                            _cmd = new MySqlCommand("chkCustSOFPaymentwise"); //customer_transferamount_minmax
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                            dds = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        }
                        //Check Daily Transfer Count
                        if (chkdailycount == 0 && Transfer_limit_flag == 0)
                        {
                            if (dds.Rows.Count > 0)
                            {
                                int TotalDailyTransfer_count = Convert.ToInt32(dds.Rows[0]["Daily_Transfer_Count"]);
                                _cmd = new MySqlCommand("CustTotal_AmountPTypewise");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_From_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                _cmd.Parameters.AddWithValue("_To_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                                DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                if ((sd.Rows.Count + 1) > TotalDailyTransfer_count)
                                {
                                    string notification_icon = "tranfer-limit-exceeded.jpg";
                                    string notification_message = "<span class='cls-admin'>Daily transfer count <strong class='cls-cancel'>reached for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                    daily_transfer_count = 1;// count exceeded
                                    daily_transfer_msg = "We are unable to process your transfer request at the moment. Please contact Support Team with your transfer request.";
                                    string message = "";
                                    try
                                    {
                                        DataTable dtcompanydetails = (DataTable)CompanyInfo.GetBaseCurrencywisebankdetails(t.Client_ID, t.FromCurrency_Code, t.PaymentDepositType_ID, t.DeliveryType_Id);

                                        if (dtcompanydetails != null && dtcompanydetails.Rows.Count > 0)
                                        {
                                            foreach (DataRow drk in dtcompanydetails.Rows)
                                            {
                                                if (drk["Company_Email"] != "" && drk["Company_Email"] != null && drk["Company_mobile"] != "" && drk["Company_mobile"] != null)
                                                {
                                                    message = " You can call us at <a href='tel:" + drk["Company_mobile"] + "'>" + drk["Company_mobile"] + "</a> or " +
                                    "send email to <a href='mailto:" + drk["Company_Email"] + "'>" + drk["Company_Email"] + "</a>. Thank You.";
                                                }
                                                else if (drk["Company_mobile"] != "" && drk["Company_mobile"] != null)
                                                {
                                                    message = message + " You can call us at <a href='tel:" + drk["Company_mobile"] + "'>" + drk["Company_mobile"] + "</a>. Thank You.";
                                                }
                                                else if (drk["Company_Email"] != "" && drk["Company_Email"] != null)
                                                {
                                                    message = message + " You can send email to <a href='mailto:" + drk["Company_Email"] + "'>" + drk["Company_Email"] + "</a>. Thank You.";
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    catch (Exception egx) {  }
                                    daily_transfer_msg = daily_transfer_msg + message;


                                    #region createtoken
                                    try
                                    {
                                        SendMoneyToken = ""; RewardToken = "";
                                        sendhashexpire = Convert.ToDateTime("0001-01-01");
                                    }
                                    catch { }
                                    #endregion createtoken
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                  PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                  0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                  transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                                if ((sd.Rows.Count + 1) == TotalDailyTransfer_count)
                                {
                                    daily_transfer_count = -1;
                                }
                            }
                        }
                        //Check daily limit 
                        if (chkdailylimit == 0 && Transfer_limit_flag == 0)
                        {
                            if (dds.Rows.Count > 0)
                            {
                                double Daily_Transfer_Limit = Convert.ToDouble(dds.Rows[0]["Daily_Transfer_Limit"]);
                                //get todays total transaction amount
                                DateTime From_Date = dateTime.Date;
                                DateTime To_Date = dateTime.Date;
                                _cmd = new MySqlCommand("CustTotal_AmountPTypewise");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                                DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                total = 0;
                                if (sd.Rows.Count > 0)
                                {
                                    for (int j = 0; j < sd.Rows.Count; j++)
                                    {
                                        double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                                        double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                                        total = total + AmountInGBP;// + fees;
                                        total_cust = total_cust + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                                        if (Convert.ToInt32(sd.Rows[j]["Beneficiary_ID"]) == t.Beneficiary_ID)
                                        {
                                            total_benf = total_benf + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                                        }
                                    }
                                }

                                if ((total + t.AmountInGBP) > Daily_Transfer_Limit)
                                {
                                    string notification_icon = "tranfer-limit-exceeded.jpg";
                                    string notification_message = "<span class='cls-admin'>Daily transfer limit<strong class='cls-cancel'> reached for " + PaymentTypeName + ".</strong></span><span class='cls-customer'></span>";
                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                    if (Convert.ToString(dds.Rows[0]["Set_AmlCompliance_Alert"]) == "0")
                                    {
                                        TotalCustAmount = total;
                                        dailylimit = 2;//complaince alert
                                        dailylimitmsg = "Your Daily Limit is exceeded for " + PaymentTypeName + ". For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                        #region createtoken
                                        try
                                        {
                                            SendMoneyToken = ""; RewardToken = "";
                                            sendhashexpire = Convert.ToDateTime("0001-01-01");
                                        }
                                        catch { }
                                        #endregion createtoken
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                    else
                                    {
                                        MySqlCommand cmd_sof = new MySqlCommand("active_Sof_Count");
                                        cmd_sof.CommandType = CommandType.StoredProcedure;
                                        cmd_sof.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        cmd_sof.Parameters.AddWithValue("_Id", t.Client_ID);
                                        cmd_sof.Parameters.AddWithValue("_Record_Insert_Datetime", t.Record_Insert_DateTime);
                                        DataTable dt_sof = db_connection.ExecuteQueryDataTableProcedure(cmd_sof);
                                        if (Convert.ToInt32(dt_sof.Rows[0]["SOf_Count"]) <= 3)
                                        {
                                            uploadSOF = 0;
                                            dailylimit = 1;
                                            dailylimitmsg = "Your Daily Limit is exceeded. " + msg + "";
                                            TotalCustAmount = total;
                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;

                                        }
                                        else
                                        {
                                            TotalCustAmount = total;
                                            dailylimit = 2;//complaince alert
                                            dailylimitmsg = "Your Daily Limit is exceeded. For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                            try
                                            {
                                                DataTable dt_notif = CompanyInfo.set_notification_data(68); //Daily Limit Exceed
                                                if (dt_notif.Rows.Count > 0)
                                                {
                                                    int SMS = Convert.ToInt32(dt_notif.Rows[0]["SMS"]);
                                                    int Email = Convert.ToInt32(dt_notif.Rows[0]["Email"]);
                                                    int Notif_status = Convert.ToInt32(dt_notif.Rows[0]["Notification"]);
                                                    string notification_msg = Convert.ToString(dt_notif.Rows[0]["notification_msg"]);
                                                    

                                                    int i = CompanyInfo.check_notification_perm(Convert.ToString(Customer_ID), t.Client_ID, t.Branch_ID, 3, 68, Convert.ToDateTime(t.Record_Insert_DateTime), 1, SMS, Email, Notif_status, "App - Daily Limit Notification - 68", notification_msg,context);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                           
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;


                                        }

                                        //if (uploadSOF != 2)
                                        //{
                                        //    uploadSOF = 0;
                                        //    dailylimit = 1;
                                        //    dailylimitmsg = "Your Daily Limit is exceeded for " + PaymentTypeName + ". " + msg + "";
                                        //    TotalCustAmount = total;
                                        //    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                        //    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                        // PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                        // 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                        // transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        //    return ds;
                                        //}

                                    }
                                }
                            }
                        }

                    }
                }
                catch (Exception ex)
                {
                }
                #endregion
                d1 = null;
                if (chkSOFlimit == 0)//|| chkmonthlimit == 0
                {
                    _cmd = new MySqlCommand("chkCustSOF");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    d1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                }
                /** New Monthly Limit **/
                #region Monthly limit
                if (chkmonthlimit == 0)
                {
                    limit_activity += "1.1 step";
                    _cmd = new MySqlCommand("Customer_MonthlyLimit");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                    if (d.Rows.Count != 0)
                    {
                        limit_activity = limit_activity + "1.2 step";
                        //check perms
                        dr = dt.Select("PID=118 or PID=119 or PID=120 or PID=126");//3months,6,12 and 1month permissions
                        int PID118 = 3, PID119 = 6, PID120 = 12, PID126 = 1;
                        if (dr.Count() > 0)
                        {
                            foreach (DataRow drr in dr)
                            {
                                if (Convert.ToInt32(drr["PID"]) == 118) { PID118 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                else if (Convert.ToInt32(drr["PID"]) == 119) { PID119 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                else if (Convert.ToInt32(drr["PID"]) == 120) { PID120 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                else if (Convert.ToInt32(drr["PID"]) == 126) { PID126 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                            }
                        }
                        for (int i = 0; i < d.Rows.Count; i++)
                        {
                            int month = Convert.ToInt32(d.Rows[i]["Months_For_Limit"]);

                            double amount = Convert.ToDouble(d.Rows[i]["Transaction_Limit"]);
                            DateTime regdate = Convert.ToDateTime(d.Rows[i]["StartDate"]);
                            DateTime dt1 = regdate.Date.AddMonths(month);
                            double totgbp = 0.0;
                            DateTime From_Date = regdate; DateTime To_Date = dt1;
                            int chk_last_month_lmt = Convert.ToInt32(d.Rows[i]["chk_last_month_lmt"]);
                            string amount_fromstartdate = Convert.ToString(d.Rows[i]["Amount_FromStartDate"]);

                            DateTime today = dateTime; // DateTime.Today;
                            DateTime chk_last_month_lmtt = today.AddMonths(-month);
                            if (chk_last_month_lmt == 0)
                            {
                                From_Date = chk_last_month_lmtt;
                                To_Date = today;
                            }
                            else
                            {


                                if (dateTime.Date > dt1.Date)
                                {
                                    string newstartdate = ""; string newenddate = "";
                                    //Update Date to the Customer Transfer Limit
                                    for (DateTime dd = dt1; dd <= dateTime.AddMonths(month); dd = dd.AddMonths(month))
                                    {
                                        if (newstartdate == null || newstartdate == "")
                                        {
                                            if (dd.AddMonths(month) >= dateTime)//DateTime.Now)
                                            {
                                                newstartdate = dd.ToString(); //newenddate = Convert.ToString(dd.AddMonths(month));   
                                                From_Date = Convert.ToDateTime(newstartdate);
                                                To_Date = dd.AddMonths(month);
                                                string Transfer_ID = Convert.ToString(d.Rows[i]["ID"]);// Primary ID of customer transfer limit
                                                _cmd = new MySqlCommand("Update_MonthlyLimit");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd HH:mm:ss"));
                                                _cmd.Parameters.AddWithValue("_Transfer_ID", Transfer_ID);
                                                _cmd.Parameters.AddWithValue("_Amount", 0);
                                                _cmd.Parameters.AddWithValue("_Queryflag", 1);
                                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                amount_fromstartdate = "0";
                                                string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                            }
                                        }
                                    }
                                }
                            }
                            if (month == 3 && PID118 == 0 || month == 6 && PID119 == 0 || month == 12 && PID120 == 0 || month == 1 && PID126 == 0)
                            {
                                limit_activity = limit_activity + "1.3 step";
                                if (amount_fromstartdate == null || amount_fromstartdate == "" || amount_fromstartdate == "0")
                                {
                                    _cmd = new MySqlCommand("Transaction_MonthWise");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                                    _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                    _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                    DataTable dt2 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                    if (dt2.Rows.Count > 0)
                                    {
                                        if (dt2.Rows[0]["AmountInGBP"] != null && Convert.ToString(dt2.Rows[0]["AmountInGBP"]) != "")
                                        {
                                            totgbp += Convert.ToDouble(dt2.Rows[0]["AmountInGBP"].ToString());
                                        }
                                    }
                                    _cmd = new MySqlCommand("Update_MonthlyLimit");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd HH:mm:ss"));
                                    _cmd.Parameters.AddWithValue("_Transfer_ID", Convert.ToString(d.Rows[i]["ID"]));// Primary ID of customer transfer limit
                                    _cmd.Parameters.AddWithValue("_Amount", totgbp);
                                    _cmd.Parameters.AddWithValue("_Queryflag", 2);
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                    string success1 = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                }
                                else
                                {
                                    string ss = Convert.ToString(d.Rows[i]["Amount_FromStartDate"]) ?? "0";//Convert.ToString(d.Rows[0]["Amount_FromStartDate"].ToString() == "" ? d.Rows[0]["Amount_FromStartDate"].ToString(): "0");
                                    totgbp = Convert.ToDouble(ss);
                                }

                                double totgbpvalue = 0.0;
                                totgbpvalue = totgbp + t.AmountInGBP;

                                if (totgbpvalue > Convert.ToDouble(amount))
                                {
                                    limit_activity = limit_activity + "1.4 step";
                                    string notification_icon = "monthly-limit-exceeded.jpg";
                                    string notification_message = "<span class='cls-admin'>Roll Over " + month + " month limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                    exceedAmt = totgbpvalue - Convert.ToDouble(amount);

                                    limit_activity = limit_activity + "1.2 step" + exceedAmt;

                                    if (Convert.ToString(d.Rows[i]["set_compliancealert"]) == "0" || Convert.ToString(d.Rows[i]["set_compliancealert"]) == "")
                                    {
                                        monlimit = 1;//complaince alert
                                        monthlylimitmsg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                        try //Anushka
                                        {
                                            DataTable dt_notif = CompanyInfo.set_notification_data(19);
                                            if (dt_notif.Rows.Count > 0)
                                            {
                                                int SMS = Convert.ToInt32(dt_notif.Rows[0]["SMS"]);
                                                int Email = Convert.ToInt32(dt_notif.Rows[0]["Email"]);
                                                int Notif_status = Convert.ToInt32(dt_notif.Rows[0]["Notification"]);
                                                string notification_msg = Convert.ToString(dt_notif.Rows[0]["notification_msg"]);
                                                if (notification_msg.Contains("[Month]") == true)
                                                {
                                                    notification_msg = notification_msg.Replace("[Month]", Convert.ToString(month));
                                                }

                                                int i_app = CompanyInfo.check_notification_perm(Convert.ToString(Customer_ID), t.Client_ID, t.Branch_ID, 3, 19, Convert.ToDateTime(t.Record_Insert_DateTime), 1, SMS, Email, Notif_status, "App - Monthly Limit Notification - 19", notification_msg, _srvTransactionContext);

                                                limit_activity = limit_activity + "1.2 step" + i_app;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            limit_activity = limit_activity + "1.7 step";
                                        }
                                        #region createtoken
                                        try
                                        {
                                            SendMoneyToken = ""; RewardToken = "";
                                            sendhashexpire = Convert.ToDateTime("0001-01-01");
                                        }
                                        catch { }
                                        #endregion createtoken
                                    }
                                    else
                                    {
                                        if (uploadSOF != 2)
                                        {
                                            uploadSOF = 0;
                                            monlimit = 2;//sof alert
                                            monthlylimitmsg = "Your roll over " + month + " month limit is exceeded. " + msg + "";
                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                        }
                                    }
                                    //"Amount Limit: " + amount + " " + basecurrency + ". Total transaction amount in " + month + " months from your registration is " + totgbpvalue + " " + basecurrency + ". " + msg + "";
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                              PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                              0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                              transfer_count_days, paywithwallet, PrimaryIdmsg);
                                    break;
                                    //return ds;
                                }//end if amount exceeded
                            }
                        }//end for loop
                        if (monlimit > 0)
                        {

                            limit_activity = limit_activity + "1.9 step" + monlimit;
                            return ds;
                        }
                    }
                }
                #endregion Monthly limit


                //Skip and proceed starts Check Source of funds limit
                CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B1:"+ d1.Rows.Count + " and chkSOFlimit: "+ chkSOFlimit, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                if (chkSOFlimit == 0)
                {
                    //_cmd = new MySqlCommand("chkCustSOF");
                    //_cmd.CommandType = CommandType.StoredProcedure;
                    //_cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    //_cmd.Parameters.AddWithValue("_Customer_ID", t.Customer_ID);
                    //DataTable d1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    #region sof
                    if (d1.Rows.Count != 0)
                    {
                        double pil = Convert.ToInt32(d1.Rows[0]["PrimaryID_Limit"]);
                        int Timespan_Flag = Convert.ToInt32(d1.Rows[0]["NRF_Timespan_Flag"]);//vyankatesh 17-10
                        int Transfer_Count_Limit = Convert.ToInt32(d1.Rows[0]["NRF_Transfer_Count_Limit"]);//vyankatesh 17-10
                        double sil = Convert.ToInt32(d1.Rows[0]["SecondaryID_Limit"]);
                        double amount = Convert.ToDouble(d1.Rows[0]["SourceOfFunds_Limit"]);
                        DateTime regdate = Convert.ToDateTime(d1.Rows[0]["StartDate"]);
                        DateTime Registration_Date = Convert.ToDateTime(d1.Rows[0]["Registration_Date"]); //vyankatesh 17-10
                        int month = Convert.ToInt32(d1.Rows[0]["Validation_Days"]);
                        int txncount = Convert.ToInt32(d1.Rows[0]["Transfer_Count"]);
                        int chk_last_days_lmt = Convert.ToInt32(d1.Rows[0]["chk_last_days_lmt"]);
                        double AskforSOFAmount_Limit = 0;
                        if (d1.Rows[0]["AskforSOFAmount_Limit"] != null && d1.Rows[0]["AskforSOFAmount_Limit"] != "")
                            AskforSOFAmount_Limit = Convert.ToDouble(d1.Rows[0]["AskforSOFAmount_Limit"]);
                        DateTime dt11 = regdate.Date.AddDays(month);//AddMonths
                        double totgbp = 0.0;

                        string notification_icon = "", notification_message = "";
                        DateTime From_Date = regdate; DateTime To_Date = dt11;
                        DateTime ddt_poa = regdate.Date.AddDays(month);
                        DateTime today = dateTime;
                        DateTime last_validation_days_dt = today.AddDays(-month);
                        if (chk_last_days_lmt == 0)
                        {
                            From_Date = last_validation_days_dt;
                            To_Date = today;
                        }
                        else
                        {
                            if (dateTime.Date > dt11.Date)
                            {
                                string newstartdate = ""; string newenddate = "";
                                //Update Date to the Customer Transfer Limit
                                for (DateTime dd = dt11; dd <= dateTime.AddDays(month); dd = dd.AddDays(month))
                                {
                                    if (newstartdate == null || newstartdate == "")
                                    {
                                        if (dd.AddDays(month) >= dateTime)//DateTime.Now)
                                        {
                                            newstartdate = dd.ToString(); //newenddate = Convert.ToString(dd.AddMonths(month));   
                                            From_Date = Convert.ToDateTime(newstartdate);
                                            To_Date = dd.AddDays(month);
                                            string Transfer_ID = Convert.ToString(d1.Rows[0]["AML_ID"]);// Primary ID of customer transfer limit
                                            _cmd = new MySqlCommand("Update_AMLLimit");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd HH:mm:ss"));
                                            _cmd.Parameters.AddWithValue("_Transfer_ID", Transfer_ID);
                                            string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                        }
                                    }
                                }
                            }
                        }

                        #region check Primary ID in lifetime for NRF

                        CompanyInfo.InsertActivityLogDetails("App - NRF Customer Details Customer Id : " + Customer_ID + " , Having Timespan_Flag : " + Timespan_Flag + " , idperm : " + idperm + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "NRF CheckAllLimits1", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);

                        if (Timespan_Flag == 1 && idperm != 0) //vyankatesh 17-10  //check in lifetime
                        {
                            //if (totalgbpvalue > pil)
                            //{
                            //For Primary
                            _cmd = new MySqlCommand("CheckIDExpiry");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            DataTable table_ids = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                            //DateTime dt3 = DateTime.Now.Date.AddDays(60);
                            if (table_ids.Rows.Count == 0)   //vyankatesh 17-10
                            {
                                DateTime From_Datel = Registration_Date; //registration date
                                DateTime To_Datel = dateTime; //today date
                                double totgbpl = 0;

                                _cmd = new MySqlCommand("Transaction_MonthWise");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_From_Date", From_Datel.ToString("yyyy-MM-dd"));
                                _cmd.Parameters.AddWithValue("_To_Date", To_Datel.ToString("yyyy-MM-dd"));
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                DataTable dttl = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                if (dttl.Rows.Count > 0)
                                {
                                    if (dttl.Rows[0]["Transaction_Count"] != null && Convert.ToString(dttl.Rows[0]["Transaction_Count"]) != "")
                                    {
                                        int custTransaction_Count = Convert.ToInt32(dttl.Rows[0]["Transaction_Count"]);
                                        int NRFtxncount = Convert.ToInt32(d1.Rows[0]["NRF_Transfer_Count_Limit"]);

                                        CompanyInfo.InsertActivityLogDetails("App1 - NRF Customer Exceed NRF Transaction Count Customer Id : " + Customer_ID + " , Having Transaction Count : " + NRFtxncount + " , Total Transaction Count : " + custTransaction_Count + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "NRF CheckAllLimits2", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);

                                        if (custTransaction_Count >= NRFtxncount)
                                        {
                                            //  CompanyInfo.InsertActivityLogDetails("App - NRF Customer Exceed NRF Transaction Count Customer Id : " + Customer_ID + " , Having Transaction Count : " + NRFtxncount + " , Total Transaction Count : " + custTransaction_Count + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "NRF CheckAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);

                                            //SOFDaysCount = 1;
                                            //SOFDaysCount_Msg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                            amlmsg = "Identification document need to be uploaded to proceed this transfer. Do you want to Upload?";
                                            amllimit = 1;//amllimit = 5;//removed by vyankatesh
                                            #region createtoken
                                            try
                                            {
                                                SendMoneyToken = ""; RewardToken = "";
                                                sendhashexpire = Convert.ToDateTime("0001-01-01");
                                            }
                                            catch { }
                                            #endregion createtoken
                                            //notification_icon = "tranfer-limit-exceeded.jpg";
                                            //notification_message = "<span class='cls-admin'>" + month + " days transfer count <strong class='cls-cancel'>reached.</strong></span><span class='cls-customer'></span>";
                                            //CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToInt32(t.Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0,_srvTransactionContext);
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;
                                        }
                                        if (custTransaction_Count == txncount)
                                        {
                                            transfer_count_days = month;
                                        }
                                    }

                                    if (dttl.Rows[0]["AmountInGBP"] != null && Convert.ToString(dttl.Rows[0]["AmountInGBP"]) != "")
                                    {
                                        totgbpl += Convert.ToDouble(dttl.Rows[0]["AmountInGBP"].ToString());
                                    }
                                }
                                double totalgbpvalue = 0.0;//double totgbpvalue = t.AmountInBase; //
                                totalgbpvalue = totgbpl + t.AmountInGBP;

                                if (totalgbpvalue > pil)
                                {
                                    CompanyInfo.InsertActivityLogDetails("App - NRF Customer Exceed Transaction limit Customer Id : " + Customer_ID + " , Having limit : " + pil + " , Total Transaction Amount : " + totalgbpvalue + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "NRF CheckAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);

                                    notification_icon = "id-threshold.jpg";
                                    notification_message = "<span class='cls-admin'>ID threshold <strong>primary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                    try
                                    {
                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                        cmd1.CommandType = CommandType.StoredProcedure;
                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                        if (db.Rows.Count > 0)
                                        {
                                        }
                                        else
                                        {
                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                        }
                                    }
                                    catch
                                    {

                                    }
                                    amlmsg = "Identification document need to be uploaded to proceed this transfer. Do you want to Upload?";
                                    amllimit = 1;
                                    #region createtoken
                                    try
                                    {
                                        SendMoneyToken = ""; RewardToken = "";
                                        sendhashexpire = Convert.ToDateTime("0001-01-01");
                                    }
                                    catch { }
                                    #endregion createtoken
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                              PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                              0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                              transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                            }
                            //}
                        }
                        #endregion check Primary ID in lifetime for NRF
                        _cmd = new MySqlCommand("Transaction_MonthWise");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                        DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                        if (dtt.Rows.Count > 0)
                        {
                            if (dtt.Rows[0]["Transaction_Count"] != null && Convert.ToString(dtt.Rows[0]["Transaction_Count"]) != "")
                            {
                                int custTransaction_Count = Convert.ToInt32(dtt.Rows[0]["Transaction_Count"]);
                                if (custTransaction_Count >= txncount)
                                {
                                    SOFDaysCount = 1;
                                    SOFDaysCount_Msg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                    #region createtoken
                                    try
                                    {
                                        SendMoneyToken = ""; RewardToken = "";
                                        sendhashexpire = Convert.ToDateTime("0001-01-01");
                                    }
                                    catch { }
                                    #endregion createtoken
                                    try
                                    {
                                        DataTable dt_notif = CompanyInfo.set_notification_data(67); //Transfe count Exceed
                                        if (dt_notif.Rows.Count > 0)
                                        {
                                            int SMS = Convert.ToInt32(dt_notif.Rows[0]["SMS"]);
                                            int Email = Convert.ToInt32(dt_notif.Rows[0]["Email"]);
                                            int Notif_status = Convert.ToInt32(dt_notif.Rows[0]["Notification"]);
                                            string notification_msg = Convert.ToString(dt_notif.Rows[0]["notification_msg"]);
                                            //if (notification_msg.Contains("[Benf_name]") == true)
                                            //{
                                            //    notification_msg = notification_msg.Replace("[Benf_name]", Convert.ToString(Beneficiary_Name));
                                            //}

                                            int i = CompanyInfo.check_notification_perm(Convert.ToString(Customer_ID), t.Client_ID, t.Branch_ID, 3, 67, Convert.ToDateTime(t.Record_Insert_DateTime), 1, SMS, Email, Notif_status, "App - Transfer Count Notification - 67", notification_msg, _srvTransactionContext);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                    //notification_icon = "tranfer-limit-exceeded.jpg";
                                    //notification_message = "<span class='cls-admin'>" + month + " days transfer count <strong class='cls-cancel'>reached.</strong></span><span class='cls-customer'></span>";
                                    //CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToInt32(t.Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0,_srvTransactionContext);
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                                if (custTransaction_Count == txncount)
                                {
                                    transfer_count_days = month;
                                }
                            }
                            if (dtt.Rows[0]["AmountInGBP"] != null && Convert.ToString(dtt.Rows[0]["AmountInGBP"]) != "")
                            {
                                totgbp += Convert.ToDouble(dtt.Rows[0]["AmountInGBP"].ToString());
                            }
                        }
                        double totgbpvalue = 0.0;//double totgbpvalue = t.AmountInBase; //
                        totgbpvalue = totgbp + t.AmountInGBP;

                        DateTime dt1 = dateTime.Date;// DateTime.Now.Date;

                        if (totgbpvalue > pil)
                        {
                            //For Primary
                            _cmd = new MySqlCommand("CheckIDExpiry");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            DataTable table = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                            CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B2:"+ table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                            //DateTime dt3 = DateTime.Now.Date.AddDays(60);
                            if (table.Rows.Count > 0)// Check 1
                            {
                                for (int i = 0; i < table.Rows.Count; i++)
                                {
                                    string senPExpDate = Convert.ToString(table.Rows[i]["SenderID_ExpiryDate"]);
                                    CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B3:" + table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                    if (senPExpDate != "" && senPExpDate != null && senPExpDate != "VGrYRT2Em7s=")
                                    {
                                        CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B4:" + table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                        DateTime dt2 = DateTime.ParseExact(Convert.ToDateTime(senPExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                        if (dt1 > dt2)
                                        {
                                            notification_icon = "id-threshold.jpg";
                                            notification_message = "<span class='cls-admin'>ID threshold <strong>primary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                            try
                                            {
                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                if (db.Rows.Count > 0)
                                                {
                                                }
                                                else
                                                {
                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                }
                                            }
                                            catch
                                            {

                                            }

                                            amlmsg = "Identification document is expired and need to be uploaded to proceed this transfer. Do you want to Upload?";
                                            #region createtoken
                                            try
                                            {
                                                SendMoneyToken = ""; RewardToken = "";
                                                sendhashexpire = Convert.ToDateTime("0001-01-01");
                                            }
                                            catch { }
                                            #endregion createtoken
                                            amllimit = 1; ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                      PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                      0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                      transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;
                                        }
                                        else
                                        {
                                            CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B6:" + table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                            if (totgbpvalue > sil)// Check 2
                                            {
                                                CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B7:" + table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                //For Address proof
                                                _cmd = new MySqlCommand("CheckIDExpiry");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                _cmd.Parameters.AddWithValue("_IDType_ID", 2);
                                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                DataTable tbl = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                                if (tbl.Rows.Count > 0)
                                                {
                                                    CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B8:" + table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                    string recDate = Convert.ToString(tbl.Rows[0]["Record_Insert_DateTime"]);
                                                    DateTime indt = DateTime.ParseExact(Convert.ToDateTime(recDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                    DateTime fifth = To_Date;// indt.Date.AddMonths(ExpiryMonths);//AddDays(150);
                                                    DateTime expDat = To_Date;
                                                    string exp = Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"]);
                                                    if (exp != null && exp != "")
                                                        expDat = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                    CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B9:" + table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                    DateTime recDate_validity = Convert.ToDateTime(indt.AddYears(Validity_POA));

                                                    CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B9:dt1" + dt1+ " and ddt_poa:"+ ddt_poa+ " and expDat:"+ expDat+ "  and dt1:"+ dt1, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                    if ((dt1 > ddt_poa) || (expDat < dt1 && exp != null && exp != ""))//(indt > fifth)280823//(indt <= dt1 && dt1 >= fifth)
                                                    {
                                                        CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B10:" + table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                        //if ((expDat > dt1) && ((exp != null && exp != "") || recDate_validity > indt) && Convert.ToInt32(chk_sec_validity) == 0)
                                                        if (recDate_validity > indt && Convert.ToInt32(chk_sec_validity) == 0)
                                                        {
                                                            CompanyInfo.InsertrequestLogTracker("CheckIDExpiry Step B11:" + table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                            check_sec_limit = 0;
                                                            amllimit = 10;
                                                        }
                                                        else if ((expDat < dt1) || recDate_validity < indt)
                                                        {
                                                            //vyankatesh change 
                                                            if (perm_primaryid_as_POA == 0 && table.Rows.Count > 0)//perm for primary id as proof of address  //vyankatesh 28-10-24
                                                            {
                                                                string ExpDate = Convert.ToString(table.Rows[0]["SenderID_ExpiryDate"]);
                                                                if (ExpDate != "" && ExpDate != null && ExpDate != "VGrYRT2Em7s=")
                                                                {
                                                                    DateTime dtexp = DateTime.ParseExact(Convert.ToDateTime(ExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                                    if (dt1 < dtexp) //check expire
                                                                    {
                                                                        if (Convert.ToInt32(table.Rows[0]["Gbg_Addressmatch_Flag"]) == 1)
                                                                        {
                                                                            string InsDate = Convert.ToString(table.Rows[0]["Record_Insert_DateTime"]);
                                                                            DateTime InsertDate = DateTime.ParseExact(Convert.ToDateTime(InsDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                                            DateTime two_year_exp_date = InsertDate.AddYears(2); //document valid for 2 year from record insert date
                                                                            if (dt1 > two_year_exp_date) //document valid for 2 year from record insert date
                                                                            {
                                                                                amlmsg = "ID3 Global AML Check Primary Id As Proof of Address of selected customer " + Convert.ToString(table.Rows[0]["First_Name"]) + " is expired.";
                                                                                amllimit = 2;
                                                                            }
                                                                            else
                                                                            {
                                                                                var activitys = "ID3 Global AML Check Address is Mactched of Primary Id and this document id is consider as Proof of Address is valid Document ID : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                                CompanyInfo.InsertActivityLogDetails(activitys, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "checkAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            amllimit = 2;
                                                                            amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                            POA_activity += " 3682 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        amllimit = 2;
                                                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                        POA_activity += " 3689 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    amllimit = 2;
                                                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                    POA_activity += " 3696 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                amllimit = 2;
                                                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                POA_activity += " 3703";
                                                            }
                                                            if (amllimit == 2)
                                                            {
                                                                notification_icon = "id-threshold.jpg";
                                                                notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                                try
                                                                {
                                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                    if (db.Rows.Count > 0)
                                                                    {
                                                                    }
                                                                    else
                                                                    {
                                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                    }
                                                                }
                                                                catch
                                                                {

                                                                }
                                                                amllimit = 2;
                                                                sof = 0;
                                                                // amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                return ds;
                                                            }
                                                        }
                                                    }
                                                    else if (totgbpvalue > amount)// Check 3 SOF
                                                    {
                                                        //For SOF
                                                        _cmd = new MySqlCommand("CheckIDExpiry");
                                                        _cmd.CommandType = CommandType.StoredProcedure;
                                                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                        _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                        DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                        if (tbls.Rows.Count > 0)
                                                        {
                                                            string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                                            DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                            DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                                            if (exp1 != null && exp1 != "")
                                                                expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                            if (( (indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "") ) && (uploadSOF != 2)) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                                            {
                                                                amllimit = 4;
                                                                amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + ". " + msg + "";
                                                                PrimaryID_Limit = pil;
                                                                SecondaryID_Limit = sil;
                                                                SourceOfFunds_Limit = amount;

                                                                notification_icon = "id-threshold.jpg";
                                                                notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                                try
                                                                {
                                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                    if (db.Rows.Count > 0)
                                                                    {
                                                                    }
                                                                    else
                                                                    {
                                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                    }
                                                                }
                                                                catch
                                                                {

                                                                }
                                                                SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                return ds;
                                                            }
                                                            else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                                            {
                                                                _cmd = new MySqlCommand("Check_IfSOFExceeded");
                                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                                _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = '" + t.FromCurrency_Code + "'");
                                                                DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                                int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                                                if (tb.Rows.Count > 0)
                                                                {
                                                                    isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                                                    SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                                                }
                                                                if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                                                {
                                                                    amllimit = 4;
                                                                    amlmsg = "Source of fund amount limit is reached. " + msg + "";
                                                                    PrimaryID_Limit = pil;
                                                                    SecondaryID_Limit = sil;
                                                                    SourceOfFunds_Limit = amount;
                                                                    notification_icon = "id-threshold.jpg";
                                                                    notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                                    try
                                                                    {
                                                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                        if (db.Rows.Count > 0)
                                                                        {
                                                                        }
                                                                        else
                                                                        {
                                                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                        }
                                                                    }
                                                                    catch
                                                                    {

                                                                    }
                                                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                    return ds;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            notification_icon = "id-threshold.jpg";
                                                            notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                            try
                                                            {
                                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                if (db.Rows.Count > 0)
                                                                {
                                                                }
                                                                else
                                                                {
                                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                }
                                                            }
                                                            catch
                                                            {

                                                            }
                                                            amllimit = 4;
                                                            amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                            return ds;
                                                        }
                                                    }
                                                }
                                                else if (perm_primaryid_as_POA == 0 && table.Rows.Count > 0)
                                                {
                                                    string ExpDate = Convert.ToString(table.Rows[0]["SenderID_ExpiryDate"]);
                                                    CompanyInfo.InsertrequestLogTracker("CheckIDExpiry StepT1:" + table.Rows.Count, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                    if (ExpDate != "" && ExpDate != null && ExpDate != "VGrYRT2Em7s=")
                                                    {
                                                        DateTime dtexp = DateTime.ParseExact(Convert.ToDateTime(ExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                        if (dt1 < dtexp) //check expire
                                                        {
                                                            if (Convert.ToInt32(table.Rows[0]["Gbg_Addressmatch_Flag"]) == 1)
                                                            {
                                                                string InsDate = Convert.ToString(table.Rows[0]["Record_Insert_DateTime"]);
                                                                DateTime InsertDate = DateTime.ParseExact(Convert.ToDateTime(InsDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                                DateTime two_year_exp_date = InsertDate.AddYears(2); //document valid for 2 year from record insert date
                                                                if (dt1 > two_year_exp_date) //document valid for 2 year from record insert date
                                                                {
                                                                    amlmsg = "ID3 Global AML Check Primary Id As Proof of Address of selected customer " + Convert.ToString(table.Rows[0]["First_Name"]) + " is expired.";
                                                                    amllimit = 2;
                                                                }
                                                                else
                                                                {
                                                                    var activitys = "ID3 Global AML Check Address is Mactched of Primary Id and this document id is consider as Proof of Address is valid Document ID : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                    CompanyInfo.InsertActivityLogDetails(activitys, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "checkAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                amllimit = 2;
                                                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                POA_activity += " 3921 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            amllimit = 2;
                                                            amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                            POA_activity += " 3928 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                        }
                                                        CompanyInfo.InsertrequestLogTracker("CheckIDExpiry StepT2:" + amllimit, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                                                    }
                                                    else
                                                    {
                                                        amllimit = 2;
                                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                        POA_activity += " 3935";
                                                    }
                                                    CompanyInfo.InsertrequestLogTracker("CheckIDExpiry StepT3:" + amllimit, 0, 0, 0, 0, "Get_linked_emails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                    if (amllimit == 2)
                                                    {
                                                        notification_icon = "id-threshold.jpg";
                                                        notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                        try
                                                        {
                                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                            cmd1.CommandType = CommandType.StoredProcedure;
                                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                            if (db.Rows.Count > 0)
                                                            {
                                                            }
                                                            else
                                                            {
                                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                            }
                                                        }
                                                        catch
                                                        {

                                                        }
                                                        amllimit = 2;
                                                        sof = 0;
                                                        //amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                        SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                        return ds;
                                                    }
                                                }
                                                else
                                                {
                                                    notification_icon = "id-threshold.jpg";
                                                    notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                    try
                                                    {
                                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                        if (db.Rows.Count > 0)
                                                        {
                                                        }
                                                        else
                                                        {
                                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                        }
                                                    }
                                                    catch
                                                    {

                                                    }
                                                    amllimit = 2;
                                                    sof = 0;
                                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                    POA_activity += " 4002";
                                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                    return ds;
                                                }
                                            }
                                            else if (totgbpvalue > amount)// Check 3 SOF
                                            {
                                                //For SOF
                                                _cmd = new MySqlCommand("CheckIDExpiry");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                if (tbls.Rows.Count > 0)
                                                {
                                                    string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                                    DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                    DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                                    if (exp1 != null && exp1 != "")
                                                        expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                    if ( ((indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "")) && (uploadSOF != 2)) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                                    {
                                                        amllimit = 4;
                                                        amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + ". " + msg + "";
                                                        PrimaryID_Limit = pil;
                                                        SecondaryID_Limit = sil;
                                                        SourceOfFunds_Limit = amount;
                                                        notification_icon = "id-threshold.jpg";
                                                        notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                        try
                                                        {
                                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                            cmd1.CommandType = CommandType.StoredProcedure;
                                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                            if (db.Rows.Count > 0)
                                                            {
                                                            }
                                                            else
                                                            {
                                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                            }
                                                        }
                                                        catch
                                                        {

                                                        }
                                                        SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                        return ds;
                                                    }
                                                    else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                                    {
                                                        _cmd = new MySqlCommand("Check_IfSOFExceeded");
                                                        _cmd.CommandType = CommandType.StoredProcedure;
                                                        _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = " + t.FromCurrency_Code + " ");
                                                        DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                        int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                                        if (tb.Rows.Count > 0)
                                                        {
                                                            isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                                            SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                                        }
                                                        if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                                        {
                                                            amllimit = 4;
                                                            amlmsg = "Source of fund amount limit is reached. " + msg + "";
                                                            PrimaryID_Limit = pil;
                                                            SecondaryID_Limit = sil;
                                                            SourceOfFunds_Limit = amount;
                                                            notification_icon = "id-threshold.jpg";
                                                            notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                            try
                                                            {
                                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                if (db.Rows.Count > 0)
                                                                {
                                                                }
                                                                else
                                                                {
                                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                                }
                                                            }
                                                            catch
                                                            {

                                                            }
                                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                            return ds;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    notification_icon = "id-threshold.jpg";
                                                    notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                    try
                                                    {
                                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                        if (db.Rows.Count > 0)
                                                        {
                                                        }
                                                        else
                                                        {
                                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                        }
                                                    }
                                                    catch
                                                    {

                                                    }
                                                    amllimit = 4;
                                                    amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                    return ds;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                notification_icon = "id-threshold.jpg";
                                notification_message = "<span class='cls-admin'>ID threshold <strong>primary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                try
                                {
                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                    cmd1.CommandType = CommandType.StoredProcedure;
                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                    if (db.Rows.Count > 0)
                                    {
                                    }
                                    else
                                    {
                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                    }
                                }
                                catch
                                {

                                }

                                amlmsg = "Identification document need to be uploaded to proceed this transfer. Do you want to Upload?";
                                amllimit = 1;
                                #region createtoken
                                try
                                {
                                    SendMoneyToken = ""; RewardToken = "";
                                    sendhashexpire = Convert.ToDateTime("0001-01-01");
                                }
                                catch { }
                                #endregion createtoken
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                          PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                          0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                          transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                        else if (totgbpvalue > sil)// Check 2
                        {
                            //For Address proof
                            _cmd = new MySqlCommand("CheckIDExpiry");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_IDType_ID", 2);
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            DataTable tbl = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                            if (tbl.Rows.Count > 0)
                            {
                                string recDate = Convert.ToString(tbl.Rows[0]["Record_Insert_DateTime"]);
                                DateTime indt = DateTime.ParseExact(Convert.ToDateTime(recDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                DateTime fifth = To_Date;// indt.Date.AddMonths(ExpiryMonths);//AddDays(150);
                                DateTime expDat = To_Date; string exp = Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"]);
                                if (exp != null && exp != "")
                                    expDat = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                DateTime recDate_validity = Convert.ToDateTime(indt.AddYears(Validity_POA));
                                if ((dt1 > ddt_poa) || (expDat < dt1 && exp != null && exp != ""))//(indt > fifth)280823//(indt <= dt1 && dt1 >= fifth)
                                {
                                    //if ((expDat > dt1) && ((exp != null && exp != "") || recDate_validity > indt) && Convert.ToInt32(chk_sec_validity) == 0)
                                    if (recDate_validity > indt && Convert.ToInt32(chk_sec_validity) == 0)
                                    {
                                        check_sec_limit = 0;
                                        amllimit = 10;
                                    }
                                    else if ((expDat < dt1) || recDate_validity < indt)
                                    {
                                        if (perm_primaryid_as_POA == 0) //vyankatesh change
                                        {
                                            //For Primary
                                            _cmd = new MySqlCommand("CheckIDExpiry");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                            _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                            DataTable table = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                            if (table.Rows.Count > 0)
                                            {
                                                string ExpDate = Convert.ToString(table.Rows[0]["SenderID_ExpiryDate"]);
                                                if (ExpDate != "" && ExpDate != null && ExpDate != "VGrYRT2Em7s=")
                                                {
                                                    DateTime dtexp = DateTime.ParseExact(Convert.ToDateTime(ExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                    if (dt1 < dtexp) //check expire
                                                    {
                                                        if (Convert.ToInt32(table.Rows[0]["Gbg_Addressmatch_Flag"]) == 1)
                                                        {
                                                            string InsDate = Convert.ToString(table.Rows[0]["Record_Insert_DateTime"]);
                                                            DateTime InsertDate = DateTime.ParseExact(Convert.ToDateTime(InsDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                            DateTime two_year_exp_date = InsertDate.AddYears(2); //document valid for 2 year from record insert date
                                                            if (dt1 > two_year_exp_date) //document valid for 2 year from record insert date
                                                            {
                                                                amllimit = 2;
                                                                amlmsg = "ID3 Global AML Check Primary Id As Proof of Address of selected customer " + Convert.ToString(table.Rows[0]["First_Name"]) + " is expired.";
                                                            }
                                                            else
                                                            {
                                                                var activitys = "ID3 Global AML Check Address is Mactched of Primary Id and this document id is consider as Proof of Address is valid Document ID : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                                CompanyInfo.InsertActivityLogDetails(activitys, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "checkAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            amllimit = 2;
                                                            amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                            POA_activity += " 4259 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        amllimit = 2;
                                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                        POA_activity += " 4266 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                    }
                                                }
                                                else
                                                {
                                                    amllimit = 2;
                                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                    POA_activity += " 4273 ";
                                                }
                                            }
                                            else
                                            {
                                                amllimit = 2;
                                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                POA_activity += " 4273 ";
                                            }
                                        }
                                        if (amllimit == 2)
                                        {
                                            notification_icon = "id-threshold.jpg";
                                            notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                            try
                                            {
                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                if (db.Rows.Count > 0)
                                                {
                                                }
                                                else
                                                {
                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                }
                                            }
                                            catch
                                            {

                                            }
                                            amllimit = 2;
                                            sof = 0;
                                            //amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                  PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                  0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                  transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;
                                        }
                                    }
                                }
                                else if (totgbpvalue > amount)// Check 3 SOF //080524
                                {
                                    //For SOF
                                    _cmd = new MySqlCommand("CheckIDExpiry");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                    _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                    if (tbls.Rows.Count > 0)
                                    {
                                        string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                        DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                        DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                        if (exp1 != null && exp1 != "")
                                            expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                        if (((indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "")) && (uploadSOF != 2)) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                        {
                                            amllimit = 4;
                                            amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + ". " + msg + "";
                                            PrimaryID_Limit = pil;
                                            SecondaryID_Limit = sil;
                                            SourceOfFunds_Limit = amount;

                                            notification_icon = "id-threshold.jpg";
                                            notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                            try
                                            {
                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                if (db.Rows.Count > 0)
                                                {
                                                }
                                                else
                                                {
                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                }
                                            }
                                            catch
                                            {

                                            }
                                            SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;
                                        }
                                        else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                        {
                                            _cmd = new MySqlCommand("Check_IfSOFExceeded");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = '" + t.FromCurrency_Code + "'");
                                            DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                            int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                            if (tb.Rows.Count > 0)
                                            {
                                                isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                                SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                            }
                                            if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                            {
                                                amllimit = 4;
                                                amlmsg = "Source of fund amount limit is reached. " + msg + "";
                                                PrimaryID_Limit = pil;
                                                SecondaryID_Limit = sil;
                                                SourceOfFunds_Limit = amount;
                                                notification_icon = "id-threshold.jpg";
                                                notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                try
                                                {
                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                    if (db.Rows.Count > 0)
                                                    {
                                                    }
                                                    else
                                                    {
                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                    }
                                                }
                                                catch
                                                {

                                                }
                                                SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                return ds;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        notification_icon = "id-threshold.jpg";
                                        notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                        try
                                        {
                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                            if (db.Rows.Count > 0)
                                            {
                                            }
                                            else
                                            {
                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                            }
                                        }
                                        catch
                                        {

                                        }
                                        amllimit = 4;
                                        amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";
                                        SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                }
                            }
                            else if (perm_primaryid_as_POA == 0) //vyankatesh change
                            {

                                //For Primary
                                _cmd = new MySqlCommand("CheckIDExpiry");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                DataTable table = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                if (table.Rows.Count > 0)
                                {
                                    string ExpDate = Convert.ToString(table.Rows[0]["SenderID_ExpiryDate"]);
                                    if (ExpDate != "" && ExpDate != null && ExpDate != "VGrYRT2Em7s=")
                                    {
                                        DateTime dtexp = DateTime.ParseExact(Convert.ToDateTime(ExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                        if (dt1 < dtexp) //check expire
                                        {
                                            if (Convert.ToInt32(table.Rows[0]["Gbg_Addressmatch_Flag"]) == 1)
                                            {
                                                string InsDate = Convert.ToString(table.Rows[0]["Record_Insert_DateTime"]);
                                                DateTime InsertDate = DateTime.ParseExact(Convert.ToDateTime(InsDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                DateTime two_year_exp_date = InsertDate.AddYears(2); //document valid for 2 year from record insert date
                                                if (dt1 > two_year_exp_date) //document valid for 2 year from record insert date
                                                {
                                                    amllimit = 2;
                                                    amlmsg = "ID3 Global AML Check Primary Id As Proof of Address of selected customer " + Convert.ToString(table.Rows[0]["First_Name"]) + " is expired.";
                                                }
                                                else
                                                {
                                                    var activitys = "ID3 Global AML Check Address is Mactched of Primary Id and this document id is consider as Proof of Address is valid Document ID : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                                    CompanyInfo.InsertActivityLogDetails(activitys, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "checkAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);
                                                }
                                            }
                                            else
                                            {
                                                amllimit = 2;
                                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                POA_activity += " 4490 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                            }
                                        }
                                        else
                                        {
                                            amllimit = 2;
                                            amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                            POA_activity += " 4526 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                        }
                                    }
                                    else
                                    {
                                        amllimit = 2;
                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                        POA_activity += " 4533 :  Sender Id : " + Convert.ToString(table.Rows[0]["SenderID_ID"]);
                                    }
                                }
                                else
                                {
                                    amllimit = 2;
                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                    POA_activity += " 4505 ";
                                }
                                if (amllimit == 2)
                                {
                                    notification_icon = "id-threshold.jpg";
                                    notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                    try
                                    {
                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                        cmd1.CommandType = CommandType.StoredProcedure;
                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                        if (db.Rows.Count > 0)
                                        {
                                        }
                                        else
                                        {
                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                        }
                                    }
                                    catch
                                    {

                                    }
                                    amllimit = 2;
                                    sof = 0;
                                    //amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                    POA_activity += " 4535 ";
                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                            }
                            else
                            {
                                notification_icon = "id-threshold.jpg";
                                notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                try
                                {
                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                    cmd1.CommandType = CommandType.StoredProcedure;
                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                    if (db.Rows.Count > 0)
                                    {
                                    }
                                    else
                                    {
                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                    }
                                }
                                catch
                                {

                                }
                                amllimit = 2;
                                sof = 0;
                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                POA_activity += " 4574";
                                SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                        else if (totgbpvalue > amount) // Check 3 SOF
                        {
                            //For SOF
                            _cmd = new MySqlCommand("CheckIDExpiry");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                            if (tbls.Rows.Count > 0)
                            {
                                string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                if (exp1 != null && exp1 != "")
                                    expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                if (( (indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "") ) && (uploadSOF != 2)) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                {
                                    amllimit = 1;
                                    amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + ". " + msg + "";
                                    PrimaryID_Limit = pil;
                                    SecondaryID_Limit = sil;
                                    SourceOfFunds_Limit = amount;

                                    notification_icon = "id-threshold.jpg";
                                    notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                    try
                                    {
                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                        cmd1.CommandType = CommandType.StoredProcedure;
                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                        if (db.Rows.Count > 0)
                                        {
                                        }
                                        else
                                        {
                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                        }
                                    }
                                    catch
                                    {

                                    }
                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                                else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                {
                                    _cmd = new MySqlCommand("Check_IfSOFExceeded");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = " + t.FromCurrency_Code + " ");
                                    DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                    int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                    if (tb.Rows.Count > 0)
                                    {
                                        isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                        SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                    }
                                    if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                    {
                                        amllimit = 1;
                                        amlmsg = "Source of fund limit is reached. " + msg + "";
                                        PrimaryID_Limit = pil;
                                        SecondaryID_Limit = sil;
                                        SourceOfFunds_Limit = amount;
                                        notification_icon = "id-threshold.jpg";
                                        notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                        try
                                        {
                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                            if (db.Rows.Count > 0)
                                            {
                                            }
                                            else
                                            {
                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                            }
                                        }
                                        catch
                                        {

                                        }
                                        SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                }
                            }
                            else
                            {
                                amllimit = 4;
                                amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";

                                notification_icon = "id-threshold.jpg";
                                notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                try
                                {
                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                    cmd1.CommandType = CommandType.StoredProcedure;
                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                    if (db.Rows.Count > 0)
                                    {
                                    }
                                    else
                                    {
                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                    }
                                }
                                catch
                                {

                                }
                                SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                    }
                    #endregion sof
                }
                chkdayslimit = 1;
                dr = dt.Select("PID=24");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        chkdayslimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                total = 0;
                total_benf = 0;
                total_cust = 0;
                total_benf_year = 0;
                //Check customer days limit
                if (chkdayslimit == 0)
                {
                    _cmd = new MySqlCommand("Customer_RegDetails");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    DataTable d2 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                    if (d2.Rows.Count != 0)
                    {
                        _cmd = new MySqlCommand("CustWise_Limit");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        DataTable c = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                        DateTime date = Convert.ToDateTime(d2.Rows[0]["Record_Insert_DateTime"]);
                        DateTime date1 = dateTime.Date;
                        TimeSpan diff = date1.Date - date.Date;
                        for (int i = 0; i < c.Rows.Count; i++)
                        {
                            int days = Convert.ToInt32(c.Rows[i]["Days"]);
                            double cust_limit = Convert.ToDouble(c.Rows[i]["Personal_Transaction_Amount_Limit"]);
                            if (flag != true)
                            {
                                if (Convert.ToInt32(diff.Days) <= days)
                                {
                                    DateTime Pastdate = dateTime.Date.AddDays(-days);
                                    DateTime From_Date = Pastdate;
                                    DateTime To_Date = date1;
                                    _cmd = new MySqlCommand("CustTotal_Amount");
                                    _cmd.CommandType = CommandType.StoredProcedure;
                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                    _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                                    _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                    _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                    DataTable dt1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                    if (dt1.Rows.Count > 0)
                                    {
                                        for (int j = 0; j < dt1.Rows.Count; j++)
                                        {
                                            double AmountInGBP = Convert.ToDouble(dt1.Rows[j]["AmountInGBP"]);
                                            double fees = Convert.ToDouble(dt1.Rows[j]["Transfer_Fees"]);
                                            total = total + AmountInGBP;// + fees;
                                        }
                                    }
                                }
                                if (total > cust_limit)
                                {
                                    flag = true;//Amount exceeded
                                    custlimit = 1;
                                    //custlimitmsg = "You have been registered in " + days + " days ago. By these days limit has been exceeded. " + msg + "";
                                    custlimitmsg = "We require further documents to continue with this transfer. Please upload Source of funds like Bank Statement or Salary slip or Loan document or any other relevant document.";

                                    string notification_icon = "transaction-limit-exceeded.jpg";
                                    string notification_message = "<span class='cls-admin'>The " + days + " days limit for personal transaction after registration has been <strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                            }
                        }
                    }
                }
                //Check Daily Transfer Count perm
                chkdailycount = 1;
                dr = dt.Select("PID=59");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        chkdailycount = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                //Check daily limit perm
                chkdailylimit = 1;
                dr = dt.Select("PID=26");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        chkdailylimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                dds = null;
                if (chkdailylimit == 0 || chkdailycount == 0)
                {
                    _cmd = new MySqlCommand("customer_transferamount_minmax");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    dds = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                }
                //Check Daily Transfer Count
                if (chkdailycount == 0)
                {
                    if (dds.Rows.Count > 0)
                    {
                        int TotalDailyTransfer_count = Convert.ToInt32(dds.Rows[0]["Daily_Transfer_Count"]);
                        _cmd = new MySqlCommand("CustTotal_Amount");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_From_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_To_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                        DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        if ((sd.Rows.Count + 1) > TotalDailyTransfer_count)
                        {
                            string notification_icon = "tranfer-limit-exceeded.jpg";
                            string notification_message = "<span class='cls-admin'>Daily transfer count <strong class='cls-cancel'>reached.</strong></span><span class='cls-customer'></span>";
                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                            daily_transfer_count = 1;// count exceeded
                            daily_transfer_msg = "We are unable to process your transfer request at the moment. Please contact Support Team with your transfer request.";

                            string message = "";
                            try
                            {
                                DataTable dtcompanydetails = (DataTable)CompanyInfo.GetBaseCurrencywisebankdetails(t.Client_ID, t.FromCurrency_Code, t.PaymentDepositType_ID, t.DeliveryType_Id);

                                if (dtcompanydetails != null && dtcompanydetails.Rows.Count > 0)
                                {
                                    foreach (DataRow drk in dtcompanydetails.Rows)
                                    {
                                        if (drk["Company_Email"] != "" && drk["Company_Email"] != null && drk["Company_mobile"] != "" && drk["Company_mobile"] != null)
                                        {
                                            message = " You can call us at <a href='tel:" + drk["Company_mobile"] + "'>" + drk["Company_mobile"] + "</a> or " +
                            "send email to <a href='mailto:" + drk["Company_Email"] + "'>" + drk["Company_Email"] + "</a>. Thank You.";
                                        }
                                        else if (drk["Company_mobile"] != "" && drk["Company_mobile"] != null)
                                        {
                                            message = message + " You can call us at <a href='tel:" + drk["Company_mobile"] + "'>" + drk["Company_mobile"] + "</a>. Thank You.";
                                        }
                                        else if (drk["Company_Email"] != "" && drk["Company_Email"] != null)
                                        {
                                            message = message + " You can send email to <a href='mailto:" + drk["Company_Email"] + "'>" + drk["Company_Email"] + "</a>. Thank You.";
                                        }
                                        break;
                                    }
                                }
                            }
                            catch (Exception egx) { }
                            daily_transfer_msg = daily_transfer_msg + message;

                            try
                            {
                                DataTable dt_notif = CompanyInfo.set_notification_data(18); //Daily count Exceed
                                if (dt_notif.Rows.Count > 0)
                                {
                                    int SMS = Convert.ToInt32(dt_notif.Rows[0]["SMS"]);
                                    int Email = Convert.ToInt32(dt_notif.Rows[0]["Email"]);
                                    int Notif_status = Convert.ToInt32(dt_notif.Rows[0]["Notification"]);
                                    string notification_msg = Convert.ToString(dt_notif.Rows[0]["notification_msg"]);
                                    //if (notification_msg.Contains("[Benf_name]") == true)
                                    //{
                                    //    notification_msg = notification_msg.Replace("[Benf_name]", Convert.ToString(Beneficiary_Name));
                                    //}

                                    int i = CompanyInfo.check_notification_perm(Convert.ToString(Customer_ID), t.Client_ID, t.Branch_ID, 3, 18, Convert.ToDateTime(t.Record_Insert_DateTime), 1, SMS, Email, Notif_status, "App - Daily Count Notification - 18", notification_msg, _srvTransactionContext);
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            #region createtoken
                            try
                            {
                                SendMoneyToken = ""; RewardToken = "";
                                sendhashexpire = Convert.ToDateTime("0001-01-01");
                            }
                            catch { }
                            #endregion createtoken
                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                          PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                          0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                          transfer_count_days, paywithwallet, PrimaryIdmsg);

                            return ds;
                        }
                        if ((sd.Rows.Count + 1) == TotalDailyTransfer_count)
                        {
                            daily_transfer_count = -1;
                        }
                    }
                }
                //Check daily limit 
                if (chkdailylimit == 0)
                {
                    if (dds.Rows.Count > 0)
                    {
                        double Daily_Transfer_Limit = Convert.ToDouble(dds.Rows[0]["Daily_Transfer_Limit"]);
                        //get todays total transaction amount
                        DateTime From_Date = dateTime.Date;
                        DateTime To_Date = dateTime.Date;
                        _cmd = new MySqlCommand("CustTotal_Amount");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                        DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                        total = 0;
                        if (sd.Rows.Count > 0)
                        {
                            for (int j = 0; j < sd.Rows.Count; j++)
                            {
                                double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                                double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                                total = total + AmountInGBP;// + fees;
                                total_cust = total_cust + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                                if (Convert.ToInt32(sd.Rows[j]["Beneficiary_ID"]) == t.Beneficiary_ID)
                                {
                                    total_benf = total_benf + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                                }
                            }
                        }

                        if ((total + t.AmountInGBP) > Daily_Transfer_Limit)
                        {
                            string notification_icon = "tranfer-limit-exceeded.jpg";
                            string notification_message = "<span class='cls-admin'>Daily transfer limit<strong class='cls-cancel'> reached.</strong></span><span class='cls-customer'></span>";
                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                            if (Convert.ToString(dds.Rows[0]["set_compliancealert"]) == "0")
                            {
                                TotalCustAmount = total;
                                dailylimit = 2;//complaince alert
                                dailylimitmsg = "Your Daily Limit is exceeded. For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                try
                                {
                                    DataTable dt_notif = CompanyInfo.set_notification_data(68); //Daily Limit Exceed
                                    if (dt_notif.Rows.Count > 0)
                                    {
                                        int SMS = Convert.ToInt32(dt_notif.Rows[0]["SMS"]);
                                        int Email = Convert.ToInt32(dt_notif.Rows[0]["Email"]);
                                        int Notif_status = Convert.ToInt32(dt_notif.Rows[0]["Notification"]);
                                        string notification_msg = Convert.ToString(dt_notif.Rows[0]["notification_msg"]);
                                        //if (notification_msg.Contains("[Benf_name]") == true)
                                        //{
                                        //    notification_msg = notification_msg.Replace("[Benf_name]", Convert.ToString(Beneficiary_Name));
                                        //}

                                        int i = CompanyInfo.check_notification_perm(Convert.ToString(Customer_ID), t.Client_ID, t.Branch_ID, 3, 68, Convert.ToDateTime(t.Record_Insert_DateTime), 1, SMS, Email, Notif_status, "App - Daily Limit Notification - 68", notification_msg, _srvTransactionContext);
                                    }
                                }
                                catch (Exception ex)
                                {
                                }
                                #region createtoken
                                try
                                {
                                    SendMoneyToken = ""; RewardToken = "";
                                    sendhashexpire = Convert.ToDateTime("0001-01-01");
                                }
                                catch { }
                                #endregion createtoken
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                            else
                            {
                                MySqlCommand cmd_sof = new MySqlCommand("active_Sof_Count");
                                cmd_sof.CommandType = CommandType.StoredProcedure;
                                cmd_sof.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                cmd_sof.Parameters.AddWithValue("_Id", t.Client_ID);
                                cmd_sof.Parameters.AddWithValue("_Record_Insert_Datetime", t.Record_Insert_DateTime);
                                DataTable dt_sof = db_connection.ExecuteQueryDataTableProcedure(cmd_sof);
                                if (Convert.ToInt32(dt_sof.Rows[0]["SOf_Count"]) <= 3)
                                {
                                    uploadSOF = 0;
                                    dailylimit = 1;
                                    dailylimitmsg = "Your Daily Limit is exceeded. " + msg + "";
                                    TotalCustAmount = total;
                                    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;

                                }
                                else
                                {
                                    TotalCustAmount = total;
                                    dailylimit = 2;//complaince alert
                                    dailylimitmsg = "Your Daily Limit is exceeded. For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                    try
                                    {
                                        DataTable dt_notif = CompanyInfo.set_notification_data(68); //Daily Limit Exceed
                                        if (dt_notif.Rows.Count > 0)
                                        {
                                            int SMS = Convert.ToInt32(dt_notif.Rows[0]["SMS"]);
                                            int Email = Convert.ToInt32(dt_notif.Rows[0]["Email"]);
                                            int Notif_status = Convert.ToInt32(dt_notif.Rows[0]["Notification"]);
                                            string notification_msg = Convert.ToString(dt_notif.Rows[0]["notification_msg"]);
                                            

                                            int i = CompanyInfo.check_notification_perm(Convert.ToString(Customer_ID), t.Client_ID, t.Branch_ID, 3, 68, Convert.ToDateTime(t.Record_Insert_DateTime), 1, SMS, Email, Notif_status, "App - Daily Limit Notification - 68", notification_msg,context);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;


                                }

                                //if (uploadSOF != 2)
                                //{
                                //    uploadSOF = 0;
                                //    dailylimit = 1;
                                //    dailylimitmsg = "Your Daily Limit is exceeded. " + msg + "";
                                //    TotalCustAmount = total;
                                //    SOFdocupload = "ON"; TransactionStartdate = dateTime;
                                //    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                // PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                // 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                // transfer_count_days, paywithwallet, PrimaryIdmsg);

                                //    return ds;
                                //}
                            }
                        }
                    }
                }
                else
                {

                    DateTime From_Date = dateTime.Date;
                    DateTime To_Date = dateTime.Date;
                    _cmd = new MySqlCommand("CustTotal_Amount");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                    DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                    total = 0;
                    if (sd.Rows.Count > 0)
                    {
                        for (int j = 0; j < sd.Rows.Count; j++)
                        {
                            double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                            double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                            total = total + AmountInGBP;// + fees;
                            total_cust = total_cust + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                            if (Convert.ToInt32(sd.Rows[j]["Beneficiary_ID"]) == t.Beneficiary_ID)
                            {
                                total_benf = total_benf + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                            }
                        }
                    }


                }
                try
                {
                    DateTime dt1 = dateTime.Date;//DateTime.Now.Date;
                    DateTime From_Date = dt1.Date.AddYears(-1);
                    DateTime To_Date = dt1;
                    _cmd = new MySqlCommand("CustTotal_Amount");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                    DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                    //total = 0;
                    if (sd.Rows.Count > 0)
                    {
                        for (int j = 0; j < sd.Rows.Count; j++)
                        {
                            double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                            double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);

                            if (Convert.ToInt32(sd.Rows[j]["Beneficiary_ID"]) == t.Beneficiary_ID)
                            {
                                total_benf_year = total_benf_year + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                            }
                        }
                    }

                }
                catch (Exception ex) { }

                //Start Parth added for total beneficiary amount, total customer amount
                #region Get total beneficiary amount, total customer amount
                try
                {
                    DateTime Record_Insert_DateTime = Convert.ToDateTime(dCustdetails.Rows[0]["Record_Insert_DateTime"]); //Customer registered datetime
                    DateTime From_Date = Record_Insert_DateTime.Date;
                    DateTime To_Date = dateTime.Date;   //DateTime.Now.Date;
                    _cmd = new MySqlCommand("CustTotal_Amount");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                    DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                    //total = 0;
                    if (sd.Rows.Count > 0)
                    {                        
                        total_benf = 0;
                        total_cust = 0;
                        
                        for (int j = 0; j < sd.Rows.Count; j++)
                        {
                            double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                            double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                            total_cust = total_cust + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                            if (Convert.ToInt32(sd.Rows[j]["Beneficiary_ID"]) == t.Beneficiary_ID)
                            {
                                total_benf = total_benf + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                            }
                        }
                    }
                }
                catch (Exception ex) 
                {
                    _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("Exception for Address" + ex + "Customer ID: " + Customer_ID + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "Get total beneficiary amount & customer amount in Check Limit", t.CB_ID, t.Client_ID, "Send Money Step 2", _srvTransactionContext));
                }
                #endregion Get total beneficiary amount, total customer amount
                //End Parth added for total beneficiary amount, total customer amount

                //Check Collection Limit
                int chkcollectiontypelimit = 1;
                int collectiontypelimit = 0; string collectiontypelimitmsg = "";
                dr = dt.Select("PID=28");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        chkcollectiontypelimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                if (chkcollectiontypelimit == 0)
                {
                    _cmd = new MySqlCommand("GetPayDepositTypes");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_where", " and PaymentDepositType_ID=" + t.PaymentDepositType_ID);
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_TransferTypeFlag", 0);
                    DataTable pd1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                    if (pd1.Rows.Count > 0 && t.checklimit_step == 0)
                    {
                        double collimit = Convert.ToDouble(pd1.Rows[0]["Max_Amount"]);
                        if (collimit < t.AmountInGBP)
                        {
                            collectiontypelimit = 1;
                            collectiontypelimitmsg = "You can only send money upto: " + collimit + " for selected collection type.";
                            #region createtoken
                            try
                            {
                                SendMoneyToken = ""; RewardToken = "";
                                sendhashexpire = Convert.ToDateTime("0001-01-01");
                            }
                            catch { }
                            #endregion createtoken
                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, paymenttypelimit,
                         paymenttypelimitmsg, collectiontypelimit, collectiontypelimitmsg, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                            return ds;
                        }
                    }
                }


                try //vyankatesh change for proof of address
                {
                    int POA_idupload = 1;
                    dr = dt.Select("PID=207"); // Mandatory Address proof document
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            POA_idupload = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    limit_activity = limit_activity + " Check Customer Proof OF Address Permission Is : " + POA_idupload;


                    
                    if (POA_idupload == 0)
                    {
                        //For Address proof
                        _cmd = new MySqlCommand("CheckIDExpiry");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_IDType_ID", 2);
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        DataTable tbl = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        
                       
                        if (tbl.Rows.Count == 0)
                        {
                            if (perm_primaryid_as_POA == 0)
                            {
                                DateTime dtnow = dateTime.Date;
                                _cmd = new MySqlCommand("CheckIDExpiry");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                DataTable tblp1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                if (tblp1.Rows.Count > 0)
                                {
                                    string ExpDate = Convert.ToString(tblp1.Rows[0]["SenderID_ExpiryDate"]);
                                    if (ExpDate != "" && ExpDate != null && ExpDate != "VGrYRT2Em7s=")
                                    {
                                        DateTime dtexp = DateTime.ParseExact(Convert.ToDateTime(ExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                        if (dtnow < dtexp) //check expire
                                        {
                                            if (Convert.ToInt32(tblp1.Rows[0]["Gbg_Addressmatch_Flag"]) == 1)
                                            {
                                                string InsDate = Convert.ToString(tblp1.Rows[0]["Record_Insert_DateTime"]);
                                                DateTime InsertDate = DateTime.ParseExact(Convert.ToDateTime(InsDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                DateTime two_year_exp_date = InsertDate.AddYears(2); //document valid for 2 year from record insert date
                                                if (dtnow > two_year_exp_date) //document valid for 2 year from record insert date
                                                {
                                                    IsValidID = 2;
                                                    IDUploadmsg = "ID3 Global AML Check Primary Id As Proof of Address of selected customer " + Convert.ToString(tblp1.Rows[0]["First_Name"]) + " is expired.";
                                                }
                                                else
                                                {
                                                    var activitys = "ID3 Global AML Check Address is Mactched of Primary Id and this document id is consider as Proof of Address is valid Document ID : " + Convert.ToString(tblp1.Rows[0]["SenderID_ID"]);
                                                    CompanyInfo.InsertActivityLogDetails(activitys, t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "checkAllLimits", t.CB_ID, t.Client_ID, "srvSendMoney CheckAllLimits", _srvTransactionContext);
                                                }
                                            }
                                            else
                                            {
                                                IsValidID = 2;
                                                IDUploadmsg = "Please upload an Address Proof document," +
                                                    " for example Driving license or Bank Statement or Utility Bill.";
                                                POA_activity += " 5179 :  Sender Id : " + Convert.ToString(tblp1.Rows[0]["SenderID_ID"]);
                                            }
                                        }
                                        else
                                        {
                                            IsValidID = 2;
                                            IDUploadmsg = "Please upload an Address Proof document," +
                                                " for example Driving license or Bank Statement or Utility Bill.";
                                            POA_activity += " 5187 :  Sender Id : " + Convert.ToString(tblp1.Rows[0]["SenderID_ID"]);
                                        }
                                    }
                                    else
                                    {
                                        IsValidID = 2;
                                        IDUploadmsg = "Please upload an Address Proof document," +
                                            " for example Driving license or Bank Statement or Utility Bill.";
                                        POA_activity += " 5195";
                                    }
                                    if (IsValidID == 2)
                                    {
                                        //No records found
                                        IsValidID = 2;
                                        IDUploadmsg = "Please upload an Address Proof document," +
                                            " for example Driving license or Bank Statement or Utility Bill.";

                                        #region createtoken
                                        try
                                        {
                                            SendMoneyToken = ""; RewardToken = "";
                                            sendhashexpire = Convert.ToDateTime("0001-01-01");
                                        }
                                        catch { }
                                        #endregion createtoken

                                        sof = 0;
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                }
                                else
                                {

                                    //No records found
                                    IsValidID = 2;
                                    IDUploadmsg = "Please upload an Address Proof document," +
                                        " for example Driving license or Bank Statement or Utility Bill.";

                                    POA_activity += " 5230 ";
                                    #region createtoken
                                    try
                                    {
                                        SendMoneyToken = ""; RewardToken = "";
                                        sendhashexpire = Convert.ToDateTime("0001-01-01");
                                    }
                                    catch { }
                                    #endregion createtoken

                                    sof = 0;
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                     PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                     transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }

                            }
                            else
                            {
                                //No records found
                                IsValidID = 2;
                                IDUploadmsg = "Please upload an Address Proof document," +
                                    " for example Driving license or Bank Statement or Utility Bill.";

                                #region createtoken
                                try
                                {
                                    SendMoneyToken = ""; RewardToken = "";
                                    sendhashexpire = Convert.ToDateTime("0001-01-01");
                                }
                                catch { }
                                #endregion createtoken
                                
                                sof = 0;
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    string stattus = (string)CompanyInfo.InsertErrorLogDetails(ex.Message.Replace("\'", "\\'"), t.User_ID, "CheckAllLimits : Check POA on Perm", t.CB_ID, t.Client_ID);
                }




                //Check ID Upload on perm
                dr = dt.Select("PID=43");
                if (dr.Count() > 0)
                {
                    foreach (DataRow drr in dr)
                    {
                        idperm = Convert.ToInt32(drr["Status_ForCustomer"]);
                    }
                }
                if (idperm == 0)
                {
                    _cmd = new MySqlCommand("Check_PrimaryExpiry");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    DataTable pd1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                    if (pd1.Rows.Count > 0)
                    {
                        int ICount = Convert.ToInt32(pd1.Rows[0]["count"]);
                        if (ICount == 1)
                        {
                            IsValidID = 1;
                            IDUploadmsg = "Please upload an identification document, for example Passport or Driving license. Due to regulatory obligations we require to confirm your identity before proceeding with your money transfer request.";
                            #region createtoken
                            try
                            {
                                SendMoneyToken = ""; RewardToken = "";
                                sendhashexpire = Convert.ToDateTime("0001-01-01");
                            }
                            catch { }
                            #endregion createtoken
                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                            return ds;
                        }
                    }
                    else
                    {
                        //No records found
                        IsValidID = 1;
                        IDUploadmsg = "Please upload an identification document, for example Passport or Driving license. Due to regulatory obligations we require to confirm your identity before proceeding with your money transfer request.";
                        #region createtoken
                        try
                        {
                            SendMoneyToken = ""; RewardToken = "";
                            sendhashexpire = Convert.ToDateTime("0001-01-01");
                        }
                        catch { }
                        #endregion createtoken
                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                        return ds;
                    }
                }
                else
                {
                    IsValidID = 3;//Flag for Perm off
                }

                if (check_sec_limit == 0 && amllimit == 10)
                {
                    amllimit = 10;
                    amlmsg = "Is your current address is valid address?";

                    try
                    {
                        string customerAddress = GetCustomerAddress(t.Client_ID, Customer_ID);
                        if (String.IsNullOrEmpty(customerAddress))
                        {
                            customerAddress = "current address";
                        }
                        amlmsg = $"Is your {customerAddress} is valid address?";
                    }
                    catch (Exception ex)
                    {
                        amlmsg = "Is your current address is valid address?";
                        _ = Task.Run(() => CompanyInfo.InsertActivityLogDetails("Exception for Address" + ex + "Customer ID: " + Customer_ID + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "Send-Get Base Data", t.CB_ID, t.Client_ID, "Send Money Step 2", _srvTransactionContext));
                    }


                    //HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
transfer_count_days, paywithwallet, PrimaryIdmsg);

                    return ds;
                }
                else
                {
                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                        PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, paymenttypelimit,
                        paymenttypelimitmsg, collectiontypelimit, collectiontypelimitmsg, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, total_benf, total_cust, total_benf_year,
                        transfer_count_days, paywithwallet, PrimaryIdmsg);
                    CompanyInfo.InsertActivityLogDetails("App - Customer " + CustomerName + " is on send money step 2. Customer clicked on Next. Customer ID: " + Customer_ID + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "Send-Get Base Data", t.CB_ID, t.Client_ID, "Send Money Step 2", _srvTransactionContext);
                    return ds;
                }
            }
            catch (Exception ex)
            {
                #region createtoken
                try
                {
                    SendMoneyToken = ""; RewardToken = "";
                    sendhashexpire = Convert.ToDateTime("0001-01-01");
                }
                catch { }
                #endregion createtoken
                ds.Rows.Add(1, "App: " + ex.ToString());

                var error_msg = " exception  " + ex.Message.ToString();
                error_msg = error_msg.Replace("'", "");

                string stattus = (string)CompanyInfo.InsertErrorLogDetails(error_msg.Replace("\'", "\\'"), t.User_ID, "App CheckAllLimits ", t.CB_ID, t.Client_ID);

                return ds;
            }
            finally
            {

                CompanyInfo.InsertActivityLogDetails("App - Check Limit POA Audit - " + POA_activity + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "Check Limits", t.CB_ID, t.Client_ID, "Send Money Step 2", _srvTransactionContext);
                _cmd = new MySqlCommand("UpdateTransactionJourney");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Token", token);
                _cmd.Parameters.AddWithValue("_SendMoneyToken", SendMoneyToken);
                _cmd.Parameters.AddWithValue("_RewardToken", RewardToken);
                _cmd.Parameters.AddWithValue("_SOFdocupload", SOFdocupload);
                _cmd.Parameters.AddWithValue("_sendmoneyhashexpire", sendhashexpire);
                _cmd.Parameters.AddWithValue("_TransactionStartdate", TransactionStartdate);
                _cmd.Parameters.AddWithValue("_chk_validity", DBNull.Value);
                _cmd.Parameters.AddWithValue("_flag", 4);
                _cmd.Parameters.AddWithValue("_uploadSOF", uploadSOF);
                string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
            }
        }

        public string GetCustomerAddress(int clientId, int customerId)
        {
            string fullAddress = "Address not found";

            try
            {
                using (MySqlCommand _cmd1 = new MySqlCommand("CheckAddressDetailsCustomers"))
                {
                    _cmd1.CommandType = CommandType.StoredProcedure;
                    _cmd1.Parameters.AddWithValue("_ClientId", clientId);
                    _cmd1.Parameters.AddWithValue("_Customer_ID", customerId);

                    DataTable chk_add = db_connection.ExecuteQueryDataTableProcedure(_cmd1);

                    if (chk_add.Rows.Count > 0)
                    {
                        //string postCode = Convert.ToString(chk_add.Rows[0]["Post_Code"]).Trim();
                        string houseNumber = Convert.ToString(chk_add.Rows[0]["House_Number"]).Trim();
                        string street = Convert.ToString(chk_add.Rows[0]["Street"]).Trim();
                        int cityID = Convert.ToInt32(chk_add.Rows[0]["City_ID"]);

                        string cityName = GetCityName(cityID); // Fetch city name

                        // Construct full address
                        string[] addressParts = { houseNumber, street, cityName };
                        fullAddress = string.Join(", ", addressParts.Where(part => !string.IsNullOrWhiteSpace(part)));
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error fetching customer address: " + ex.Message);
            }

            return fullAddress;
        }
        public string GetCityName(int cityId)
        {
            string cityName = "";

            try
            {
                using (MySqlCommand cmdCity = new MySqlCommand("sp_select_city_detailsbyid"))
                {
                    cmdCity.CommandType = CommandType.StoredProcedure;
                    cmdCity.Parameters.AddWithValue("_whereclause", cityId);

                    DataTable chk_city = db_connection.ExecuteQueryDataTableProcedure(cmdCity);
                    cityName = Convert.ToString(chk_city.Rows[0]["City_Name"]).Trim();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error fetching city name: " + ex.Message);
            }

            return cityName;
        }
        public DataTable CheckAllLimits_old_24_2_2025(Model.Transaction t, HttpContext context)
        {
            _srvTransactionContext = context;
            //int chk_validity = 1;
            //string SendMoneyToken = "";
            //string RewardToken = "";
            //DateTime sendhashexpire = new DateTime();
            //HttpContext.Current.Session["chk_validity"] = 1;
            //HttpContext.Session.SetString(SessionName, "Jarvik");
            context.Session.SetString("chk_validity", "1");
            int check_sec_limit = 1; int Validity_POA = 1; int chk_sec_validity = 1;
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            MySqlCommand _cmd = new MySqlCommand("GetPermissions");
            _cmd.CommandType = CommandType.StoredProcedure;
            _cmd.Parameters.AddWithValue("_whereclause", "");
            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            DataTable dt = db_connection.ExecuteQueryDataTableProcedure(_cmd);

            DataTable ds = new DataTable();
            ds.Columns.Add("Status", typeof(int));
            ds.Columns.Add("Errormessage", typeof(string));
            using (MySqlConnection con = new MySqlConnection(db_connection.ConnectionStringStatic()))
            {
                if (con.State != ConnectionState.Open)
                    con.Open();
                try
            {
                
                    int blacklisted = 1;
                    DataRow[] dr = dt.Select("PID=41");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            blacklisted = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    DataRow[] dr1 = dt.Select("PID=138");
                    if (dr1.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {

                            chk_sec_validity = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }

                    ds.Columns.Add("BlacklistedFlag", typeof(int)); ds.Columns.Add("Blacklistedmessage", typeof(string));
                    //Monthly Limit && SOF perm status
                    ds.Columns.Add("SourceofFunds", typeof(int)); ds.Columns.Add("exceedAmount", typeof(int));
                    ds.Columns.Add("monlimit", typeof(int)); ds.Columns.Add("monthlylimitmsg", typeof(string));
                    //AML Limit
                    ds.Columns.Add("SOFDaysCount", typeof(int)); ds.Columns.Add("SOFDaysCount_Msg", typeof(string));
                    ds.Columns.Add("AMLlimit", typeof(int)); ds.Columns.Add("AMLlimitmsg", typeof(string)); ds.Columns.Add("SourceOfFunds_Limit", typeof(double));
                    ds.Columns.Add("PrimaryID_Limit", typeof(double)); ds.Columns.Add("SecondaryID_Limit", typeof(double));
                    //Customer limit
                    ds.Columns.Add("Custlimit", typeof(int)); ds.Columns.Add("Custlimitmsg", typeof(string));
                    //Daily limit
                    ds.Columns.Add("daily_transfer_count", typeof(int)); ds.Columns.Add("daily_transfer_msg", typeof(string));
                    ds.Columns.Add("dailylimit", typeof(int)); ds.Columns.Add("Daily_Limit_Message", typeof(string)); ds.Columns.Add("TotalCustAmount", typeof(string));
                    //Payment type and collection type limit
                    ds.Columns.Add("paymenttypelimit", typeof(int)); ds.Columns.Add("paymenttypelimitmsg", typeof(string));
                    ds.Columns.Add("collectiontypelimit", typeof(int)); ds.Columns.Add("collectiontypelimitmsg", typeof(string));
                    //Check ID Upload
                    ds.Columns.Add("IsValidID", typeof(int)); ds.Columns.Add("IDUploadmsg", typeof(string));
                    //Restrict Send Money Proceed 
                    ds.Columns.Add("AllowProceedFlag", typeof(int)); ds.Columns.Add("AllowProceedFlag_Msg", typeof(string));
                    ds.Columns.Add("TotalBenfAmount", typeof(double)); ds.Columns.Add("TotalCustAmount1", typeof(double));
                    ds.Columns.Add("TotalBenfAmtYr", typeof(double));
                    ds.Columns.Add("transfer_count_days", typeof(int)); ds.Columns.Add("paywithwallet", typeof(int));
                    ds.Columns.Add("PrimaryIdmsg", typeof(string));
                    bool flag = false; int paywithwallet = 0;
                    int ExpiryMonths = 3, count = 0, sof = 1, monlimit = 0, amllimit = 0, custlimit = 0, dailylimit = 0, IsValidID = 0, daily_transfer_count = 0, SOFDaysCount = 0, transfer_count_days = 0;
                    double exceedAmt = 0, SourceOfFunds_Limit = 0, PrimaryID_Limit = 0, SecondaryID_Limit = 0, TotalCustAmount = 0;
                    string Blacklistemsg = "", monthlylimitmsg = "", amlmsg = "", custlimitmsg = "", dailylimitmsg = "", IDUploadmsg = "", daily_transfer_msg = "", SOFDaysCount_Msg = "";
                    string basecurrency = "", PrimaryIdmsg = "";
                    int AllowProceedFlag = 0; string AllowProceedFlag_Msg = "";
                    //t.Customer_ID = Convert.ToInt32(dictObjMain["Customer_ID"]);
                    //t.Beneficiary_ID = Convert.ToInt32(dictObjMain["Beneficiary_ID"]);
                    DateTime dateTime = DateTime.Now;
                    DataTable cdt = (DataTable)CompanyInfo.get(t.Client_ID, _srvTransactionContext);
                    if (cdt.Rows.Count > 0)
                    {
                        basecurrency = Convert.ToString(cdt.Rows[0]["BaseCurrency_Code"]);
                        string timezone = Convert.ToString(cdt.Rows[0]["BaseCurrency_Timezone"]);
                        if (timezone != "" && timezone != null)
                        {
                            var britishZone = TimeZoneInfo.FindSystemTimeZoneById("" + timezone + "");
                            dateTime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                        }
                        if (Convert.ToString(cdt.Rows[0]["ExpiryMonths"]) != "" && Convert.ToString(cdt.Rows[0]["ExpiryMonths"]) != null)
                            ExpiryMonths = Convert.ToInt32(cdt.Rows[0]["ExpiryMonths"]);
                        Validity_POA = Convert.ToInt32(cdt.Rows[0]["Validity_POA"]); ;
                    }
                    //string Record_DateTime = dateTime.ToString("yyyy-MM-dd HH:mm:ss");
                    string Record_DateTime = CompanyInfo.gettime(t.Client_ID, Customer_ID.ToString(), Convert.ToInt32(cdt.Rows[0]["BaseCountry_ID"]), _srvTransactionContext);
                    if (Record_DateTime != null && Record_DateTime != "")
                    {
                        dateTime = Convert.ToDateTime(Record_DateTime);
                    }
                    t.Record_Insert_DateTime = dateTime.Date.ToString("yyyy-MM-dd");

                    if (t.PaymentType_ID == 7)
                    {
                        paywithwallet = 1;
                        _cmd = new MySqlCommand("SP_GetWalletDetails");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_where", " and wallet_table.AgentFlag=1 and currency_master.Currency_Code='" + t.FromCurrency_Code + "'");

                        CompanyInfo.InsertrequestLogTracker("wallet condition: Customer_ID:" + Customer_ID + " and _where: "+ t.FromCurrency_Code, 0, 0, 0, 0, "CheckLimit", Convert.ToInt32(0), Convert.ToInt32(0), "", context);

                        DataTable dw = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        _cmd.Dispose();
                        if (dw.Rows.Count == 1)
                        {
                            double balance = Convert.ToDouble(dw.Rows[0]["Wallet_balance"]);
                            if (balance >= (t.AmountInGBP + t.Transfer_Fees))
                            {
                                paywithwallet = 0;//sufficient Balance

                            }
                            else
                            { // added by siddhi
                                paywithwallet = 1;//InSufficient Balance
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                    }
                    if (blacklisted == 0)
                    {
                        _cmd = new MySqlCommand("Customer_RegDetails");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        DataTable d2 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        _cmd.Dispose();
                        if (d2.Rows.Count > 0)
                        {
                            string cnt = Convert.ToString(d2.Rows[0]["Blacklisted_flag"]);
                            if (cnt != "" && cnt != null)
                            {
                                count = Convert.ToInt32(cnt);
                                if (count == 1)
                                {
                                    Blacklistemsg = "Sorry, it looks like we need more information from you. Please contact us for Sending Money.";
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                      PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                      0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                      transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                                else
                                {
                                    Blacklistemsg = "";
                                }
                            }
                        }
                    }
                    else
                    {
                        Blacklistemsg = "";
                    }



                    //Id Upload Redirection 
                    int idupload = 1;
                    dr = dt.Select("PID=110");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            idupload = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    if (idupload == 0)
                    {
                        _cmd = new MySqlCommand("sp_IDUpload_permission");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        int Country_ID = Convert.ToInt32(cdt.Rows[0]["BaseCountry_ID"]);
                        t.Record_Insert_DateTime = CompanyInfo.gettime(t.Client_ID, Customer_ID.ToString(), Country_ID, _srvTransactionContext);
                        //gettime(t.Client_ID, Customer_ID, Country);
                        string dateTimeString8 = dateTime.ToString("dd/MM/yyyy");
                        dateTimeString8 = dateTimeString8.Replace("-", "/");
                        //_cmd.Parameters.AddWithValue("_whereclause", Customer_ID);
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_whereclause", " and documents_details.Customer_ID = '" + Customer_ID + "' and documents_details.IDType_ID = 1 and (SenderID_ExpiryDate)<= " + dateTimeString8 + " = 0");
                        DataTable dt_id1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        int Expired_ID = 0; int verified = 0;
                        if (dt_id1 != null && dt_id1.Rows.Count > 0)
                        {

                            for (int i = 0; i < dt_id1.Rows.Count; i++)
                            {
                                Expired_ID = Convert.ToInt32(dt_id1.Rows[0]["Expired"].ToString());
                                verified = Convert.ToInt32(dt_id1.Rows[0]["Verfied"].ToString());
                            }

                        }
                        if (Expired_ID == 0 && verified != 0)
                        {
                            PrimaryIdmsg = "Thank you for uploading your photo identification document. Your ID verification is under process.";

                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                        PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                        0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                        transfer_count_days, paywithwallet, PrimaryIdmsg);

                            return ds;
                        }

                    }

                    //Check how many times limits exceeded and Restrict if count is exceeded
                    int sendmoneypro = 1;
                    dr = dt.Select("PID=44");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            sendmoneypro = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }

                    if (sendmoneypro == 0)
                    {
                        _cmd = new MySqlCommand("Get_DailySOFCount");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);

                        DataTable d2 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        _cmd.Dispose();
                        if (d2.Rows.Count > 0)
                        {
                            AllowProceedFlag = Convert.ToInt32(d2.Rows[0]["AllowProceed"]);
                            int Trans_Count = Convert.ToInt32(d2.Rows[0]["Trans_Count"]);
                            int ProceedCount_AftLimitExceed = Convert.ToInt32(d2.Rows[0]["ProceedCount_AftLimitExceed"]);
                            if (ProceedCount_AftLimitExceed > 0)
                            {
                                if (AllowProceedFlag > 0)
                                {
                                    AllowProceedFlag_Msg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                    PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                     0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                    transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                            }
                            else if (ProceedCount_AftLimitExceed == 0 && Trans_Count != 0)
                            {
                                AllowProceedFlag = 1;
                                AllowProceedFlag_Msg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                          PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                          0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                          transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                    }

                    // Check monthly wise limit. if exceeds, ask for sof on permission.
                    int asksof = 1;
                    dr = dt.Select("PID=20");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            asksof = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    string msg = "Do you want to continue";
                    if (asksof == 0)
                    {
                        sof = 0;
                        msg = "Please provide us with more documents.";
                    }
                    //t.whereclause = "";
                    //t.AmountInBase = Convert.ToDouble(dictObjMain["Amount"]);

                    int chkmonthlimit = 1;
                    dr = dt.Select("PID=23");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkmonthlimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    //Check Payment limit
                    int paymenttypelimit = 0; string paymenttypelimitmsg = "";
                    int chkpaymenttypelimit = 1;
                    dr = dt.Select("PID=27");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkpaymenttypelimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    if (chkpaymenttypelimit == 0)
                    {
                        _cmd = new MySqlCommand("PaymentType_Limit");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_PType_ID", t.PaymentType_ID);
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        DataTable pd = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        if (pd.Rows.Count > 0)
                        {
                            double paylimit = Convert.ToDouble(pd.Rows[0]["Max_Amount_Limit"]);
                            if (paylimit < t.AmountInGBP)
                            {
                                paymenttypelimit = 1;
                                paymenttypelimitmsg = "You can only send money upto: " + paylimit + " for selected payment type.";
                                #region createtoken
                                try
                                {
                                    //SendMoneyToken = "";
                                    //RewardToken = "";
                                    //sendhashexpire = new DateTime();
                                    //HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                    //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                                }
                                catch { }
                                #endregion createtoken
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, paymenttypelimit,
                             paymenttypelimitmsg, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                    }

                    int chkSOFlimit = 1;
                    dr = dt.Select("PID=25");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkSOFlimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }

                    DataTable d1 = null;
                    if (chkSOFlimit == 0)//|| chkmonthlimit == 0
                    {
                        _cmd = new MySqlCommand("chkCustSOF");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        d1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    }
                    //DateTime startDate = new DateTime(2023, 1, 1);
                    //DateTime currentDate = DateTime.Now;
                    //DateTime endDate = startDate.AddDays(30);

                    //while (currentDate > endDate)
                    //{
                    //    startDate = endDate;
                    //    endDate = startDate.AddDays(30);
                    //}

                    //create token before Skip and proceed limits starts
                    #region createtoken
                    string stringtohash = "myMTSHashingStarts" + t.Beneficiary_ID + t.Customer_ID + Convert.ToDouble(t.GCCAmountInGBP) + t.AmountInPKR + t.Transfer_Fees +
                        t.Exchange_Rate + t.PaymentDepositType_ID + t.PaymentType_ID + t.DeliveryType_Id + "myMTSHashingEnds";
                    string sendmoneyhash = CompanyInfo.GetHash(stringtohash);
                    DateTime sendmoneyhashexpire = dateTime.AddMinutes(15);
                    try
                    {
                        //SendMoneyToken = sendmoneyhash;
                        //sendhashexpire = sendmoneyhashexpire;
                        //HttpContext.Current.Session["SendMoneyToken"] = sendmoneyhash;
                        //HttpContext.Current.Session["sendmoneyhashexpire"] = sendmoneyhashexpire;
                    }
                    catch { }

                    #endregion
                    //HttpContext.Current.Session["SOFdocupload"] = "No";

                    /** New Monthly Limit **/
                    #region Monthly limit
                    if (chkmonthlimit == 0)
                    {
                        _cmd = new MySqlCommand("Customer_MonthlyLimit");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                        if (d.Rows.Count != 0)
                        {
                            //check perms
                            dr = dt.Select("PID=118 or PID=119 or PID=120 or PID=126");//3months,6,12 and 1month permissions
                            int PID118 = 3, PID119 = 6, PID120 = 12, PID126 = 1;
                            if (dr.Count() > 0)
                            {
                                foreach (DataRow drr in dr)
                                {
                                    if (Convert.ToInt32(drr["PID"]) == 118) { PID118 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                    else if (Convert.ToInt32(drr["PID"]) == 119) { PID119 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                    else if (Convert.ToInt32(drr["PID"]) == 120) { PID120 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                    else if (Convert.ToInt32(drr["PID"]) == 126) { PID126 = Convert.ToInt32(drr["Status_ForCustomer"]); }
                                }
                            }
                            for (int i = 0; i < d.Rows.Count; i++)
                            {
                                int month = Convert.ToInt32(d.Rows[i]["Months_For_Limit"]);

                                double amount = Convert.ToDouble(d.Rows[i]["Transaction_Limit"]);
                                DateTime regdate = Convert.ToDateTime(d.Rows[i]["StartDate"]);
                                DateTime dt1 = regdate.Date.AddMonths(month);
                                double totgbp = 0.0;
                                DateTime From_Date = regdate; DateTime To_Date = dt1;
                                if (dateTime.Date > dt1.Date)
                                {
                                    string newstartdate = ""; string newenddate = "";
                                    //Update Date to the Customer Transfer Limit
                                    for (DateTime dd = dt1; dd <= dateTime.AddMonths(month); dd = dd.AddMonths(month))
                                    {
                                        if (newstartdate == null || newstartdate == "")
                                        {
                                            if (dd.AddMonths(month) >= dateTime)//DateTime.Now)
                                            {
                                                newstartdate = dd.ToString(); //newenddate = Convert.ToString(dd.AddMonths(month));   
                                                From_Date = Convert.ToDateTime(newstartdate);
                                                To_Date = dd.AddMonths(month);
                                                string Transfer_ID = Convert.ToString(d.Rows[i]["ID"]);// Primary ID of customer transfer limit
                                                _cmd = new MySqlCommand("Update_MonthlyLimit");
                                                _cmd.CommandType = CommandType.StoredProcedure;
                                                _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd HH:mm:ss"));
                                                _cmd.Parameters.AddWithValue("_Transfer_ID", Transfer_ID);
                                                _cmd.Parameters.AddWithValue("_Amount", 0);
                                                _cmd.Parameters.AddWithValue("_Queryflag", 1);
                                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                            }
                                        }
                                    }
                                }
                                if (month == 3 && PID118 == 0 || month == 6 && PID119 == 0 || month == 12 && PID120 == 0 || month == 1 && PID126 == 0)
                                {
                                    if (Convert.ToString(d.Rows[i]["Amount_FromStartDate"]) == null || Convert.ToString(d.Rows[i]["Amount_FromStartDate"]) == "")
                                    {
                                        _cmd = new MySqlCommand("Transaction_MonthWise");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_From_Date", From_Date);
                                        _cmd.Parameters.AddWithValue("_To_Date", To_Date);
                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                        _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                        DataTable dt2 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                        if (dt2.Rows.Count > 0)
                                        {
                                            if (dt2.Rows[0]["AmountInGBP"] != null && Convert.ToString(dt2.Rows[0]["AmountInGBP"]) != "")
                                            {
                                                totgbp += Convert.ToDouble(dt2.Rows[0]["AmountInGBP"].ToString());
                                            }
                                        }
                                        _cmd = new MySqlCommand("Update_MonthlyLimit");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd HH:mm:ss"));
                                        _cmd.Parameters.AddWithValue("_Transfer_ID", Convert.ToString(d.Rows[i]["ID"]));// Primary ID of customer transfer limit
                                        _cmd.Parameters.AddWithValue("_Amount", totgbp);
                                        _cmd.Parameters.AddWithValue("_Queryflag", 2);
                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                        string success1 = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                    }
                                    else
                                    {
                                        string ss = Convert.ToString(d.Rows[i]["Amount_FromStartDate"]) ?? "0";//Convert.ToString(d.Rows[0]["Amount_FromStartDate"].ToString() == "" ? d.Rows[0]["Amount_FromStartDate"].ToString(): "0");
                                        totgbp = Convert.ToDouble(ss);
                                    }

                                    double totgbpvalue = 0.0;
                                    totgbpvalue = totgbp + t.AmountInGBP;

                                    if (totgbpvalue > Convert.ToDouble(amount))
                                    {
                                        string notification_icon = "monthly-limit-exceeded.jpg";
                                        string notification_message = "<span class='cls-admin'>Roll Over " + month + " month limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                        exceedAmt = totgbpvalue - Convert.ToDouble(amount);

                                        if (Convert.ToString(d.Rows[i]["set_compliancealert"]) == "0" || Convert.ToString(d.Rows[i]["set_compliancealert"]) == "")
                                        {
                                            monlimit = 1;//complaince alert
                                            monthlylimitmsg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                            #region createtoken
                                            try
                                            {
                                                //SendMoneyToken = "";
                                                //RewardToken = "";
                                                //sendhashexpire = new DateTime();
                                                //HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                                //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                                            }
                                            catch { }
                                            #endregion createtoken
                                        }
                                        else
                                        {
                                            monlimit = 2;//sof alert
                                            monthlylimitmsg = "Your roll over " + month + " month limit is exceeded. " + msg + "";
                                            //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                        }
                                        //"Amount Limit: " + amount + " " + basecurrency + ". Total transaction amount in " + month + " months from your registration is " + totgbpvalue + " " + basecurrency + ". " + msg + "";
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                  PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                  0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                  transfer_count_days, paywithwallet, PrimaryIdmsg);
                                        break;
                                        //return ds;
                                    }//end if amount exceeded
                                }
                            }//end for loop
                            if (monlimit > 0)
                            {
                                return ds;
                            }
                        }
                    }
                    #endregion Monthly limit


                    //Skip and proceed starts Check Source of funds limit

                    if (chkSOFlimit == 0)
                    {
                        //_cmd = new MySqlCommand("chkCustSOF");
                        //_cmd.CommandType = CommandType.StoredProcedure;
                        //_cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        //_cmd.Parameters.AddWithValue("_Customer_ID", t.Customer_ID);
                        //DataTable d1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                        #region sof
                        if (d1.Rows.Count != 0)
                        {
                            double pil = Convert.ToInt32(d1.Rows[0]["PrimaryID_Limit"]);
                            double sil = Convert.ToInt32(d1.Rows[0]["SecondaryID_Limit"]);
                            double amount = Convert.ToDouble(d1.Rows[0]["SourceOfFunds_Limit"]);
                            DateTime regdate = Convert.ToDateTime(d1.Rows[0]["StartDate"]);
                            int month = Convert.ToInt32(d1.Rows[0]["Validation_Days"]);
                            int txncount = Convert.ToInt32(d1.Rows[0]["Transfer_Count"]);
                            double AskforSOFAmount_Limit = 0;
                            if (d1.Rows[0]["AskforSOFAmount_Limit"] != null && d1.Rows[0]["AskforSOFAmount_Limit"] != "")
                                AskforSOFAmount_Limit = Convert.ToDouble(d1.Rows[0]["AskforSOFAmount_Limit"]);
                            DateTime dt11 = regdate.Date.AddDays(month);//AddMonths
                            double totgbp = 0.0;

                            string notification_icon = "", notification_message = "";
                            DateTime From_Date = regdate; DateTime To_Date = dt11;
                            if (dateTime.Date > dt11.Date)
                            {
                                string newstartdate = ""; string newenddate = "";
                                //Update Date to the Customer Transfer Limit
                                for (DateTime dd = dt11; dd <= dateTime.AddDays(month); dd = dd.AddDays(month))
                                {
                                    if (newstartdate == null || newstartdate == "")
                                    {
                                        if (dd.AddDays(month) >= dateTime)//DateTime.Now)
                                        {
                                            newstartdate = dd.ToString(); //newenddate = Convert.ToString(dd.AddMonths(month));   
                                            From_Date = Convert.ToDateTime(newstartdate);
                                            To_Date = dd.AddDays(month);
                                            string Transfer_ID = Convert.ToString(d1.Rows[0]["AML_ID"]);// Primary ID of customer transfer limit
                                            _cmd = new MySqlCommand("Update_AMLLimit");
                                            _cmd.CommandType = CommandType.StoredProcedure;
                                            _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd HH:mm:ss"));
                                            _cmd.Parameters.AddWithValue("_Transfer_ID", Transfer_ID);
                                            string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
                                        }
                                    }
                                }
                            }

                            _cmd = new MySqlCommand("Transaction_MonthWise");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_From_Date", From_Date);
                            _cmd.Parameters.AddWithValue("_To_Date", To_Date);
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                            DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                            if (dtt.Rows.Count > 0)
                            {
                                if (dtt.Rows[0]["Transaction_Count"] != null && Convert.ToString(dtt.Rows[0]["Transaction_Count"]) != "")
                                {
                                    int custTransaction_Count = Convert.ToInt32(dtt.Rows[0]["Transaction_Count"]);
                                    if (custTransaction_Count > txncount)
                                    {
                                        SOFDaysCount = 1;
                                        SOFDaysCount_Msg = "For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                        #region createtoken
                                        try
                                        {
                                            //SendMoneyToken = "";
                                            //RewardToken = "";
                                            //sendhashexpire = new DateTime();
                                            //HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                            //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                                        }
                                        catch { }
                                        #endregion createtoken
                                        //notification_icon = "tranfer-limit-exceeded.jpg";
                                        //notification_message = "<span class='cls-admin'>" + month + " days transfer count <strong class='cls-cancel'>reached.</strong></span><span class='cls-customer'></span>";
                                        //CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToInt32(t.Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0);
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                    if (custTransaction_Count == txncount)
                                    {
                                        transfer_count_days = month;
                                    }
                                }
                                if (dtt.Rows[0]["AmountInGBP"] != null && Convert.ToString(dtt.Rows[0]["AmountInGBP"]) != "")
                                {
                                    totgbp += Convert.ToDouble(dtt.Rows[0]["AmountInGBP"].ToString());
                                }
                            }
                            double totgbpvalue = 0.0;//double totgbpvalue = t.AmountInBase; //
                            totgbpvalue = totgbp + t.AmountInGBP;

                            DateTime dt1 = dateTime.Date;// DateTime.Now.Date;
                            if (totgbpvalue > pil)
                            {
                                //For Primary
                                _cmd = new MySqlCommand("CheckIDExpiry");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_IDType_ID", 1);
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                DataTable table = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                //DateTime dt3 = DateTime.Now.Date.AddDays(60);
                                if (table.Rows.Count > 0)// Check 1
                                {
                                    for (int i = 0; i < table.Rows.Count; i++)
                                    {
                                        string senPExpDate = Convert.ToString(table.Rows[i]["SenderID_ExpiryDate"]);
                                        if (senPExpDate != "" && senPExpDate != null && senPExpDate != "VGrYRT2Em7s=")
                                        {
                                            DateTime dt2 = DateTime.ParseExact(Convert.ToDateTime(senPExpDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                            CompanyInfo.InsertrequestLogTracker("ST3 dt1:" + dt1 + " and dt2:" + dt2, 0, 0, 0, 0, "CheckLimit", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                            if (dt1 > dt2)
                                            {
                                                notification_icon = "id-threshold.jpg";
                                                notification_message = "<span class='cls-admin'>ID threshold <strong>primary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                try
                                                {
                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                    if (db.Rows.Count > 0)
                                                    {
                                                    }
                                                    else
                                                    {
                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                    }
                                                }
                                                catch
                                                {

                                                }

                                                amlmsg = "Identification document is expired and need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                #region createtoken
                                                try
                                                {
                                                    //SendMoneyToken = "";
                                                    //RewardToken = "";
                                                    //sendhashexpire = new DateTime();
                                                    //HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                                    //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                                                }
                                                catch { }
                                                #endregion createtoken
                                                amllimit = 1; ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                          PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                          0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                          transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                return ds;
                                            }
                                            else
                                            {
                                                CompanyInfo.InsertrequestLogTracker("ST2 totgbpvalue:" + totgbpvalue + " and sil:"+ sil, 0, 0, 0, 0, "CheckLimit", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
                                                if (totgbpvalue > sil)// Check 2
                                                {
                                                    //For Address proof
                                                    _cmd = new MySqlCommand("CheckIDExpiry");
                                                    _cmd.CommandType = CommandType.StoredProcedure;
                                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                    _cmd.Parameters.AddWithValue("_IDType_ID", 2);
                                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                    DataTable tbl = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                                    if (tbl.Rows.Count > 0)
                                                    {
                                                        string recDate = Convert.ToString(tbl.Rows[0]["Record_Insert_DateTime"]);
                                                        DateTime indt = DateTime.ParseExact(Convert.ToDateTime(recDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                                        DateTime fifth = To_Date;// indt.Date.AddMonths(ExpiryMonths);//AddDays(150);
                                                        DateTime expDat = To_Date;
                                                        string exp = Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"]);
                                                        if (exp != null && exp != "")
                                                            expDat = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                        DateTime recDate_validity = Convert.ToDateTime(indt.AddYears(Validity_POA));
                                                        if ((indt < From_Date) || (expDat < dt1 && exp != null && exp != ""))//(indt > fifth)280823//(indt <= dt1 && dt1 >= fifth)
                                                        {
                                                            if ((expDat > dt1 && exp != null && exp != "") && recDate_validity > indt && Convert.ToInt32(chk_sec_validity) == 0)
                                                            {
                                                                check_sec_limit = 0;
                                                                amllimit = 10;
                                                            }
                                                            else
                                                            {
                                                                notification_icon = "id-threshold.jpg";
                                                                notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                                try
                                                                {
                                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                    if (db.Rows.Count > 0)
                                                                    {
                                                                    }
                                                                    else
                                                                    {
                                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                    }
                                                                }
                                                                catch
                                                                {

                                                                }
                                                                amllimit = 2;
                                                                amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                //HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                return ds;
                                                            }
                                                        }
                                                        else if (totgbpvalue > amount)// Check 3 SOF
                                                        {
                                                            //For SOF
                                                            _cmd = new MySqlCommand("CheckIDExpiry");
                                                            _cmd.CommandType = CommandType.StoredProcedure;
                                                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                            _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                                                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                            DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                            if (tbls.Rows.Count > 0)
                                                            {
                                                                string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                                                DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                                DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                                                if (exp1 != null && exp1 != "")
                                                                    expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                                if ((indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "")) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                                                {
                                                                    amllimit = 4;
                                                                    amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + ". " + msg + "";
                                                                    PrimaryID_Limit = pil;
                                                                    SecondaryID_Limit = sil;
                                                                    SourceOfFunds_Limit = amount;

                                                                    notification_icon = "id-threshold.jpg";
                                                                    notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                                    try
                                                                    {
                                                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                        cmd1.CommandType = CommandType.StoredProcedure;
                                                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                        if (db.Rows.Count > 0)
                                                                        {
                                                                        }
                                                                        else
                                                                        {
                                                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                        }
                                                                    }
                                                                    catch
                                                                    {

                                                                    }
                                                                    //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                    return ds;
                                                                }
                                                                else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                                                {
                                                                    _cmd = new MySqlCommand("Check_IfSOFExceeded");
                                                                    _cmd.CommandType = CommandType.StoredProcedure;
                                                                    _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = '" + t.FromCurrency_Code + "'");
                                                                    DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                                    int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                                                    if (tb.Rows.Count > 0)
                                                                    {
                                                                        isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                                                        SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                                                    }
                                                                    if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                                                    {
                                                                        amllimit = 4;
                                                                        amlmsg = "Source of fund amount limit is reached. " + msg + "";
                                                                        PrimaryID_Limit = pil;
                                                                        SecondaryID_Limit = sil;
                                                                        SourceOfFunds_Limit = amount;
                                                                        notification_icon = "id-threshold.jpg";
                                                                        notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                                        try
                                                                        {
                                                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                            cmd1.CommandType = CommandType.StoredProcedure;
                                                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                            if (db.Rows.Count > 0)
                                                                            {
                                                                            }
                                                                            else
                                                                            {
                                                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                            }
                                                                        }
                                                                        catch
                                                                        {

                                                                        }
                                                                        //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                        return ds;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                notification_icon = "id-threshold.jpg";
                                                                notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                                try
                                                                {
                                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                    if (db.Rows.Count > 0)
                                                                    {
                                                                    }
                                                                    else
                                                                    {
                                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);


                                                                    }
                                                                }
                                                                catch
                                                                {

                                                                }
                                                                amllimit = 4;
                                                                amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                                //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                return ds;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        notification_icon = "id-threshold.jpg";
                                                        notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                        try
                                                        {
                                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                            cmd1.CommandType = CommandType.StoredProcedure;
                                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                            if (db.Rows.Count > 0)
                                                            {
                                                            }
                                                            else
                                                            {
                                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                            }
                                                        }
                                                        catch
                                                        {

                                                        }
                                                        amllimit = 2;
                                                        amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                        //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                        return ds;
                                                    }
                                                }
                                                else if (totgbpvalue > amount)// Check 3 SOF
                                                {
                                                    //For SOF
                                                    _cmd = new MySqlCommand("CheckIDExpiry");
                                                    _cmd.CommandType = CommandType.StoredProcedure;
                                                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                                    _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                                                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                                    DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                    if (tbls.Rows.Count > 0)
                                                    {
                                                        string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                                        DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                        DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                                        if (exp1 != null && exp1 != "")
                                                            expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                                        if ((indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "")) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                                        {
                                                            amllimit = 4;
                                                            amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + ". " + msg + "";
                                                            PrimaryID_Limit = pil;
                                                            SecondaryID_Limit = sil;
                                                            SourceOfFunds_Limit = amount;
                                                            notification_icon = "id-threshold.jpg";
                                                            notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                            try
                                                            {
                                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                if (db.Rows.Count > 0)
                                                                {
                                                                }
                                                                else
                                                                {
                                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                                }
                                                            }
                                                            catch
                                                            {

                                                            }
                                                            //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                            return ds;
                                                        }
                                                        else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                                        {
                                                            _cmd = new MySqlCommand("Check_IfSOFExceeded");
                                                            _cmd.CommandType = CommandType.StoredProcedure;
                                                            _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = " + t.FromCurrency_Code + " ");
                                                            DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                                            int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                                            if (tb.Rows.Count > 0)
                                                            {
                                                                isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                                                SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                                            }
                                                            if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                                            {
                                                                amllimit = 4;
                                                                amlmsg = "Source of fund amount limit is reached. " + msg + "";
                                                                PrimaryID_Limit = pil;
                                                                SecondaryID_Limit = sil;
                                                                SourceOfFunds_Limit = amount;
                                                                notification_icon = "id-threshold.jpg";
                                                                notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                                try
                                                                {
                                                                    MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                                    cmd1.CommandType = CommandType.StoredProcedure;
                                                                    cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                                    cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                                    cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                                    DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                                    if (db.Rows.Count > 0)
                                                                    {
                                                                    }
                                                                    else
                                                                    {
                                                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                                    }
                                                                }
                                                                catch
                                                                {

                                                                }
                                                                //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                                return ds;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        notification_icon = "id-threshold.jpg";
                                                        notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                                        try
                                                        {
                                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                            cmd1.CommandType = CommandType.StoredProcedure;
                                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                            if (db.Rows.Count > 0)
                                                            {
                                                            }
                                                            else
                                                            {
                                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                            }
                                                        }
                                                        catch
                                                        {

                                                        }
                                                        amllimit = 4;
                                                        amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";
                                                        //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                                        return ds;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    notification_icon = "id-threshold.jpg";
                                    notification_message = "<span class='cls-admin'>ID threshold <strong>primary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                    try
                                    {
                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                        cmd1.CommandType = CommandType.StoredProcedure;
                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                        if (db.Rows.Count > 0)
                                        {
                                        }
                                        else
                                        {
                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                        }
                                    }
                                    catch
                                    {

                                    }

                                    amlmsg = "Identification document need to be uploaded to proceed this transfer. Do you want to Upload?";
                                    amllimit = 1;
                                    #region createtoken
                                    try
                                    {
                                        //SendMoneyToken = "";
                                        //RewardToken = "";
                                        //sendhashexpire = new DateTime();
                                        //HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                        //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                                    }
                                    catch { }
                                    #endregion createtoken
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                              PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                              0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                              transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                            }
                            else if (totgbpvalue > sil)// Check 2
                            {
                                //For Address proof
                                _cmd = new MySqlCommand("CheckIDExpiry");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_IDType_ID", 2);
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                DataTable tbl = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                if (tbl.Rows.Count > 0)
                                {
                                    string recDate = Convert.ToString(tbl.Rows[0]["Record_Insert_DateTime"]);
                                    DateTime indt = DateTime.ParseExact(Convert.ToDateTime(recDate).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                    DateTime fifth = To_Date;// indt.Date.AddMonths(ExpiryMonths);//AddDays(150);
                                    DateTime expDat = To_Date; string exp = Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"]);
                                    if (exp != null && exp != "")
                                        expDat = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbl.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                                    DateTime recDate_validity = Convert.ToDateTime(indt.AddYears(Validity_POA));

                                    if ((indt < From_Date) || (expDat < dt1 && exp != null && exp != ""))//(indt > fifth)280823//(indt <= dt1 && dt1 >= fifth)
                                    {
                                        if ((expDat > dt1 && exp != null && exp != "") && recDate_validity > indt)
                                        {
                                            check_sec_limit = 0; amllimit = 10;
                                        }
                                        else
                                        {
                                            notification_icon = "id-threshold.jpg";
                                            notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                            try
                                            {
                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                if (db.Rows.Count > 0)
                                                {
                                                }
                                                else
                                                {
                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                }
                                            }
                                            catch
                                            {

                                            }
                                            amllimit = 2;
                                            amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                            //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                  PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                  0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                  transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;
                                        }
                                    }
                                }
                                else
                                {
                                    notification_icon = "id-threshold.jpg";
                                    notification_message = "<span class='cls-admin'>ID threshold <strong>secondary</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                    try
                                    {
                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                        cmd1.CommandType = CommandType.StoredProcedure;
                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                        if (db.Rows.Count > 0)
                                        {
                                        }
                                        else
                                        {
                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                        }
                                    }
                                    catch
                                    {

                                    }
                                    amllimit = 2;
                                    amlmsg = "Address Proof need to be uploaded to proceed this transfer. Do you want to Upload?";
                                    //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                            }
                            else if (totgbpvalue > amount) // Check 3 SOF
                            {
                                //For SOF
                                _cmd = new MySqlCommand("CheckIDExpiry");
                                _cmd.CommandType = CommandType.StoredProcedure;
                                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                _cmd.Parameters.AddWithValue("_IDType_ID", 4);
                                _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                if (tbls.Rows.Count > 0)
                                {
                                    string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                                    DateTime indt1 = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                    DateTime expDat1 = To_Date; string exp1 = Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"]);
                                    if (exp1 != null && exp1 != "")
                                        expDat1 = DateTime.ParseExact(Convert.ToDateTime(Convert.ToString(tbls.Rows[0]["SenderID_ExpiryDate"])).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);

                                    if ((indt1 < From_Date) || (expDat1 < dt1 && exp1 != null && exp1 != "")) //(indt1 > To_Date)280823//if (indt1 < From_Date)//if (indt1 != dt1)
                                    {
                                        amllimit = 1;
                                        amlmsg = "Source of fund needed for more than " + basecurrency + " " + amount + ". " + msg + "";
                                        PrimaryID_Limit = pil;
                                        SecondaryID_Limit = sil;
                                        SourceOfFunds_Limit = amount;

                                        notification_icon = "id-threshold.jpg";
                                        notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                        try
                                        {
                                            MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                            cmd1.CommandType = CommandType.StoredProcedure;
                                            cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                            cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                            cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                            DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                            if (db.Rows.Count > 0)
                                            {
                                            }
                                            else
                                            {
                                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                            }
                                        }
                                        catch
                                        {

                                        }
                                        //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                    else if (t.AmountInGBP > AskforSOFAmount_Limit)
                                    {
                                        _cmd = new MySqlCommand("Check_IfSOFExceeded");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_whereclause", " and t.Customer_ID=" + Customer_ID + " and t.FromCurrency_Code = " + t.FromCurrency_Code + " ");
                                        DataTable tb = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                                        int isvalid = 0, todaystxncount = 0, SourceComment_Flag = 0, tottxnlimit = 0;
                                        if (tb.Rows.Count > 0)
                                        {
                                            isvalid = Convert.ToInt32(tb.Rows[0]["pertxnlimit"]); todaystxncount = Convert.ToInt32(tb.Rows[0]["todaystxncount"]);
                                            SourceComment_Flag = Convert.ToInt32(tb.Rows[0]["SourceComment_Flag"]); tottxnlimit = Convert.ToInt32(tb.Rows[0]["tottxnlimit"]);
                                        }
                                        if (todaystxncount > 0 && (isvalid > 0 || SourceComment_Flag > 0 || tottxnlimit > 0))
                                        {
                                            amllimit = 1;
                                            amlmsg = "Source of fund limit is reached. " + msg + "";
                                            PrimaryID_Limit = pil;
                                            SecondaryID_Limit = sil;
                                            SourceOfFunds_Limit = amount;
                                            notification_icon = "id-threshold.jpg";
                                            notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                            try
                                            {
                                                MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                                cmd1.CommandType = CommandType.StoredProcedure;
                                                cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                                cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                                cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                                DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                                if (db.Rows.Count > 0)
                                                {
                                                }
                                                else
                                                {
                                                    CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                                }
                                            }
                                            catch
                                            {

                                            }
                                            //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                            return ds;
                                        }
                                    }
                                }
                                else
                                {
                                    amllimit = 4;
                                    amlmsg = "Source of fund need to be uploaded to proceed this transfer. Do you want to Upload?";

                                    notification_icon = "id-threshold.jpg";
                                    notification_message = "<span class='cls-admin'>ID threshold <strong>source of funds</strong> limit<strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                    try
                                    {
                                        MySqlCommand cmd1 = new MySqlCommand("check_notification");
                                        cmd1.CommandType = CommandType.StoredProcedure;
                                        cmd1.Parameters.AddWithValue("_Notification_msg", notification_message);
                                        cmd1.Parameters.AddWithValue("_Record_Insert_DateTime", Convert.ToDateTime(Record_DateTime));
                                        cmd1.Parameters.AddWithValue("_Customer_ID", Convert.ToString(Customer_ID));
                                        DataTable db = (DataTable)db_connection.ExecuteQueryDataTableProcedure(cmd1);
                                        if (db.Rows.Count > 0)
                                        {
                                        }
                                        else
                                        {
                                            CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);

                                        }
                                    }
                                    catch
                                    {

                                    }
                                    //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                         PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                         0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                         transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                            }
                        }
                        #endregion sof
                    }
                    int chkdayslimit = 1;
                    dr = dt.Select("PID=24");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkdayslimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    double total = 0;
                    double total_benf = 0;
                    double total_cust = 0;
                    double total_benf_year = 0;
                    //Check customer days limit
                    if (chkdayslimit == 0)
                    {
                        _cmd = new MySqlCommand("Customer_RegDetails");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        DataTable d2 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                        if (d2.Rows.Count != 0)
                        {
                            _cmd = new MySqlCommand("CustWise_Limit");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            DataTable c = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                            DateTime date = Convert.ToDateTime(d2.Rows[0]["Record_Insert_DateTime"]);
                            DateTime date1 = dateTime.Date;
                            TimeSpan diff = date1.Date - date.Date;
                            for (int i = 0; i < c.Rows.Count; i++)
                            {
                                int days = Convert.ToInt32(c.Rows[i]["Days"]);
                                double cust_limit = Convert.ToDouble(c.Rows[i]["Personal_Transaction_Amount_Limit"]);
                                if (flag != true)
                                {
                                    if (Convert.ToInt32(diff.Days) <= days)
                                    {
                                        DateTime Pastdate = dateTime.Date.AddDays(-days);
                                        DateTime From_Date = Pastdate;
                                        DateTime To_Date = date1;
                                        _cmd = new MySqlCommand("CustTotal_Amount");
                                        _cmd.CommandType = CommandType.StoredProcedure;
                                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                                        _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                                        _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                                        _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                                        DataTable dt1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                                        if (dt1.Rows.Count > 0)
                                        {
                                            for (int j = 0; j < dt1.Rows.Count; j++)
                                            {
                                                double AmountInGBP = Convert.ToDouble(dt1.Rows[j]["AmountInGBP"]);
                                                double fees = Convert.ToDouble(dt1.Rows[j]["Transfer_Fees"]);
                                                total = total + AmountInGBP;// + fees;
                                            }
                                        }
                                    }
                                    if (total > cust_limit)
                                    {
                                        flag = true;//Amount exceeded
                                        custlimit = 1;
                                        //custlimitmsg = "You have been registered in " + days + " days ago. By these days limit has been exceeded. " + msg + "";
                                        custlimitmsg = "We require further documents to continue with this transfer. Please upload Source of funds like Bank Statement or Salary slip or Loan document or any other relevant document.";

                                        string notification_icon = "transaction-limit-exceeded.jpg";
                                        string notification_message = "<span class='cls-admin'>The " + days + " days limit for personal transaction after registration has been <strong class='cls-cancel'> exceeded.</strong></span><span class='cls-customer'></span>";
                                        CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                        //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                        return ds;
                                    }
                                }
                            }
                        }
                    }
                    //Check Daily Transfer Count perm
                    int chkdailycount = 1;
                    dr = dt.Select("PID=59");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkdailycount = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    //Check daily limit perm
                    int chkdailylimit = 1;
                    dr = dt.Select("PID=26");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkdailylimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    DataTable dds = null;
                    if (chkdailylimit == 0 || chkdailycount == 0)
                    {
                        _cmd = new MySqlCommand("customer_transferamount_minmax");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        dds = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    }
                    //Check Daily Transfer Count
                    if (chkdailycount == 0)
                    {
                        if (dds.Rows.Count > 0)
                        {
                            int TotalDailyTransfer_count = Convert.ToInt32(dds.Rows[0]["Daily_Transfer_Count"]);
                            _cmd = new MySqlCommand("CustTotal_Amount");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_From_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmd.Parameters.AddWithValue("_To_Date", dateTime.Date.ToString("yyyy-MM-dd"));
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                            DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                            if ((sd.Rows.Count + 1) > TotalDailyTransfer_count)
                            {
                                string notification_icon = "tranfer-limit-exceeded.jpg";
                                string notification_message = "<span class='cls-admin'>Daily transfer count <strong class='cls-cancel'>reached.</strong></span><span class='cls-customer'></span>";
                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                daily_transfer_count = 1;// count exceeded
                                daily_transfer_msg = "We are unable to process your transfer request at the moment. Please contact Support Team with your transfer request.";
                                #region createtoken
                                try
                                {
                                    //SendMoneyToken = "";
                                    //RewardToken = "";
                                    //sendhashexpire = new DateTime();
                                    //HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                    //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                                }
                                catch { }
                                #endregion createtoken
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                              PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                              0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                              transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                            if ((sd.Rows.Count + 1) == TotalDailyTransfer_count)
                            {
                                daily_transfer_count = -1;
                            }
                        }
                    }
                    //Check daily limit 
                    if (chkdailylimit == 0)
                    {
                        if (dds.Rows.Count > 0)
                        {
                            double Daily_Transfer_Limit = Convert.ToDouble(dds.Rows[0]["Daily_Transfer_Limit"]);
                            //get todays total transaction amount
                            DateTime From_Date = dateTime.Date;
                            DateTime To_Date = dateTime.Date;
                            _cmd = new MySqlCommand("CustTotal_Amount");
                            _cmd.CommandType = CommandType.StoredProcedure;
                            _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                            _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                            _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                            DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                            total = 0;
                            if (sd.Rows.Count > 0)
                            {
                                for (int j = 0; j < sd.Rows.Count; j++)
                                {
                                    double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                                    double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                                    total = total + AmountInGBP;// + fees;
                                    total_cust = total_cust + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                                    if (Convert.ToInt32(sd.Rows[j]["Beneficiary_ID"]) == t.Beneficiary_ID)
                                    {
                                        total_benf = total_benf + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                                    }
                                }
                            }

                            if ((total + t.AmountInGBP) > Daily_Transfer_Limit)
                            {
                                string notification_icon = "tranfer-limit-exceeded.jpg";
                                string notification_message = "<span class='cls-admin'>Daily transfer limit<strong class='cls-cancel'> reached.</strong></span><span class='cls-customer'></span>";
                                CompanyInfo.save_notification_compliance(notification_message, notification_icon, Convert.ToString(Customer_ID), Convert.ToDateTime(Record_DateTime), Convert.ToInt32(t.Client_ID), 1, Convert.ToInt32(t.User_ID), Convert.ToInt32(t.Branch_ID), 0, 1, 1, 0, _srvTransactionContext);
                                if (Convert.ToString(dds.Rows[0]["set_compliancealert"]) == "0")
                                {
                                    TotalCustAmount = total;
                                    dailylimit = 2;//complaince alert
                                    dailylimitmsg = "Your Daily Limit is exceeded. For any further transfers please contact our team. They will help you to initiate your future transfers.";
                                    #region createtoken
                                    try
                                    {
                                        //SendMoneyToken = "";
                                        //RewardToken = "";
                                        //sendhashexpire = new DateTime();
                                        //HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                        //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                                    }
                                    catch { }
                                    #endregion createtoken
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                                else
                                {
                                    dailylimit = 1;
                                    dailylimitmsg = "Your Daily Limit is exceeded. " + msg + "";
                                    TotalCustAmount = total;
                                    //HttpContext.Current.Session["SOFdocupload"] = "ON"; HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                                    ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                                 PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                                 0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                                 transfer_count_days, paywithwallet, PrimaryIdmsg);

                                    return ds;
                                }
                            }
                        }
                    }
                    else
                    {

                        DateTime From_Date = dateTime.Date;
                        DateTime To_Date = dateTime.Date;
                        _cmd = new MySqlCommand("CustTotal_Amount");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                        DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                        total = 0;
                        if (sd.Rows.Count > 0)
                        {
                            for (int j = 0; j < sd.Rows.Count; j++)
                            {
                                double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                                double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);
                                total = total + AmountInGBP;// + fees;
                                total_cust = total_cust + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                                if (Convert.ToInt32(sd.Rows[j]["Beneficiary_ID"]) == t.Beneficiary_ID)
                                {
                                    total_benf = total_benf + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                                }
                            }
                        }


                    }
                    try
                    {
                        DateTime dt1 = dateTime.Date;//DateTime.Now.Date;
                        DateTime From_Date = dt1.Date.AddYears(-1);
                        DateTime To_Date = dt1;
                        _cmd = new MySqlCommand("CustTotal_Amount");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_From_Date", From_Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_To_Date", To_Date.ToString("yyyy-MM-dd"));
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_FromCurrency_Code", t.FromCurrency_Code);
                        DataTable sd = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                        //total = 0;
                        if (sd.Rows.Count > 0)
                        {
                            for (int j = 0; j < sd.Rows.Count; j++)
                            {
                                double AmountInGBP = Convert.ToDouble(sd.Rows[j]["AmountInGBP"]);
                                double fees = Convert.ToDouble(sd.Rows[j]["Transfer_Fees"]);

                                if (Convert.ToInt32(sd.Rows[j]["Beneficiary_ID"]) == t.Beneficiary_ID)
                                {
                                    total_benf_year = total_benf_year + Convert.ToDouble(sd.Rows[j]["AmountInPKR"]);
                                }
                            }
                        }

                    }
                    catch (Exception ex) { }

                    //Check Collection Limit
                    int chkcollectiontypelimit = 1;
                    int collectiontypelimit = 0; string collectiontypelimitmsg = "";
                    dr = dt.Select("PID=28");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            chkcollectiontypelimit = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    if (chkcollectiontypelimit == 0)
                    {
                        _cmd = new MySqlCommand("GetPayDepositTypes");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_where", " and PaymentDepositType_ID=" + t.PaymentDepositType_ID);
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        _cmd.Parameters.AddWithValue("_TransferTypeFlag", 0);
                        DataTable pd1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                        if (pd1.Rows.Count > 0)
                        {
                            double collimit = Convert.ToDouble(pd1.Rows[0]["Max_Amount"]);
                            if (collimit < t.AmountInGBP)
                            {
                                collectiontypelimit = 1;
                                collectiontypelimitmsg = "You can only send money upto: " + collimit + " for selected collection type.";
                                #region createtoken
                                try
                                {
                                    //SendMoneyToken = "";
                                    //RewardToken = "";
                                    //sendhashexpire = new DateTime();
                                    //HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                    //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                                }
                                catch { }
                                #endregion createtoken
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, paymenttypelimit,
                             paymenttypelimitmsg, collectiontypelimit, collectiontypelimitmsg, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                    }
                    //Check ID Upload on perm
                    int idperm = 1;
                    dr = dt.Select("PID=43");
                    if (dr.Count() > 0)
                    {
                        foreach (DataRow drr in dr)
                        {
                            idperm = Convert.ToInt32(drr["Status_ForCustomer"]);
                        }
                    }
                    if (idperm == 0)
                    {
                        _cmd = new MySqlCommand("Check_PrimaryExpiry");
                        _cmd.CommandType = CommandType.StoredProcedure;
                        _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        DataTable pd1 = db_connection.ExecuteQueryDataTableProcedure(_cmd);

                        if (pd1.Rows.Count > 0)
                        {
                            int ICount = Convert.ToInt32(pd1.Rows[0]["count"]);
                            if (ICount == 1)
                            {
                                IsValidID = 1;
                                IDUploadmsg = "Please upload an identification document, for example Passport or Driving license. Due to regulatory obligations we require to confirm your identity before proceeding with your money transfer request.";
                                #region createtoken
                                try
                                {
                                    //SendMoneyToken = "";
                                    //RewardToken = "";
                                    //sendhashexpire = new DateTime();
                                    //HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                    //HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                                }
                                catch { }
                                #endregion createtoken
                                ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                                return ds;
                            }
                        }
                        else
                        {
                            //No records found
                            IsValidID = 1;
                            IDUploadmsg = "Please upload an identification document, for example Passport or Driving license. Due to regulatory obligations we require to confirm your identity before proceeding with your money transfer request.";
                            #region createtoken
                            try
                            {
                                //SendMoneyToken = "";
                                //RewardToken = "";
                                //sendhashexpire = new DateTime();
                                //    HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                                //    HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                            }
                            catch { }
                            #endregion createtoken
                            ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                             PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
                             0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
                             transfer_count_days, paywithwallet, PrimaryIdmsg);

                            return ds;
                        }
                    }
                    else
                    {
                        IsValidID = 2;//Flag for Perm off
                    }

                    if (check_sec_limit == 0 && amllimit == 10)
                    {
                        amllimit = 10;
                        amlmsg = "Is your current address is valid address?";
                        //HttpContext.Current.Session["TransactionStartdate"] = dateTime;
                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
    PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, 0,
    0, 0, 0, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, 0, 0, 0,
    transfer_count_days, paywithwallet, PrimaryIdmsg);

                        //MySqlCommand cmd = new MySqlCommand("save_transaction_journey");
                        //cmd.CommandType = CommandType.StoredProcedure;
                        //cmd.Connection = con;
                        //cmd.Parameters.AddWithValue("_CustomerID", Customer_ID);
                        //cmd.Parameters.AddWithValue("_JourneyKey", SendMoneyToken);
                        //cmd.Parameters.AddWithValue("_RewardFlag", RewardToken);
                        //cmd.Parameters.AddWithValue("_UniqueID", "");
                        //cmd.Parameters.AddWithValue("_DeleteStatus", "0");
                        //cmd.Parameters.AddWithValue("_ClientID", t.Client_ID);
                        //cmd.Parameters.AddWithValue("_ValidityFlag", chk_validity);
                        //cmd.Parameters.AddWithValue("_HashExpiry", sendhashexpire);


                        //int bankmsg = cmd.ExecuteNonQuery(); cmd.Dispose();
                        return ds;
                    }
                    else
                    {
                        ds.Rows.Add(0, "", count, Blacklistemsg, sof, exceedAmt, monlimit, monthlylimitmsg, SOFDaysCount, SOFDaysCount_Msg, amllimit, amlmsg, SourceOfFunds_Limit,
                            PrimaryID_Limit, SecondaryID_Limit, custlimit, custlimitmsg, daily_transfer_count, daily_transfer_msg, dailylimit, dailylimitmsg, TotalCustAmount, paymenttypelimit,
                            paymenttypelimitmsg, collectiontypelimit, collectiontypelimitmsg, IsValidID, IDUploadmsg, AllowProceedFlag, AllowProceedFlag_Msg, total_benf, total_cust, total_benf_year,
                            transfer_count_days, paywithwallet, PrimaryIdmsg);
                        CompanyInfo.InsertActivityLogDetails("App - Customer " + t.Username + " is on send money step 2. Customer clicked on Next. Customer ID: " + Customer_ID + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "Send-Get Base Data", t.CB_ID, t.Client_ID, "Send Money Step 2", _srvTransactionContext);
                        //MySqlCommand cmd = new MySqlCommand("save_transaction_journey");
                        //cmd.CommandType = CommandType.StoredProcedure;
                        //cmd.Connection = con;
                        //cmd.Parameters.AddWithValue("_CustomerID", Customer_ID);
                        //cmd.Parameters.AddWithValue("_JourneyKey", SendMoneyToken);
                        //cmd.Parameters.AddWithValue("_RewardFlag", RewardToken);
                        //cmd.Parameters.AddWithValue("_UniqueID", "");
                        //cmd.Parameters.AddWithValue("_DeleteStatus", "0");
                        //cmd.Parameters.AddWithValue("_ClientID", t.Client_ID);
                        //cmd.Parameters.AddWithValue("_ValidityFlag", chk_validity);
                        //cmd.Parameters.AddWithValue("_HashExpiry", sendhashexpire);


                        //int bankmsg = cmd.ExecuteNonQuery(); cmd.Dispose();
                        return ds;
                    }

                }
            catch (Exception ex)
            {
                #region createtoken
                //try
                //{
                //    HttpContext.Current.Session["SendMoneyToken"] = ""; HttpContext.Current.Session["RewardToken"] = "";
                //    HttpContext.Current.Session["sendmoneyhashexpire"] = "0001-01-01";
                //}
                //catch { }

                #endregion createtoken
                ds.Rows.Clear();
                ds.Rows.Add(1, "App: " + ex.ToString());
                return ds;
            }
                finally
                {
                    con.Close();
                }
        }
        }


        public DataTable CheckMinMax(Model.Transaction obj)
        {

            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(Convert.ToString(obj.Customer_ID), true));
            MySqlCommand _cmd = new MySqlCommand("customer_transferamount_minmax");
            _cmd.CommandType = CommandType.StoredProcedure;
            _cmd.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
            _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
            DataTable dt = db_connection.ExecuteQueryDataTableProcedure(_cmd);
            
            return dt;
        }

        public DataTable CheckAddressDetailsCustomers_old_9_4_25(Model.Transaction t )
        {
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            MySqlCommand _cmd = new MySqlCommand("GetPermissions");
            _cmd.CommandType = CommandType.StoredProcedure;

            _cmd.Parameters.AddWithValue("_whereclause", " and PID in (43,223);");
            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            //_cmd.Parameters.AddWithValue("_Branch_ID", t.CB_ID);
            DataTable dt = db_connection.ExecuteQueryDataTableProcedure(_cmd);

            DataTable ds = new DataTable();
            ds.Columns.Add("Status", typeof(int));
            ds.Columns.Add("Errormessage", typeof(string));
            try
            {
                string errorMessage = "";
                int addressDetailsCust = 1;
                addressDetailsCust = Convert.ToInt32(dt.Rows[1]["Status_ForCustomer"]);

                if (addressDetailsCust == 0)
                {
                    MySqlCommand _cmd1 = new MySqlCommand("CheckAddressDetailsCustomers");
                    _cmd1.CommandType = CommandType.StoredProcedure;
                    _cmd1.Parameters.AddWithValue("_ClientId", t.Client_ID);
                    _cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    DataTable dtcust = db_connection.ExecuteQueryDataTableProcedure(_cmd1);

                    if (dtcust.Rows.Count > 0)
                    {
                        string postCode = Convert.ToString(dtcust.Rows[0]["Post_Code"]).Trim();
                        string houseNumber = Convert.ToString(dtcust.Rows[0]["House_Number"]).Trim();
                        string street = Convert.ToString(dtcust.Rows[0]["Street"]).Trim();
                        int cityID = Convert.ToInt32(dtcust.Rows[0]["City_ID"]);
                        if (String.IsNullOrEmpty(postCode) || String.IsNullOrEmpty(houseNumber) || String.IsNullOrEmpty(street)) // || cityID <= 0
                        {
                            if (Convert.ToInt32(dtcust.Rows[0]["Active_Status"]) != 1 && Convert.ToInt32(dt.Rows[0]["Status_ForCustomer"]) == 0)
                            {
                                errorMessage = "Address Information Missing.";
                            }
                            if (Convert.ToInt32(dt.Rows[0]["Status_ForCustomer"]) == 1)
                            {
                                errorMessage = "Address Information Missing.";
                            }

                        }
                    }
                    if (errorMessage != "")
                        ds.Rows.Add(0, errorMessage);
                }
            }
            catch (Exception ex) { }

            return ds;
        }

        public DataTable CheckAddressDetailsCustomers(Model.Transaction t)
        {
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            MySqlCommand _cmd = new MySqlCommand("GetPermissions");
            _cmd.CommandType = CommandType.StoredProcedure;

            _cmd.Parameters.AddWithValue("_whereclause", " and PID in (117);"); //(43,223)
            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            //_cmd.Parameters.AddWithValue("_Branch_ID", t.CB_ID);
            DataTable dt = db_connection.ExecuteQueryDataTableProcedure(_cmd);

            DataTable ds = new DataTable();
            ds.Columns.Add("Status", typeof(int));
            ds.Columns.Add("Errormessage", typeof(string));
            try
            {
                string errorMessage = "";
                int addressDetailsCust = 1;
                addressDetailsCust = Convert.ToInt32(dt.Rows[0]["Status_ForCustomer"]);

                if (addressDetailsCust == 0)
                {
                    DataTable dtcust = new DataTable();
                    DataTable config = new DataTable();
                    using (MySqlCommand _cmd1 = new MySqlCommand("CheckAddressDetailsCustomers"))
                    {
                        _cmd1.CommandType = CommandType.StoredProcedure;
                        _cmd1.Parameters.AddWithValue("_ClientId", t.Client_ID);
                        _cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        dtcust = db_connection.ExecuteQueryDataTableProcedure(_cmd1);
                    }
                    //added by vyankatesh
                    //using (MySqlCommand cmd = new MySqlCommand("Registration_Configuration")) Commented by Anushka
                    using (MySqlCommand cmd = new MySqlCommand("Registration_Config"))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        cmd.Parameters.AddWithValue("_CB_ID", t.Branch_ID);
                        config = db_connection.ExecuteQueryDataTableProcedure(cmd);
                    }

                    int PostCode_conf = Convert.ToInt32(config.Rows[0]["Customer_post_code_man"]);
                    int HouseNo_conf = Convert.ToInt32(config.Rows[0]["Customer_house_number_man"]);
                    int Address1_conf = Convert.ToInt32(config.Rows[0]["Customer_address1_man"]);
                    int Country_conf = Convert.ToInt32(config.Rows[0]["Customer_country_man"]);
                    int City_conf = Convert.ToInt32(config.Rows[0]["Customer_city_man"]);

                    if (dtcust.Rows.Count > 0)
                    {
                        string postCode = Convert.ToString(dtcust.Rows[0]["Post_Code"]).Trim();
                        string houseNumber = Convert.ToString(dtcust.Rows[0]["House_Number"]).Trim();
                        string street = Convert.ToString(dtcust.Rows[0]["Street"]).Trim();
                        int cityID = Convert.ToInt32(dtcust.Rows[0]["City_ID"]);

                        if (PostCode_conf == 0)
                        {
                            if (String.IsNullOrEmpty(postCode))
                            {
                                errorMessage = "Post Code Information Missing.";
                            }
                        }
                        if (HouseNo_conf == 0)
                        {
                            if (String.IsNullOrEmpty(houseNumber))
                            {
                                errorMessage = "House Information Missing.";
                            }
                        }
                        if (Address1_conf == 0)
                        {
                            if (String.IsNullOrEmpty(street))
                            {
                                errorMessage = "street Information Missing.";
                            }
                        }
                        if (City_conf == 0)
                        {
                            if (cityID <= 0)
                            {
                                errorMessage = "City Information Missing.";
                            }
                        }

                        if (errorMessage != "")
                        {
                            errorMessage = "Address Information Missing.";
                        }
                      
                    }
                    if (errorMessage != "")
                        ds.Rows.Add(0, errorMessage);
                }
            }
            catch (Exception ex) { }

            return ds;
        }

        public DataTable CheckDuplicateTxn(Model.Transaction t, HttpContext context)
        {
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            MySqlCommand _cmd = new MySqlCommand("Get_Permissions");
            _cmd.CommandType = CommandType.StoredProcedure;
            _cmd.Parameters.AddWithValue("Per_ID", "19");
            _cmd.Parameters.AddWithValue("ClientID", t.Client_ID);
            DataTable dt = db_connection.ExecuteQueryDataTableProcedure(_cmd);

            DataTable ds = new DataTable();
            ds.Columns.Add("Status", typeof(int));
            ds.Columns.Add("Errormessage", typeof(string));
            try
            {
                int Duplicatemsgstatus = 1;
                Duplicatemsgstatus = Convert.ToInt32(dt.Rows[0]["Status_ForCustomer"]);

                ds.Columns.Add("DuplicateFlag", typeof(int)); ds.Columns.Add("Duplicatemessage", typeof(string));

                bool flag = false;
                int count = 0;
                string Duplicatemsg = "";
                string basecurrency = "";

                DateTime dateTime = DateTime.Now;
                DataTable cdt = (DataTable)CompanyInfo.get(t.Client_ID, context);
                if (cdt.Rows.Count > 0)
                {
                    basecurrency = Convert.ToString(cdt.Rows[0]["BaseCurrency_Code"]);
                    string timezone = Convert.ToString(cdt.Rows[0]["BaseCurrency_Timezone"]);
                    if (timezone != "" && timezone != null)
                    {
                        var britishZone = TimeZoneInfo.FindSystemTimeZoneById("" + timezone + "");
                        dateTime = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.Local, britishZone);
                    }
                }
                t.Record_Insert_DateTime = dateTime.Date.ToString("yyyy-MM-dd");

                if (Duplicatemsgstatus == 0)
                {
                    _cmd = new MySqlCommand("Transaction_checkduplicate");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                    _cmd.Parameters.AddWithValue("_Beneficiary_ID", t.Beneficiary_ID);
                    _cmd.Parameters.AddWithValue("_Record_Insert_DateTime", dateTime);
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    count = Convert.ToInt32(db_connection.ExecuteScalarProcedure(_cmd));
                    _cmd.Dispose();
                    if (count == 0)
                    {
                        Duplicatemsg = "";
                    }
                    else
                    {
                        Duplicatemsg = "Transaction already exists for the day for this beneficiary! Do you want to continue?";
                    }
                }
                else
                {
                    Duplicatemsg = "";
                }

                CompanyInfo.InsertActivityLogDetails("App - Customer " + t.LoginUserName + " is on send money step 1. Customer clicked on proceed to send money. Customer ID: " + Customer_ID + ". Selected Beneficiary: " + t.Beneficiary_ID + ". " + Duplicatemsg + "", t.User_ID, t.Transaction_ID, t.User_ID, Customer_ID, "Send-Check Duplicate Txn", t.Branch_ID, t.Client_ID, "Send Money Step 1", context);
                ds.Rows.Add(0, "", count, Duplicatemsg);

                return ds;
            }
            catch (Exception ex) { ds.Rows.Add(1, "App: " + ex.ToString()); return ds; }
        }

        public DataTable SendMoneyDetails(Model.Transaction t, HttpContext context)
        {
            DataTable ds = new DataTable();
            ds.Columns.Add("Status", typeof(int));
            ds.Columns.Add("CallBackUrl", typeof(string));
            t.CallBackURL = "";
            //string sendmoneyhash = Convert.ToString(HttpContext.Current.Session["SendMoneyToken"]);
            //string hashdate = Convert.ToString(HttpContext.Current.Session["sendmoneyhashexpire"]);

            //string stringtohash = "myMTSHashingStarts" + t.Beneficiary_ID + t.Customer_ID + t.AmountInGBP + t.AmountInPKR + t.Transfer_Fees +
            //            t.Exchange_Rate + t.PaymentDepositType_ID + t.PType_ID + t.DeliveryType_Id + "myMTSHashingEnds";
            //string chkhash = CompanyInfo.GetHash(stringtohash);
            //if (sendmoneyhash.Contains("sendmoneystep2.5passed")) { chkhash = chkhash + "sendmoneystep2.5passed"; }
            //if (sendmoneyhash.Contains("sendmoneystep3passed")) { chkhash = chkhash + "sendmoneystep3passed"; }
            //HttpContext.Current.Session["RewardToken"] = "";

            //if (chkhash == sendmoneyhash && sendmoneyhash != "" && sendmoneyhash != null && hashdate != "0001-01-01" && hashdate != null && hashdate != "")
            //{
            if (true) { // change after the session issue
                //string checkidupload = Convert.ToString(HttpContext.Current.Session["SOFdocupload"]);
                //if (checkidupload == "ON")// change after the session issue
                if (true)
                {
                    // Check if SOF uploaded                    
                    MySqlCommand _cmd = new MySqlCommand("CheckIDExpiry");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                    _cmd.Parameters.AddWithValue("_IDType_ID", t.SOFID);
                    _cmd.Parameters.AddWithValue("_Customer_ID", Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true)));
                    DataTable tbls = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    if (tbls.Rows.Count > 0)
                    {
                        string recDate1 = Convert.ToString(tbls.Rows[0]["Record_Insert_DateTime"]);
                        DateTime indt = DateTime.ParseExact(Convert.ToDateTime(recDate1).ToString("dd/MM/yyyy"), "dd/MM/yyyy", null);
                        //DateTime d = Convert.ToDateTime(Convert.ToString(HttpContext.Current.Session["TransactionStartdate"]));// change after the session issue
                        //if (indt.Date == DateTime.Now.Date || indt.Date == d.Date) { }//if id is uploaded today// change after the session issue
                        if (true) { }//if id is uploaded today
                        else//if id is not uploaded today
                        {
                            ds.Rows.Add(0, "");
                            return ds;
                        }
                    }
                    else {
                        ds.Rows.Add(0, "");
                        return ds;
                    }
                }
                //check discounts
                if (t.Discount_Perm == 0 && t.Discount_ID > 0)
                {
                    Service.srvDiscount srv = new Service.srvDiscount();
                    t.SourceComment = "true";
                    DataTable dt = srv.getavailableDiscDetailsreferee(t,context);
                    if (dt.Rows.Count > 0)
                    {
                        DataRow[] dr = dt.Select("ID=" + t.Discount_ID + "");
                        if (dr.Count() > 0)
                        {
                            foreach (DataRow drr in dr)
                            {
                                //idupload = Convert.ToInt32(drr["Status_ForCustomer"]);
                                double Min = Convert.ToDouble(drr["Min_TrnAmount"]), Max = Convert.ToDouble(drr["Max_TrnAmount"]);
                                double fee = t.Transfer_Fees, DiscDebitAmt = 0;
                                double amounttopay = t.AmountInGBP;
                                if (t.AmountInGBP >= Min && t.AmountInGBP <= Max)
                                {
                                    if (Convert.ToInt32(drr["Discounttype_ID"]) == 1)//Fee Against
                                    {
                                        if (Convert.ToInt32(drr["Amounttype_ID"]) == 1)//Percentage
                                        {
                                            double feestopay = ((fee * Convert.ToDouble(drr["Discount_Value"])) / 100);//.toFixed(2);
                                            if (t.Transfer_Fees > feestopay)
                                            {
                                                fee = fee - feestopay; DiscDebitAmt = feestopay;
                                            }
                                            else
                                            {
                                                DiscDebitAmt = fee; fee = 0.00;
                                            }
                                        }
                                        else//Fixed amount
                                        {
                                            if (fee >= Convert.ToDouble(drr["Discount_Value"]))
                                            {
                                                fee = fee - Convert.ToDouble(drr["Discount_Value"]);
                                                DiscDebitAmt = Convert.ToDouble(drr["Discount_Value"]);
                                            }
                                            else
                                            {
                                                DiscDebitAmt = fee; fee = 0.00;
                                            }
                                        }
                                    }
                                    else//Amount Against 
                                    {
                                        if (Convert.ToInt32(drr["Amounttype_ID"]) == 1)//Percentage
                                        {
                                            var percamt = ((t.AmountInGBP * Convert.ToDouble(drr["Discount_Value"])) / 100);//.toFixed(2);
                                            if (t.AmountInGBP >= percamt)
                                            {
                                                amounttopay = (t.AmountInGBP) - (percamt);
                                                DiscDebitAmt = (percamt);
                                            }
                                            else
                                            {
                                                DiscDebitAmt = (t.AmountInGBP);
                                                amounttopay = 0.00;
                                            }
                                        }
                                        else//Fixed amount
                                        {
                                            if (t.AmountInGBP >= Convert.ToDouble(drr["Discount_Value"]))
                                            {
                                                amounttopay = t.AmountInGBP - Convert.ToDouble(drr["Discount_Value"]);
                                                DiscDebitAmt = Convert.ToDouble(drr["Discount_Value"]);
                                            }
                                            else
                                            {
                                                DiscDebitAmt = t.AmountInGBP;
                                                amounttopay = 0.00;
                                            }
                                        }
                                    }

                                    if (t.Discount_Amount.ToString("N2") == DiscDebitAmt.ToString("N2"))
                                    {
                                        //valid values
                                        double finalamt = amounttopay + fee;
                                        if (t.Transfer_Cost.ToString("N2") == finalamt.ToString("N2"))
                                        {
                                            //HttpContext.Current.Session["RewardToken"] = t.Discount_Amount.ToString("N2") + "" + t.Transfer_Cost.ToString("N2");
                                            //if (!sendmoneyhash.Contains("sendmoneystep2.5passed"))
                                            //    HttpContext.Current.Session["SendMoneyToken"] = sendmoneyhash + "sendmoneystep2.5passed"; // change after the session issue
                                            t.CallBackURL = "review-transfer.html";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //check wallet
                else if (t.Wallet_Perm == 0 && t.Wallet_ID > 0 && t.PType_ID != 7)
                {
                    Service.srvWallet srv4 = new Service.srvWallet();
                    DataTable dt = srv4.Get_Wallets(t);
                    if (dt.Rows.Count > 0)
                    {
                        double walletamt = Convert.ToDouble(dt.Rows[0]["Wallet_balance"]);
                        double tot = t.AmountInGBP + t.Transfer_Fees;
                        if (walletamt > 0)
                        {
                            if (walletamt >= tot)
                            {
                                double totcost = walletamt - tot;
                                if (t.Wallet_Amount.ToString("N2") == tot.ToString("N2") && t.Transfer_Cost == 0)
                                {
                                    //HttpContext.Current.Session["RewardToken"] = t.Wallet_Amount.ToString("N2") + "" + t.Transfer_Cost.ToString("N2");
                                    //if (!sendmoneyhash.Contains("sendmoneystep2.5passed"))
                                    //    HttpContext.Current.Session["SendMoneyToken"] = sendmoneyhash + "sendmoneystep2.5passed"; // change after the session issue
                                    t.CallBackURL = "review-transfer.html";
                                }
                            }
                            else
                            {
                                double totcost = tot - walletamt;
                                if (t.Wallet_Amount.ToString("N2") == walletamt.ToString("N2") && totcost.ToString("N2") == t.Transfer_Cost.ToString("N2"))
                                {
                                    //HttpContext.Current.Session["RewardToken"] = t.Wallet_Amount.ToString("N2") + "" + t.Transfer_Cost.ToString("N2");
                                    //if (!sendmoneyhash.Contains("sendmoneystep2.5passed"))
                                    //    HttpContext.Current.Session["SendMoneyToken"] = sendmoneyhash + "sendmoneystep2.5passed"; // change after the session issue
                                    t.CallBackURL = "review-transfer.html";
                                }
                            }
                        }
                    }
                }
                else
                {
                    //if (!sendmoneyhash.Contains("sendmoneystep2.5passed"))
                    //    HttpContext.Current.Session["SendMoneyToken"] = sendmoneyhash + "sendmoneystep2.5passed"; // change after the session issue
                    t.CallBackURL = "review-transfer.html";
                }
            }
            ds.Rows.Add(0, t.CallBackURL);
            return ds;
        }

        public string paysafecashservertoserver(string barcodestring, Model.Transaction obj, int Transaction_ID, string ReferenceNo)
        {
            string paymentStatus = "";
            string StoreDetails = "";


            string[] parts = barcodestring.Split('=');


            string barcodeValue = parts[0];
            string visualization = parts[1];
            string barcodeCountry = parts[2];
            string expiresAt = parts[3];
            string paymentHandleToken = parts[4];
            string amount = parts[5];
            string transactionId = parts[6];
            string currencyCode = parts[7];
            string merchantRefNum = parts[8];




            MySqlCommand _cmdt = new MySqlCommand("Get_PaymentGateway_paysafecash");
            _cmdt.CommandType = CommandType.StoredProcedure;
            _cmdt.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
            _cmdt.Parameters.AddWithValue("_whereclause", " and bank_api_id = 6");
            DataTable dj = db_connection.ExecuteQueryDataTableProcedure(_cmdt);
            if (dj.Rows.Count > 0)
            {
                string refNumber = ReferenceNo;

                string apiurl = Convert.ToString(dj.Rows[0]["API_Url"]);
                string API_Codes = Convert.ToString(dj.Rows[0]["APIUnique_Codes"]);
                Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                string SecretKey = Convert.ToString(o["consumerId"]);
                string ProjectId = Convert.ToString(o["paysafekey"]);
                string User_Name = Convert.ToString(o["UserNeam"]);
                string Password = Convert.ToString(o["PassWord"]);
                string Simulator = Convert.ToString(o["Simulator"]);

                try
                {
                    ServicePointManager.Expect100Continue = true;
                    /*ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                           | SecurityProtocolType.Tls11
                           | SecurityProtocolType.Tls12
                           | SecurityProtocolType.Ssl3;*/
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                           | SecurityProtocolType.Tls11
                           | SecurityProtocolType.Tls12;

                    var client = new RestClient(apiurl + "payments/");
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    string credentials = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes($"{User_Name}:{Password}"));
                    request.AddHeader("Authorization", "Basic " + credentials);
                    request.AddHeader("Content-Type", "application/json");
                    var body = @"{
    ""merchantRefNum"": """ + merchantRefNum + @""",
    ""amount"": """ + amount + @""",
    ""currencyCode"": """ + currencyCode + @""",
    ""dupCheck"": true,
    ""settleWithAuth"": true,
    ""paymentHandleToken"": """ + paymentHandleToken + @""",
    ""description"": """ + Transaction_ID + @"""
}";
                    request.AddParameter("application/json", body, ParameterType.RequestBody);

                    CompanyInfo.InsertActivityLogDetails("Paysafecash server-to-server call request: " + apiurl + "payments" + body, 0, 0, 0, 0, "paysafecashservertoserver", 0, 0, "Send Money", _srvTransactionContext);
                    IRestResponse responsestatus = client.Execute(request);
                    CompanyInfo.InsertActivityLogDetails("Paysafecash server-to-server call response: " + responsestatus.Content, 0, 0, 0, 0, "paysafecashservertoserver", 0, 0, "Send Money", _srvTransactionContext);
                    string transactionStatus = "";
                    if (responsestatus != null)
                    {
                        string resresultstatus = responsestatus.Content;
                        if (!string.IsNullOrEmpty(resresultstatus))
                        {
                            JObject jsonResponse = JObject.Parse(responsestatus.Content);

                            // Access the value of "status"
                            paymentStatus = jsonResponse["status"].ToString();
                        }
                        else
                        {
                            string errorMessage = responsestatus?.Content ?? "Unknown error";

                            Console.WriteLine("API call failed: " + errorMessage);
                        }
                        if (paymentStatus == "PROCESSING")
                        {
                            try
                            {

                                MySqlCommand _cmd = new MySqlCommand("insert_paysafe_transactions");
                                _cmd.CommandType = CommandType.StoredProcedure;


                                _cmd.Parameters.AddWithValue("_paymenthandle_token", paymentHandleToken);
                                _cmd.Parameters.AddWithValue("_merchent_refrence_num", merchantRefNum);
                                _cmd.Parameters.AddWithValue("_currency_code", currencyCode);
                                _cmd.Parameters.AddWithValue("_amount", amount);
                                _cmd.Parameters.AddWithValue("_transaction_id", Transaction_ID);
                                _cmd.Parameters.AddWithValue("_BarcodeDetails", barcodestring);
                                _cmd.Parameters.AddWithValue("_StoreDetails", obj.Store_Adder);
                                _cmd.Parameters.AddWithValue("_expire_time", expiresAt.ToString());
                                int MSG = db_connection.ExecuteNonQueryProcedure(_cmd);
                            }
                            catch { }

                            return barcodestring;
                        }
                        else
                        {
                            try
                            {

                                MySqlCommand _cmd = new MySqlCommand("insert_paysafe_transactions");
                                _cmd.CommandType = CommandType.StoredProcedure;


                                _cmd.Parameters.AddWithValue("_paymenthandle_token", paymentHandleToken);
                                _cmd.Parameters.AddWithValue("_merchent_refrence_num", merchantRefNum);
                                _cmd.Parameters.AddWithValue("_currency_code", currencyCode);
                                _cmd.Parameters.AddWithValue("_amount", amount);
                                _cmd.Parameters.AddWithValue("_transaction_id", Transaction_ID);
                                _cmd.Parameters.AddWithValue("_BarcodeDetails", barcodestring);
                                _cmd.Parameters.AddWithValue("_StoreDetails", obj.Store_Adder);
                                _cmd.Parameters.AddWithValue("_expire_time", expiresAt.ToString());
                                int MSG = db_connection.ExecuteNonQueryProcedure(_cmd);
                            }
                            catch { }

                        }

                    }
                }
                catch (Exception ex)
                {

                    Console.WriteLine("An error occurred: " + ex.Message);
                }

            }
            return paymentStatus;
        }





        public string GetPaysafecashBarcode(string ReferenceNo, string Cust_ReferanceNo, string AmountInGBP, Model.Transaction obj, int apiID, int Transaction_ID)
        {
            CompanyInfo.InsertActivityLogDetails("Inside The Paysafe Barcode generate: ", 0, 0, 0, 0, "GetPaysafecashBarcode", 0, 0, "Send Money", _srvTransactionContext);
            DataTable dt = new DataTable();

            //string id;
            string paymentType;
            string paymentHandleToken = "";
            string merchantRefNum = "";
            string currencyCode = "";
            DateTime txnTime;
            string street;
            string street2;
            string city;
            string zip;
            string country;
            string customerIp;
            string status = "";
            bool liveMode;
            string simulator;
            string usage;
            string action;
            string executionMode;
            int amount = 0;
            string dynamicDescriptor;
            string phone;
            int timeToLiveSeconds;
            string gatewayResponseId;
            string processor;
            string transactionType;
            string gatewayReconciliationId;
            DateTime updatedTime;
            DateTime statusTime;
            string consumerId;
            int minAgeRestriction;
            string kycLevelRestriction;
            string countryRestriction;
            string barcodeValue = "";
            string visualization = ""; ;
            string barcodeCountry = ""; ;
            string expiresAt = ""; ;
            string StoreDetails = "";
            //var barcodes1 ="";
            string barcodestring = "";
            string country_code = "";
            string currency_code = "";
            DateTime dateTime = new DateTime();
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(obj.Customer_ID, true));
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("RedirectURL", typeof(string));
            string return_Url = "";
            string id = "";
            try
            {
                MySqlCommand _cmdt = new MySqlCommand("Get_PaymentGateway_paysafecash");
                _cmdt.CommandType = CommandType.StoredProcedure;
                _cmdt.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
                _cmdt.Parameters.AddWithValue("_whereclause", " and bank_api_id = 6");
                DataTable dj = db_connection.ExecuteQueryDataTableProcedure(_cmdt);
                if (dj.Rows.Count > 0)
                {
                    string refNumber = ReferenceNo;

                    string apiurl = Convert.ToString(dj.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(dj.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string SecretKey = Convert.ToString(o["consumerId"]);
                    string ProjectId = Convert.ToString(o["paysafekey"]);
                    string User_Name = Convert.ToString(o["UserNeam"]);
                    string Password = Convert.ToString(o["PassWord"]);
                    string Simulator = Convert.ToString(o["Simulator"]);


                    string user_name = Convert.ToString(dj.Rows[0]["UserName"]);

                    string Customer_Reference = Convert.ToString("Test");

                    MySqlCommand cmd = new MySqlCommand("GetCustDetailsByID");
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("cust_ID", Customer_ID);
                    DataTable dtc = db_connection.ExecuteQueryDataTableProcedure(cmd);

                    string returnUri = "";

                    string name = Convert.ToString(dtc.Rows[0]["Full_name"]);

                    string bname = Convert.ToString(name).Trim(); string bfname = bname; string blname = " ";
                    if (bname.Contains(" "))
                    {
                        string[] spli = bname.Split(' ');
                        if (spli.Length > 1) { bfname = bname.Substring(0, (bname.Length - spli[spli.Length - 1].Length)); blname = spli[spli.Length - 1]; }
                    }



                    string email = Convert.ToString(dtc.Rows[0]["Email_ID"]);
                    string addr1 = Convert.ToString(dtc.Rows[0]["Addressline_2"]);
                    phone = Convert.ToString(dtc.Rows[0]["Phone_Number"]);
                    int Country_ID = Convert.ToInt32(dtc.Rows[0]["Country_ID"]);

                    try
                    {
                        MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                        _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                        string whereclauseiso = " and Country_ID = " + Country_ID + "  ";
                        _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                        _cmd_isoCode.Parameters.AddWithValue("_Client_ID", obj.Client_ID);

                        DataTable dtISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                        if (dtISO.Rows.Count > 0)
                        {
                            country_code = Convert.ToString(dtISO.Rows[0]["ISO_Code"]).Trim();
                            currency_code = Convert.ToString(dtISO.Rows[0]["Country_Currency"]).Trim();
                        }
                    }
                    catch (Exception ex) { }


                    city = "";


                    zip = Convert.ToString(dtc.Rows[0]["Post_Code"]);
                    string dob = Convert.ToDateTime(dtc.Rows[0]["DateOf_Birth"]).ToString("yyyy-MM-dd");
                    int city_id = Convert.ToInt32(dtc.Rows[0]["City_ID"]);
                    string phone_code = Convert.ToString(dtc.Rows[0]["Phone_number_code"]);
                    //phone = "+" + phone_code + phone;
                    try
                    {
                        MySqlCommand _cmd_custCity = new MySqlCommand("sp_select_city_detailsbyid");
                        _cmd_custCity.CommandType = CommandType.StoredProcedure;
                        string whereclausecustCity = "   " + city_id + "  ";
                        _cmd_custCity.Parameters.AddWithValue("_whereclause", whereclausecustCity);

                        DataTable dtcustCity = db_connection.ExecuteQueryDataTableProcedure(_cmd_custCity);
                        if (dtcustCity.Rows.Count > 0)
                        {
                            city = Convert.ToString(dtcustCity.Rows[0]["City_Name"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    if (addr1 == "")
                    {
                        addr1 = city;
                    }
                    // Wallet Scenario
                    string refer = "";
                    double transfer_cost = obj.TotalAmount;
                    if (obj.Wallet_Currency_type == 1 && obj.Wallet_Perm != null && obj.Wallet_Perm != -1)
                    {
                        if (Convert.ToString(obj.Wallet_Perm) == "0")
                        {
                            if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                            {
                                transfer_cost = obj.Transfer_Cost;
                            }
                        }
                    }

                    if (obj.Discount_Perm != null && obj.Discount_Perm != -1)
                    {
                        if (Convert.ToString(obj.Discount_Perm) == "0")
                        {
                            if (Convert.ToString(obj.Transfer_Cost) != "" && Convert.ToString(obj.Transfer_Cost) != null)
                            {
                                transfer_cost = obj.Transfer_Cost;
                            }
                        }
                    }
                    AmountInGBP = Convert.ToString(obj.AmountInGBP + obj.Transfer_Fees);
                    double t_amount = Convert.ToDouble(AmountInGBP);
                    t_amount = t_amount * 100;
                    // double AmountInGBP1 = Convert.ToInt32(AmountInGBP) * 100;
                    try
                    {
                        ServicePointManager.Expect100Continue = true;
                        /*ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                               | SecurityProtocolType.Tls11
                               | SecurityProtocolType.Tls12
                               | SecurityProtocolType.Ssl3;*/
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                               | SecurityProtocolType.Tls11
                               | SecurityProtocolType.Tls12
                               ;
                        var client = new RestClient(apiurl + "paymenthandles");
                        client.Timeout = -1;
                        var request = new RestRequest(Method.POST);
                        string credentials = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes($"{User_Name}:{Password}"));
                        request.AddHeader("Authorization", "Basic " + credentials);
                        request.AddHeader("Content-Type", "application/json");
                        request.AddHeader("Simulator", Simulator);
                        var body = $@"{{
    ""merchantRefNum"": ""{ReferenceNo}"", 
    ""paymentType"": ""PAYSAFECASH"",
    ""transactionType"":""PAYMENT"",
    ""accountId"": ""{user_name}"", 
    ""amount"": ""{t_amount}"",  
    ""currencyCode"": ""{currency_code}"", 
    ""paysafecash"": {{
        ""consumerId"": ""merchantclientid""
        
    }},
    ""profile"": {{
        ""firstName"": ""{bfname}"",  
        ""lastName"": ""{blname}"",   
        ""phone"": ""{phone}"" 
    }},
    ""billingDetails"": {{
        ""nickName"": ""{addr1}"", 
        ""street"": ""{addr1}"",   
        ""street2"": ""{addr1}"", 
        ""city"": ""{city}"",      
        ""zip"": ""{zip}"",       
        ""country"": ""{country_code}"" 
    }},
    ""merchantDescriptor"": {{
        ""dynamicDescriptor"": ""OnlineStore"",
        ""phone"": ""{phone}""  
    }},
    ""returnLinks"": [
        {{
            ""rel"": ""on_completed"",
            ""href"": ""https://webhook.site/Jemaine-webhooks?paysafecash=success"", 
            ""method"": ""GET""
        }},
        {{
            ""rel"": ""on_failed"",
            ""href"": ""https://webhook.site/Jemaine-webhooks?paysafecash=failed"",  
            ""method"": ""GET""
        }},
        {{
            ""rel"": ""default"",
            ""href"": ""https://webhook.site/Jemaine-webhooks?default=true"",  
            ""method"": ""GET""
        }}
    ]
}}";


                
                        request.AddParameter("application/json", body, ParameterType.RequestBody);

                        CompanyInfo.InsertActivityLogDetails("Paysafecash Create Transaction request: " + apiurl + "/paymenthub/v1/paymenthandles" + body, 0, 0, 0, 0, "GetPaysafecashBarcode", 0, 0, "Send Money", _srvTransactionContext);

                        IRestResponse responsestatus = client.Execute(request);
                        CompanyInfo.InsertActivityLogDetails("Paysafecash Create Transaction Response: " + responsestatus.Content, 0, 0, 0, 0, "GetPaysafecashBarcode", 0, 0, "Send Money", _srvTransactionContext);

                        string transactionStatus = "";
                        if (responsestatus != null)
                        {
                            string resresultstatus = responsestatus.Content;



                            try
                            {
                                var jsonObject = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(resresultstatus);

                                try
                                {
                                    id = jsonObject.id;
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine("Error accessing id: " + ex.Message);
                                }

                                try
                                {
                                    paymentType = jsonObject.paymentType;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    paymentHandleToken = jsonObject.paymentHandleToken;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    merchantRefNum = jsonObject.merchantRefNum;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    currencyCode = jsonObject.currencyCode;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    txnTime = jsonObject.txnTime;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    var billingDetails = jsonObject.billingDetails;
                                    street = billingDetails.street;
                                    street2 = billingDetails.street2;
                                    city = billingDetails.city;
                                    zip = billingDetails.zip;
                                    country = billingDetails.country;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    customerIp = jsonObject.customerIp;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    status = jsonObject.status;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    liveMode = jsonObject.liveMode;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    simulator = jsonObject.simulator;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    usage = jsonObject.usage;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    action = jsonObject.action;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    executionMode = jsonObject.executionMode;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    amount = jsonObject.amount;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    var merchantDescriptor = jsonObject.merchantDescriptor;
                                    dynamicDescriptor = merchantDescriptor.dynamicDescriptor;
                                    phone = merchantDescriptor.phone;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    timeToLiveSeconds = jsonObject.timeToLiveSeconds;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    var gatewayResponse = jsonObject.gatewayResponse;
                                    gatewayResponseId = gatewayResponse.id;
                                    processor = gatewayResponse.processor;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    var returnLinks = jsonObject.returnLinks;
                                    foreach (var link in returnLinks)
                                    {
                                        string rel = link.rel;
                                        string href = link.href;
                                        // Access return links here as needed
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    transactionType = jsonObject.transactionType;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    gatewayReconciliationId = jsonObject.gatewayReconciliationId;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    updatedTime = jsonObject.updatedTime;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    statusTime = jsonObject.statusTime;
                                }
                                catch (Exception ex)
                                {

                                }

                                try
                                {
                                    var paysafecash = jsonObject.paysafecash;
                                    consumerId = paysafecash.consumerId;
                                    //minAgeRestriction = paysafecash.minAgeRestriction;
                                    kycLevelRestriction = paysafecash.kycLevelRestriction;
                                    //countryRestriction = paysafecash.countryRestriction;

                                    var barcodes = paysafecash.barcodes;
                                    foreach (var barcode in barcodes)
                                    {
                                        barcodeValue = barcode.barcode;
                                        visualization = barcode.visualization;
                                        barcodeCountry = barcode.country;
                                        expiresAt = barcode.expiresAt;

                                        try
                                        {

                                            long unixTimeMilliseconds = long.Parse(expiresAt);


                                            dateTime = DateTimeOffset.FromUnixTimeMilliseconds(unixTimeMilliseconds).UtcDateTime;

                                        }
                                        catch { }
                                        // You can now use these variables as needed
                                    }
                                    if (status == "PAYABLE")
                                    {
                                        barcodestring = barcodeValue + "=" + visualization + "=" + barcodeCountry + "=" + dateTime + "=" + paymentHandleToken + "=" + amount + "=" + Transaction_ID + "=" + currencyCode + "=" + merchantRefNum;
                                    }
                                    else
                                    {
                                        barcodestring = "FAILED";
                                    }
                                }
                                catch (Exception ex)
                                {

                                }
                            }
                            catch (Exception ex)
                            {

                            }

                        }
                    }
                    catch
                    {

                        return barcodestring;
                    }


                    string paymentStatus = "";

                }
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("TrueLayer create payment link Error : " + ex.ToString(), 0, 0, 0, 0, "GetTrueLayerLink", 0, 0, "Send Money", _srvTransactionContext);
            }
            return barcodestring;
        }


        public DataTable GetStoreAddress(Model.Transaction obj )
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Address", typeof(string));
            string act = "";
            double lat = 0.0;
            double longitude = 0.0;
            MySqlCommand _cmdt = new MySqlCommand("Get_PaymentGateway_paysafecash");
            _cmdt.CommandType = CommandType.StoredProcedure;
            _cmdt.Parameters.AddWithValue("_Client_ID", obj.Client_ID);
            _cmdt.Parameters.AddWithValue("_whereclause", " and bank_api_id = 6");
            DataTable dj = db_connection.ExecuteQueryDataTableProcedure(_cmdt);
            if (dj.Rows.Count > 0)
            {
                //string refNumber = ReferenceNo;

                string apiurl = Convert.ToString(dj.Rows[0]["API_Url"]);
                string API_Codes = Convert.ToString(dj.Rows[0]["APIUnique_Codes"]);
                Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                string SecretKey = Convert.ToString(o["consumerId"]);
                string ProjectId = Convert.ToString(o["paysafekey"]);
                string User_Name = Convert.ToString(o["UserNeam"]);
                string Password = Convert.ToString(o["PassWord"]);


                string user_name = Convert.ToString(dj.Rows[0]["UserName"]);

                string Customer_Reference = Convert.ToString("Test");

                DataTable dtc = CompanyInfo.get(obj.Client_ID, _srvTransactionContext);
                // DataTable dtcust = (DataTable)getCustomerDetails(obj.Client_ID, obj.Customer_ID);

                //string IPAddress1 = HttpContext.Current.Request.UserHostAddress;
                string IPAddress1 = obj.ipAddress;
                string browserinfo = "IP Address: " + IPAddress1;
                CompanyInfo.InsertActivityLogDetails("Get Geolocation IPAddress1: " + browserinfo, 0, 0, 0, 0, "GetStoreAddress", 0, 0, "Send Money", _srvTransactionContext);

                try
                {
                    ServicePointManager.Expect100Continue = true;
                    /*ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                           | SecurityProtocolType.Tls11
                           | SecurityProtocolType.Tls12
                           | SecurityProtocolType.Tls13
                           | SecurityProtocolType.Ssl3;*/

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                           | SecurityProtocolType.Tls11
                           | SecurityProtocolType.Tls12
                           | SecurityProtocolType.Tls13
                           ;
                    System.Net.ServicePointManager.ServerCertificateValidationCallback += delegate { return true; };
                    var client = new RestClient("https://tools.keycdn.com/geo.json?host=" + IPAddress1);
                    act = act + " RestClient query :" + "https://tools.keycdn.com/geo.json?host=" + IPAddress1;
                    CompanyInfo.InsertActivityLogDetails("Get Geolocation Request: " + act, 0, 0, 0, 0, "GetStoreAddress", 0, 0, "Send Money", _srvTransactionContext);

                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    client.UserAgent = "keycdn-tools:" + Convert.ToString(dtc.Rows[0]["company_website"]); //dtc.Rows[0]["Company_URL_Customer"] 
                    act = act + " client.UserAgent :" + "keycdn-tools:" + Convert.ToString(dtc.Rows[0]["company_website"]);
                    CompanyInfo.InsertActivityLogDetails("Get Geolocation  client.UserAgent: " + act, 0, 0, 0, 0, "GetStoreAddress", 0, 0, "Send Money", _srvTransactionContext);

                    //keycdn-tools:https://www.calyx-solutions.com
                    request.AddHeader("Accept-Encoding", "gzip, deflate, br");

                    IRestResponse response = client.Execute(request);


                    CompanyInfo.InsertActivityLogDetails("Get Geolocation Response: " + response.Content, 0, 0, 0, 0, "GetStoreAddress", 0, 0, "Send Money", _srvTransactionContext);
                    var jsonObject = JObject.Parse(response.Content);


                    lat = (double)jsonObject["data"]["geo"]["latitude"];
                    longitude = (double)jsonObject["data"]["geo"]["longitude"];
                }
                catch { }



                if (lat <= 0)
                {
                    lat = 48.856614;
                }
                if (longitude <= 0)
                {
                    longitude = 2.3522219;
                }

                double radius = 1000;
                string moneyFlowDirection = "IN";
                try
                {
                    ServicePointManager.Expect100Continue = true;
                    /*ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                           | SecurityProtocolType.Tls11
                           | SecurityProtocolType.Tls12
                           | SecurityProtocolType.Ssl3;*/
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                           | SecurityProtocolType.Tls11
                           | SecurityProtocolType.Tls12
                           ;

                    var client = new RestClient(apiurl + "paysafecashstores?lat=" + lat + "&long=" + longitude + "&radius=" + radius + "&moneyFlowDirection=" + moneyFlowDirection + "&accountId=" + user_name);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    string credentials = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes($"{User_Name}:{Password}"));
                    request.AddHeader("Authorization", "Basic " + credentials);
                    request.AddHeader("Content-Type", "application/json");
                    CompanyInfo.InsertActivityLogDetails("Paysafecash Get stores request: " + apiurl + "paysafecashstores?lat=" + lat + "&long=" + longitude + "&radius=" + radius + "&moneyFlowDirection=" + moneyFlowDirection + "&accountId=" + user_name, 0, 0, 0, 0, "GetStoreAddress", 0, 0, "Send Money", _srvTransactionContext);
                    IRestResponse responsestatus = client.Execute(request);
                    CompanyInfo.InsertActivityLogDetails("Paysafecash Get stores response: " + responsestatus.Content, 0, 0, 0, 0, "GetStoreAddress", 0, 0, "Send Money", _srvTransactionContext);
                    if (responsestatus != null)
                    {
                        string resresultstatus = responsestatus.Content;

                        JObject jsonResponse = JObject.Parse(resresultstatus);
                        JArray storesArray = (JArray)jsonResponse["stores"];

                        foreach (var store in storesArray)
                        {
                            string street = store["address"]?["street"]?.ToString();
                            string city = store["address"]?["city"]?.ToString();
                            string name = store["name"]?.ToString();

                            string Address = name + "," + street + "," + city;

                            dt.Rows.Add(Address);
                        }

                    }
                }
                catch (Exception ex)
                {

                    Console.WriteLine("An error occurred: " + ex.Message);
                }

            }
            return dt;
        }


        public DataTable GetPaysafeBarcode(Model.Transaction obj)
        {
            DataTable dt = new DataTable();

            MySqlCommand _cmdt = new MySqlCommand("Get_Paysafe_Transaction");
            _cmdt.CommandType = CommandType.StoredProcedure;

            _cmdt.Parameters.AddWithValue("_transaction_id", obj.Transaction_ID);
            dt = db_connection.ExecuteQueryDataTableProcedure(_cmdt);

            return dt;
        }


        #region Fire
        public DataTable GetFireLink(Model.Transaction t, string refNumber, double sendingAmt, int PType_ID)//rushikesh
        {
            CompanyInfo.InsertActivityLogDetails("Request for  Fire URL generate: ", 0, 0, 0, 0, "GetFireLink", 0, 0, "Send Money", _srvTransactionContext);
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("RedirectURL", typeof(string));
            string access_tocken = "";
            string redirectURL = "";
            try
            {
                DataTable dtc = CompanyInfo.get(t.Client_ID, _srvTransactionContext);
                string Record_Insert_DateTime = CompanyInfo.gettime(t.Client_ID, _srvTransactionContext);
                string return_url = dtc.Rows[0]["Company_URL_Customer"].ToString();
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", 10);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", reference = "", currency = "", applicationId = "", merchantName = "";

                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
                CompanyInfo.InsertActivityLogDetails("Fire pay Start execution ", t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetFireLink", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string ClientId = Convert.ToString(o["ClientId"]);
                    string RefreshToken = Convert.ToString(o["RefreshToken"]);
                    string ClientKey = Convert.ToString(o["ClientKey"]);
                    string grant_type = Convert.ToString(o["grant_type"]);
                    string redirect_url = Convert.ToString(o["redirect_url"]);



                    #region codeforLatestFiedlds
                    string customer_account_id = "";
                    string customer_first_name = "";
                    string customer_last_name = "";
                    string customer_ip_address = Convert.ToString(o["customer_ip_address"]);
                    string customer_address = "";
                    string recepient_wallet_owner = "";
                    string recepient_wallet_id = "";
                    int benfId = Convert.ToInt32(t.Beneficiary_ID);
                    int custCityId = 0;

                    MySqlCommand _cmd_custdetails = new MySqlCommand("GetWallets");
                    _cmd_custdetails.CommandType = CommandType.StoredProcedure;
                    string whereclause = " and w.Wallet_ID = " + t.Wallet_ID + "  and w.Delete_Status=0  ";
                    _cmd_custdetails.Parameters.AddWithValue("_whereclause", whereclause);
                    DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd_custdetails);
                    if (dtwallets.Rows.Count > 0)
                    {
                        customer_account_id = Convert.ToString(dtwallets.Rows[0]["Cust_Reference"]).Trim();
                        customer_first_name = Convert.ToString(dtwallets.Rows[0]["First_Name"]).Trim();
                        customer_last_name = Convert.ToString(dtwallets.Rows[0]["Last_Name"]).Trim();
                        recepient_wallet_owner = customer_first_name + " " + customer_last_name;
                        recepient_wallet_id = Convert.ToString(dtwallets.Rows[0]["Wallet_Reference"]).Trim();
                        customer_address = Convert.ToString(dtwallets.Rows[0]["Nationality"]).Trim();
                        custCityId = Convert.ToInt32(dtwallets.Rows[0]["City_ID"]);
                    }

                    #endregion codeforLatestFiedlds

                    double transFees = 0.00;
                    try
                    {
                        transFees = Convert.ToDouble(t.Transfer_Fees);
                    }
                    catch { }

                    //string payment_amount = Convert.ToString(sendingAmt);
                    string payment_amount = Convert.ToString((sendingAmt + transFees) * 100);

                    // For wallet code
                    double transfer_cost = t.TotalAmount;
                    if (t.Wallet_Perm != null && t.Wallet_Perm != -1)
                    {
                        if (Convert.ToString(t.Wallet_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }
                    if (t.Discount_Perm != null && t.Discount_Perm != -1)
                    {
                        if (Convert.ToString(t.Discount_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }
                    transfer_cost = transfer_cost * 100;
                    payment_amount = Convert.ToString(transfer_cost);

                    long nonce = DateTimeOffset.UtcNow.ToUnixTimeSeconds();



                    string clientSecret = GenerateSHA256Hash(nonce.ToString() + ClientKey);


                    try
                    {

                        ServicePointManager.Expect100Continue = true;
                        /*ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                               | SecurityProtocolType.Tls11
                               | SecurityProtocolType.Tls12
                               | SecurityProtocolType.Ssl3;*/
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                             | SecurityProtocolType.Tls11
                             | SecurityProtocolType.Tls12
                             ;

                        var client = new RestClient(apiurl + "/business/v1/apps/accesstokens");
                        client.Timeout = -1;
                        var request = new RestRequest(Method.POST);
                        request.AddHeader("accept", "application/json");
                        request.AddHeader("content-type", "application/json");
                        var body = @"{
            " + "\n" +
                                    @"    ""clientId"":""" + ClientId + @""",
            " + "\n" +
                                    @"    ""refreshToken"":""" + RefreshToken + @""",
            " + "\n" +
                                    @"    ""nonce"":""" + nonce + @""",
            " + "\n" +
                                    @"    ""grantType"":""" + grant_type + @""",
            " + "\n" +
                                    @"    ""clientSecret"":""" + clientSecret + @"""
            " + "\n" +
                                    @"
            " + "\n" +
                                    @"}";



                        request.AddParameter("application/json", body, ParameterType.RequestBody);
                        CompanyInfo.InsertActivityLogDetails("Fire Generate AccessTocken Request: " + apiurl + "/business/v1/apps/accesstokens" + body, 0, 0, 0, 0, "GetFireLink", 0, 0, "Send Money", _srvTransactionContext);

                        IRestResponse response = client.Execute(request);
                        CompanyInfo.InsertActivityLogDetails("Fire Generate AccessTocken Response: " + response.Content, 0, 0, 0, 0, "GetFireLink", 0, 0, "Send Money", _srvTransactionContext);

                        dynamic json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);

                        var jsonObject = JObject.Parse(response.Content);

                        access_tocken = Convert.ToString(jsonObject["accessToken"]);

                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Create Fire AccessTocken " + ex.Message.Replace("\'", "\\'"), 0, "GetFireLink", 0, 0);
                    }

                    int ican_num = 0;
                    currency = t.FromCurrency_Code;
                    string type = "OTHER";
                    string amount = payment_amount;
                    string myRef = refNumber;
                    string description = t.Purpose;
                    //string returnUrl = return_url + "/Success.html";//"https://example.com/callback";
                    string returnUrl = return_url + "success";//"https://example.com/callback";

                    try
                    {

                        var client = new RestClient(apiurl + "/business/v1/accounts");
                        client.Timeout = -1;
                        var request = new RestRequest(Method.GET);
                        request.AddHeader("accept", "application/json");
                        request.AddHeader("content-type", "application/json");
                        request.AddHeader("Authorization", "Bearer " + access_tocken);
                        CompanyInfo.InsertActivityLogDetails("Fire Get Account Currency Request: " + apiurl + "//business/v1/accounts", 0, 0, 0, 0, "GetFireLink", 0, 0, "Send Money", _srvTransactionContext);

                        var response = client.Execute(request);
                        CompanyInfo.InsertActivityLogDetails("Fire Get Account Currency Response: " + response.Content, 0, 0, 0, 0, "GetFireLink", 0, 0, "Send Money", _srvTransactionContext);

                        var jsonObject = JObject.Parse(response.Content);
                        var gbpAccounts = jsonObject["accounts"]
                        .Where(account => account["currency"]["code"].ToString() == "GBP");


                        foreach (var account in gbpAccounts)
                        {
                            ican_num = Convert.ToInt32(account["ican"]);
                        }
                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Get Account Currency For Fire" + ex.Message.Replace("\'", "\\'"), 0, "GetFireLink", 0, 0);
                    }


                    try
                    {
                        var client = new RestClient(apiurl + "/business/v1/paymentrequests");
                        client.Timeout = -1;
                        var request = new RestRequest(Method.POST);
                        request.AddHeader("accept", "application/json");
                        request.AddHeader("content-type", "application/json");
                        request.AddHeader("Authorization", "Bearer " + access_tocken);


                        var body = @"{
            " + "\n" +
                        @"   ""currency"":""" + currency + @""",
            " + "\n" +
                        @"   ""type"":""" + type + @""",
            " + "\n" +
                        @"   ""icanTo"":""" + ican_num + @""",
            " + "\n" +
                        @"   ""amount"":""" + amount + @""",
            " + "\n" +
                        @"   ""myRef"":""" + myRef + @""",
            " + "\n" +
                        @"   ""description"":""" + description + @""",
            " + "\n" +
                        @"   ""returnUrl"":""" + returnUrl + @"""
            " + "\n" +
                        @"}";

                        request.AddParameter("application/json", body, ParameterType.RequestBody);
                        CompanyInfo.InsertActivityLogDetails("Fire Generate Payment Link Request: " + apiurl + "/business/v1/paymentrequests" + body, 0, 0, 0, 0, "GetFireLink", 0, 0, "Send Money", _srvTransactionContext);

                        var response = client.Execute(request);
                        CompanyInfo.InsertActivityLogDetails("Fire Generate Payment Link Response: " + response.Content, 0, 0, 0, 0, "GetFireLink", 0, 0, "Send Money", _srvTransactionContext);

                        dynamic json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);

                        var jsonObject = JObject.Parse(response.Content);

                        string payment_code = Convert.ToString(jsonObject["code"]);

                        if (payment_code != "" || payment_code != null)
                        {
                            redirectURL = redirect_url + payment_code;
                        }

                        try
                        {

                            cmd = new MySqlCommand("Insert_instantbankingpartner_ref");
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("_ReferenceNo", myRef);
                            cmd.Parameters.AddWithValue("_payinpartnernumber", payment_code);
                            cmd.Parameters.AddWithValue("_apiid", "10");
                            cmd.Parameters.AddWithValue("_record_datetime", Record_Insert_DateTime);
                            dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                        }
                        catch { }

                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Create PaymentLink For Fire" + ex.Message.Replace("\'", "\\'"), 0, "GetFireLink", 0, 0);
                    }




                    dt.Rows.Add("", redirectURL);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Fire PayLink Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetFireLink", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            }

            return dt;
        }

        private static string GenerateSHA256Hash(string input)//rushikesh
        {
            using (SHA256 sha256 = SHA256.Create())
            {
                byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input));
                StringBuilder builder = new StringBuilder();
                foreach (byte b in bytes)
                {
                    builder.Append(b.ToString("x2"));
                }
                return builder.ToString();
            }
        }
        public DataTable GetFireStatus(Model.Transaction t, string Transaction_id)//rushikesh
        {
            DataTable dt = new DataTable();
            string status = "";
            dt.Columns.Add("Status", typeof(string));
            string access_tocken = "";
            CompanyInfo.InsertActivityLogDetails("Fire Checkstatus Inside :" + "Transaction_id :" + Transaction_id, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetFireStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            string payinpartnernumber = "";
            string Auth_URL = "";
            string Record_Insert_DateTime = CompanyInfo.gettime(t.Client_ID, _srvTransactionContext);
            try
            {

                MySqlCommand cmdd = new MySqlCommand("Insert_instantbankingpartner_ref");
                cmdd.CommandType = CommandType.StoredProcedure;
                cmdd.Parameters.AddWithValue("_ReferenceNo", t.ReferenceNo);
                cmdd.Parameters.AddWithValue("_payinpartnernumber", Transaction_id);//Click Send API ID
                cmdd.Parameters.AddWithValue("_apiid", 10);
                cmdd.Parameters.AddWithValue("_record_datetime", Record_Insert_DateTime);// API Status
                DataTable dttt = db_connection.ExecuteQueryDataTableProcedure(cmdd);
            }
            catch
            {

            }





            MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("_API_ID", 10);//Click Send API ID
            cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            cmd.Parameters.AddWithValue("_status", 0);// API Status
            DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
            int api_id = 0; string apiurl = "", apiuser = "", apipass = "", accesscode = "", reference = "", currency = "", applicationId = "", merchantName = "";

            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            CompanyInfo.InsertActivityLogDetails("Fire pay Start execution ", t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetFireStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            if (dtt.Rows.Count > 0)
            {
                api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                string ClientId = Convert.ToString(o["ClientId"]);
                string RefreshToken = Convert.ToString(o["RefreshToken"]);
                string ClientKey = Convert.ToString(o["ClientKey"]);
                string grant_type = Convert.ToString(o["grant_type"]);
                string redirect_url = Convert.ToString(o["redirect_url"]);


                long nonce = DateTimeOffset.UtcNow.ToUnixTimeSeconds();



                string clientSecret = GenerateSHA256Hash(nonce.ToString() + ClientKey);

                try
                {

                    ServicePointManager.Expect100Continue = true;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                           | SecurityProtocolType.Tls11
                           | SecurityProtocolType.Tls12
                           ;
                    var client = new RestClient(apiurl + "/business/v1/apps/accesstokens");
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("accept", "application/json");
                    request.AddHeader("content-type", "application/json");
                    var body = @"{
            " + "\n" +
                                @"    ""clientId"":""" + ClientId + @""",
            " + "\n" +
                                @"    ""refreshToken"":""" + RefreshToken + @""",
            "
              + "\n" +
                                @"    ""nonce"":""" + nonce + @""",
            " + "\n" +
                                @"    ""grantType"":""" + grant_type + @""",
            "
              + "\n" +
                                @"    ""clientSecret"":""" + clientSecret + @"""
            " + "\n" +
                                @"
            " + "\n" +
                                @"}";



                    request.AddParameter("application/json", body, ParameterType.RequestBody);
                    CompanyInfo.InsertActivityLogDetails("Fire Generate AccessTocken Request: " + apiurl + "//business/v1/apps/accesstokens" + body, 0, 0, 0, 0, "GetFireStatus", 0, 0, "Send Money", _srvTransactionContext);

                    IRestResponse response = client.Execute(request);
                    CompanyInfo.InsertActivityLogDetails("Fire Generate AccessTocken Response: " + response.Content, 0, 0, 0, 0, "GetFireStatus", 0, 0, "Send Money", _srvTransactionContext);

                    dynamic json = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);

                    var jsonObject = JObject.Parse(response.Content);

                    access_tocken = Convert.ToString(jsonObject["accessToken"]);
                }
                catch (Exception ex)
                {
                    string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Create AccessTocken For Fire" + ex.Message.Replace("\'", "\\'"), 0, "GetFireStatus", 0, 0);
                }

                try
                {
                    //var client = new RestClient(apiurl + "/business/v1/payments/" + Transaction_id);
                    //client.Timeout = -1;
                    //var request = new RestRequest(Method.GET);
                    //request.AddHeader("accept", "application/json");
                    //request.AddHeader("content-type", "application/json");
                    //request.AddHeader("Authorization", "Bearer " + access_tocken);
                    //CompanyInfo.InsertActivityLogDetails("Fire CheckStatus Request: " + apiurl + "/business/v1/payments/" + Transaction_id, 0, 0, 0, 0, "GetFireStatus", 0, 0, "Send Money");

                    //var response = client.Execute(request);
                    //CompanyInfo.InsertActivityLogDetails("Fire CheckStatus Response: " + response.Content, 0, 0, 0, 0, "GetFireStatus", 0, 0, "Send Money");

                    //var jsonObject = JObject.Parse(response.Content);



                    cmd = new MySqlCommand("get_thirdpart_instantbankingpartner_ref");
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("transaction_ref", t.ReferenceNo);

                    dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);



                    if (dtt.Rows.Count > 0)
                    {
                        payinpartnernumber = Convert.ToString(dtt.Rows[0]["payinpartnernumber"]);
                    }







                    var client = new RestClient(apiurl + "/business/v1/paymentrequests/" + payinpartnernumber + "/payments");
                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    request.AddHeader("accept", "application/json");
                    request.AddHeader("content-type", "application/json");
                    request.AddHeader("Authorization", "Bearer " + access_tocken);
                    CompanyInfo.InsertActivityLogDetails("Fire CheckStatus Request: " + apiurl + "/business/v1/payments/" + Transaction_id, 0, 0, 0, 0, "GetFireStatus", 0, 0, "Send Money", _srvTransactionContext);

                    var response = client.Execute(request);
                    CompanyInfo.InsertActivityLogDetails("Fire CheckStatus Response: " + response.Content, 0, 0, 0, 0, "GetFireStatus", 0, 0, "Send Money", _srvTransactionContext);

                    var jsonObject = JObject.Parse(response.Content);

                    var paymentRequest = jsonObject["pisPaymentRequestPayments"]?[0];
                    status = (string)paymentRequest["status"];



                    //  status = Convert.ToString(jsonObject["status"]);



                }
                catch (Exception ex)
                {
                    string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In CheckStatus For Fire" + ex.Message.Replace("\'", "\\'"), 0, "GetFireStatus", 0, 0);
                }


                dt.Rows.Add(status);


            }
            return dt;
        }
        #endregion Fire

        public DataTable GetMTBSPaymentLink(Model.Transaction t)//Rushikesh MTBS
        {
            string refNumber = t.ReferenceNo;
            double sendingAmt = t.AmountInGBP;
            int PType_ID = t.PType_ID;
            CompanyInfo.InsertActivityLogDetails("Request for  GetMTBSPaymentLink URL generate: ", 0, 0, 0, 0, "GetMTBSPaymentLink", 0, 0, "Send Money", _srvTransactionContext);
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("RedirectURL", typeof(string));
            string access_tocken = "";
            string redirectURL = "";
            string paymentReference = "";
            try
            {
                DataTable dtc = CompanyInfo.get(t.Client_ID, _srvTransactionContext);
                string Record_Insert_DateTime = CompanyInfo.gettime(t.Client_ID, _srvTransactionContext);
                string return_url = dtc.Rows[0]["Company_URL_Customer"].ToString();
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", 11);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", currency = "";

                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
                CompanyInfo.InsertActivityLogDetails("MTBS pay Start execution ", t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetMTBSPaymentLink", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string receivingAccountID = Convert.ToString(o["receivingAccountID"]);
                    string subscriptionkey = Convert.ToString(o["subscriptionkey"]);
                    string returnurl = Convert.ToString(o["returnurl"]);


                    #region codeforLatestFiedlds
                    string customer_account_id = "";
                    string customer_first_name = "";
                    string customer_last_name = "";
                    string customer_ip_address = Convert.ToString(o["customer_ip_address"]);
                    string customer_address = "";
                    string recepient_wallet_owner = "";
                    string recepient_wallet_id = "";
                    int benfId = Convert.ToInt32(t.Beneficiary_ID);
                    int custCityId = 0;

                    MySqlCommand _cmd_custdetails = new MySqlCommand("GetWallets");
                    _cmd_custdetails.CommandType = CommandType.StoredProcedure;
                    string whereclause = " and w.Wallet_ID = " + t.Wallet_ID + "  and w.Delete_Status=0  ";
                    _cmd_custdetails.Parameters.AddWithValue("_whereclause", whereclause);
                    DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd_custdetails);
                    if (dtwallets.Rows.Count > 0)
                    {
                        customer_account_id = Convert.ToString(dtwallets.Rows[0]["Cust_Reference"]).Trim();
                        customer_first_name = Convert.ToString(dtwallets.Rows[0]["First_Name"]).Trim();
                        customer_last_name = Convert.ToString(dtwallets.Rows[0]["Last_Name"]).Trim();
                        recepient_wallet_owner = customer_first_name + " " + customer_last_name;
                        recepient_wallet_id = Convert.ToString(dtwallets.Rows[0]["Wallet_Reference"]).Trim();
                        customer_address = Convert.ToString(dtwallets.Rows[0]["Nationality"]).Trim();
                        custCityId = Convert.ToInt32(dtwallets.Rows[0]["City_ID"]);
                    }

                    #endregion codeforLatestFiedlds

                    double transFees = 0.00;
                    try
                    {
                        transFees = Convert.ToDouble(t.Transfer_Fees);
                    }
                    catch { }

                    //string payment_amount = Convert.ToString(sendingAmt);
                    string payment_amount = Convert.ToString((sendingAmt + transFees) * 100);

                    // For wallet code
                    double transfer_cost = t.TotalAmount;
                    if (t.Wallet_Currency_type == 1 && t.Wallet_Perm != null && t.Wallet_Perm != -1)
                    {
                        if (Convert.ToString(t.Wallet_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }
                    if (t.Discount_Perm != null && t.Discount_Perm != -1)
                    {
                        if (Convert.ToString(t.Discount_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }

                    payment_amount = Convert.ToString(transfer_cost);

                    long nonce = DateTimeOffset.UtcNow.ToUnixTimeSeconds();


                    MySqlCommand cmdd = new MySqlCommand("GetCustDetailsByID");
                    cmdd.CommandType = CommandType.StoredProcedure;
                    cmdd.Parameters.AddWithValue("cust_ID", Customer_ID);
                    DataTable dtcc = db_connection.ExecuteQueryDataTableProcedure(cmdd);

                    string email = Convert.ToString(dtcc.Rows[0]["Email_ID"]);
                    string phone = Convert.ToString(dtcc.Rows[0]["Mobile_Number"]);
                    if (phone == "")
                    {
                        phone = Convert.ToString(dtcc.Rows[0]["Phone_Number"]);
                    }

                    string Payer_first_name = Convert.ToString(dtcc.Rows[0]["First_Name"]);
                    string Payer_last_name = Convert.ToString(dtcc.Rows[0]["Last_Name"]);
                    try
                    {

                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        var client = new RestClient(apiurl + "account/personnel/login");
                        client.Timeout = -1;
                        var request = new RestRequest(Method.POST);
                        request.AddHeader("MSB-Apim-Subscription-Key", subscriptionkey);
                        request.AddHeader("Content-Type", "application/json");

                        var body = $@"{{
    ""username"": ""{apiuser}"",
    ""password"": ""{apipass}""
}}";

                        CompanyInfo.InsertActivityLogDetails("MTBS Get AccessTocken Request: " + apiurl + "account/personnel/login", 0, 0, 0, 0, "GetMTBSPaymentLink", 0, 0, "Send Money", _srvTransactionContext);
                        request.AddParameter("application/json", body, ParameterType.RequestBody);
                        IRestResponse response = client.Execute(request);
                        dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                        CompanyInfo.InsertActivityLogDetails("MTBS Get AccessTocken Response: " + response.Content, 0, 0, 0, 0, "GetMTBSPaymentLink", 0, 0, "Send Money", _srvTransactionContext);
                        access_tocken = dynJson.accessToken;


                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Create MTBS AccessTocken " + ex.Message.Replace("\'", "\\'"), 0, "GetMTBSPaymentLink", 0, 0);
                    }


                    currency = t.FromCurrency_Code;

                    string amount = payment_amount;
                    string myRef = refNumber;
                    string description = t.Purpose;
                    if (description == "")
                    {
                        description = "family";
                    }
                    string returnUrl = returnurl + "/success";//"https://example.com/callback";//return_url + "success.html";
                    string paymentType = "1";// MTBS Open-Banking



                    try
                    {

                        var client = new RestClient(apiurl + "api/open-banking/generate/invoice");
                        client.Timeout = -1;
                        var request = new RestRequest(Method.POST);
                        request.AddHeader("content-type", "application/json");
                        request.AddHeader("MSB-Apim-Subscription-Key", subscriptionkey);
                        request.AddHeader("Authorization", "Bearer " + access_tocken);
                        var body = @"{
            " + "\n" +
                       @"   ""payerFirstName"":""" + Payer_first_name + @""",
            " + "\n" +
                       @"   ""payerLastName"":""" + Payer_last_name + @""",
            " + "\n" +
                       @"   ""payerEmail"":""" + email + @""",
            " + "\n" +
                       @"   ""payerPhoneNumber"":""" + phone + @""",
            " + "\n" +
                       @"   ""reference"":""" + myRef + @""",
            " + "\n" +
                       @"   ""paymentPurpose"":""" + description + @""",
            " + "\n" +
                       @"   ""amount"":""" + amount + @""",
            " + "\n" +
                       @"   ""receivingAccountID"":""" + receivingAccountID + @""",
            " + "\n" +
                       @"   ""paymentType"":""" + paymentType + @""",
            " + "\n" +
                       @"   ""redirectionUrl"":""" + returnUrl + @"""
            " + "\n" +
                       @"}";

                        request.AddParameter("application/json", body, ParameterType.RequestBody);

                        CompanyInfo.InsertActivityLogDetails("MTBS Get Payment Link Request: " + apiurl + "api/open-banking/generate/invoice " + body, 0, 0, 0, 0, "GetMTBSPaymentLink", 0, 0, "Send Money", _srvTransactionContext);

                        var response = client.Execute(request);
                        CompanyInfo.InsertActivityLogDetails("MTBS Get Payment Link Response: " + response.Content, 0, 0, 0, 0, "GetMTBSPaymentLink", 0, 0, "Send Money", _srvTransactionContext);

                        var jsonObject = JObject.Parse(response.Content);
                        bool success = jsonObject["success"].Value<bool>();

                        if (success == true)
                        {

                            paymentReference = jsonObject["paymentReference"].Value<string>();
                            redirectURL = jsonObject["link"].Value<string>();
                        }

                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In MTBS Get Payment Link" + ex.Message.Replace("\'", "\\'"), 0, "GetMTBSPaymentLink", 0, 0);
                    }

                    try
                    {

                        cmd = new MySqlCommand("Insert_instantbankingpartner_ref");
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("_ReferenceNo", myRef);
                        cmd.Parameters.AddWithValue("_payinpartnernumber", paymentReference);
                        cmd.Parameters.AddWithValue("_apiid", "11");
                        cmd.Parameters.AddWithValue("_record_datetime", Record_Insert_DateTime);
                        dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In MTBS Insert_instantbankingpartner_ref saving SP" + ex.Message.Replace("\'", "\\'"), 0, "GetMTBSPaymentLink", 0, 0);
                    }





                    dt.Rows.Add("", redirectURL);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("MTBS PayLink Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetMTBSPaymentLink", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            }

            return dt;
        }
        public DataTable GetMTBSStatus(Model.Transaction t, string Transaction_id) //Rushikesh MTBS
        {
            DataTable dt = new DataTable();
            string status = "";
            dt.Columns.Add("Status", typeof(string));
            string access_tocken = "";
            CompanyInfo.InsertActivityLogDetails("MTBS Checkstatus Inside :" + "Transaction_id :" + Transaction_id, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetMTBSStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            string payinpartnernumber = "";

            string Record_Insert_DateTime = CompanyInfo.gettime(t.Client_ID, _srvTransactionContext);
            try
            {

                MySqlCommand cmdd = new MySqlCommand("Insert_instantbankingpartner_ref");
                cmdd.CommandType = CommandType.StoredProcedure;
                cmdd.Parameters.AddWithValue("_ReferenceNo", t.ReferenceNo);
                cmdd.Parameters.AddWithValue("_payinpartnernumber", Transaction_id);//Click Send API ID
                cmdd.Parameters.AddWithValue("_apiid", 11);
                cmdd.Parameters.AddWithValue("_record_datetime", Record_Insert_DateTime);// API Status
                DataTable dttt = db_connection.ExecuteQueryDataTableProcedure(cmdd);
            }
            catch
            {

            }





            MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("_API_ID", 11);//Click Send API ID
            cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            cmd.Parameters.AddWithValue("_status", 0);// API Status
            DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
            int api_id = 0; string apiurl = "", apiuser = "", apipass = "";

            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            CompanyInfo.InsertActivityLogDetails("MTBS pay Start execution ", t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetMTBSStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            if (dtt.Rows.Count > 0)
            {
                api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                string receivingAccountID = Convert.ToString(o["receivingAccountID"]);
                string subscriptionkey = Convert.ToString(o["subscriptionkey"]);

                try
                {

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var client = new RestClient(apiurl + "account/personnel/login");
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("MSB-Apim-Subscription-Key", subscriptionkey);
                    request.AddHeader("Content-Type", "application/json");

                    var body = $@"{{
    ""username"": ""{apiuser}"",
    ""password"": ""{apipass}""
}}";

                    CompanyInfo.InsertActivityLogDetails("MTBS Get AccessTocken Request: " + apiurl + "account/personnel/login", 0, 0, 0, 0, "GetMTBSStatus", 0, 0, "Send Money", _srvTransactionContext);
                    request.AddParameter("application/json", body, ParameterType.RequestBody);
                    IRestResponse response = client.Execute(request);
                    dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                    CompanyInfo.InsertActivityLogDetails("MTBS Get AccessTocken Response: " + response.Content, 0, 0, 0, 0, "GetMTBSStatus", 0, 0, "Send Money", _srvTransactionContext);
                    access_tocken = dynJson.accessToken;


                }
                catch (Exception ex)
                {
                    string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Create MTBS AccessTocken " + ex.Message.Replace("\'", "\\'"), 0, "GetMTBSStatus", 0, 0);
                }
                try
                {
                    cmd = new MySqlCommand("get_thirdpart_instantbankingpartner_ref");
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("transaction_ref", t.ReferenceNo);

                    dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);



                    if (dtt.Rows.Count > 0)
                    {
                        payinpartnernumber = Convert.ToString(dtt.Rows[0]["payinpartnernumber"]);
                    }
                }
                catch (Exception ex)
                {
                    string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In get_thirdpart_instantbankingpartner_ref MTBS " + ex.Message.Replace("\'", "\\'"), 0, "GetMTBSStatus", 0, 0);
                }
                try
                {

                    var client = new RestClient(apiurl + "api/open-banking/status/" + payinpartnernumber);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    request.AddHeader("content-type", "application/json");
                    request.AddHeader("MSB-Apim-Subscription-Key", subscriptionkey);
                    request.AddHeader("Authorization", "Bearer " + access_tocken);
                    CompanyInfo.InsertActivityLogDetails("MTBS Get Payment Status Request: " + apiurl + "open-banking/status/?Id=" + payinpartnernumber, 0, 0, 0, 0, "GetMTBSStatus", 0, 0, "Send Money", _srvTransactionContext);

                    var response = client.Execute(request);
                    CompanyInfo.InsertActivityLogDetails("MTBS Get Payment Status Response: " + response.Content, 0, 0, 0, 0, "GetMTBSStatus", 0, 0, "Send Money", _srvTransactionContext);
                    dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                    bool success = dynJson.success;

                    if (success == true)
                    {
                        status = dynJson.status;
                    }
                    else
                    {
                        status = "FAILED";
                    }
                }
                catch (Exception ex)
                {
                    string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In CheckStatus For MTBS" + ex.Message.Replace("\'", "\\'"), 0, "GetMTBSStatus", 0, 0);
                }


                dt.Rows.Add(status);


            }
            return dt;
        }



        public string GetAxcessms_URL(Model.Transaction t, string refNumber, double sendingAmt, int PType_ID)//Rushikesh
        {            
            DataTable dt = new DataTable();

            dt.Columns.Add("RedirectURL", typeof(string));
            dt.Columns.Add("Integrity", typeof(string));

            string paymentType = "";
            string entityId = "";
            string access_tocken = "";
            string integrity = "";
            string redirectURL = "";
            try
            {
                DataTable dtc = CompanyInfo.get(t.Client_ID, _srvTransactionContext);

                string return_url = dtc.Rows[0]["Company_URL_Customer"].ToString();
                // get Emerchantpay api details here
                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 9");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count <= 0)
                {
                    CompanyInfo.InsertActivityLogDetails("Records Not Found In Get_PaymentGateway: ", 0, 0, 0, 0, "GetAxcessms_URL", 0, 0, "Send Money", _srvTransactionContext);
                }
                else
                {
                    string orderNumber = refNumber;
                    var topSecret = refNumber;
                    string Customer_Reference = Convert.ToString(CompanyInfo.Decrypt(t.Customer_ID, true));
                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);


                    access_tocken = Convert.ToString(o["access_tocken"]);
                    entityId = Convert.ToString(o["entityId"]);
                    integrity = Convert.ToString(o["integrity"]);
                    paymentType = Convert.ToString(o["paymentType"]);
                    redirectURL = Convert.ToString(o["redirectURL"]);
                    string payment_currency = "";

                    string custEmailAddress = "", custPostCode = "";
                    string customer_first_name = "";
                    string customer_last_name = "";
                    string customer_address = "";
                    string customer_mobile = "";
                    string customer_zipcode = "", customer_nationality = ""; int custCityId = 0;
                    int custCountryId = 0;
                    try
                    {
                        MySqlCommand cmdcustdata = new MySqlCommand("Customer_RegDetails");
                        cmdcustdata.CommandType = CommandType.StoredProcedure;
                        cmdcustdata.Parameters.AddWithValue("_Customer_ID", Customer_Reference);
                        cmdcustdata.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        DataTable dt_custdata = db_connection.ExecuteQueryDataTableProcedure(cmdcustdata);
                        if (dt_custdata.Rows.Count > 0)
                        {
                            custEmailAddress = Convert.ToString(dt_custdata.Rows[0]["Email_ID"]).Trim();
                            custPostCode = Convert.ToString(dt_custdata.Rows[0]["Post_Code"]).Trim();
                            customer_first_name = Convert.ToString(dt_custdata.Rows[0]["First_Name"]).Trim();
                            customer_last_name = Convert.ToString(dt_custdata.Rows[0]["Last_Name"]).Trim();
                            customer_mobile = Convert.ToString(dt_custdata.Rows[0]["Mobile_Number"]).Trim();
                            customer_address = Convert.ToString(dt_custdata.Rows[0]["Street"]).Trim();
                            customer_zipcode = Convert.ToString(dt_custdata.Rows[0]["Post_Code"]).Trim();
                            customer_nationality = Convert.ToString(dt_custdata.Rows[0]["Nationality"]).Trim();
                            custCityId = Convert.ToInt32(dt_custdata.Rows[0]["City_ID"]);
                            custCountryId = Convert.ToInt32(dt_custdata.Rows[0]["Country_ID"]);
                        }
                    }
                    catch (Exception ex) { }

                    if (customer_address == "" || customer_address == null)
                    {
                        customer_address = customer_nationality;
                    }


                    //string customer_id = Convert.ToString(o["customer_id"]);
                    #region codeforLatestFiedlds

                    string customer_country = "";
                    string customer_city = "";

                    // Select Country ISO Code
                    try
                    {
                        MySqlCommand _cmd_isoCode = new MySqlCommand("Country_Search");
                        _cmd_isoCode.CommandType = CommandType.StoredProcedure;
                        string whereclauseiso = " and Country_ID = " + custCountryId + "  ";
                        _cmd_isoCode.Parameters.AddWithValue("_whereclause", whereclauseiso);
                        _cmd_isoCode.Parameters.AddWithValue("_Client_ID", t.Client_ID);

                        DataTable dtISO = db_connection.ExecuteQueryDataTableProcedure(_cmd_isoCode);
                        if (dtISO.Rows.Count > 0)
                        {
                            customer_country = Convert.ToString(dtISO.Rows[0]["ISO_Code"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    // Select City Name
                    try
                    {
                        MySqlCommand _cmd_custCity = new MySqlCommand("sp_select_city_detailsbyid");
                        _cmd_custCity.CommandType = CommandType.StoredProcedure;
                        string whereclausecustCity = "   " + custCityId + "  ";
                        _cmd_custCity.Parameters.AddWithValue("_whereclause", whereclausecustCity);

                        DataTable dtcustCity = db_connection.ExecuteQueryDataTableProcedure(_cmd_custCity);
                        if (dtcustCity.Rows.Count > 0)
                        {
                            customer_city = Convert.ToString(dtcustCity.Rows[0]["City_Name"]).Trim();
                        }
                    }
                    catch (Exception ex) { }

                    #endregion codeforLatestFiedlds

                    double transFees = 0.00;
                    try
                    {
                        transFees = Convert.ToDouble(t.Transfer_Fees);
                    }
                    catch { }

                    //string payment_amount = Convert.ToString(sendingAmt);
                    string payment_amount = Convert.ToString((sendingAmt + transFees) * 100);

                    // For wallet code
                    double transfer_cost = t.TotalAmount;
                    if (t.Wallet_Currency_type == 1 && t.Wallet_Perm != null && t.Wallet_Perm != -1)
                    {
                        if (Convert.ToString(t.Wallet_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }
                    if (t.Discount_Perm != null && t.Discount_Perm != -1)
                    {
                        if (Convert.ToString(t.Discount_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }

                    if (transfer_cost > 0)
                    {
                        //transfer_cost = transfer_cost * 100;
                        payment_amount = Convert.ToString(transfer_cost);
                    }

                    return_url = return_url + "/success?paymentgetway=Axcess";
                    payment_currency = Convert.ToString(t.FromCurrency_Code).Trim();

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var client = new RestClient(apiurl + "v1/checkouts");
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Type", "application/x-www-form-urlencoded");
                    request.AddHeader("Authorization", "Bearer " + access_tocken);
                    request.AddParameter("entityId", entityId);
                    request.AddParameter("amount", payment_amount);
                    request.AddParameter("currency", payment_currency);
                    request.AddParameter("paymentType", paymentType);
                    request.AddParameter("integrity", integrity);
                    request.AddParameter("merchantTransactionId", refNumber);
                    request.AddParameter("billing.street1", customer_address);
                    request.AddParameter("billing.city", customer_city);
                    request.AddParameter("billing.postcode", custPostCode);
                    request.AddParameter("billing.country", customer_country);
                    request.AddParameter("customer.givenName", customer_first_name);
                    request.AddParameter("customer.surname", customer_last_name);
                    request.AddParameter("customer.email", custEmailAddress);
                    request.AddParameter("customer.phone", customer_mobile);
                    string req = apiurl + "v1/checkouts , " + "Authorization :" + "Bearer " + access_tocken + "entityId :" + entityId
                        + "amount :" + payment_amount + "currency :" + payment_currency + "paymentType :" + paymentType
                        + "integrity :" + integrity;
                    CompanyInfo.InsertActivityLogDetails("GetAxcessms_URL Request App: " + req, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetAxcessms_URL", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                    IRestResponse response = client.Execute(request);
                    Console.WriteLine(response.Content);

                    CompanyInfo.InsertActivityLogDetails("GetAxcessms_URL Response App: " + response.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetAxcessms_URL", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);

                    dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);


                    /*string code = dynJson.result.code;
                    string description = dynJson.result.description;
                    string buildNumber = dynJson.buildNumber;
                    string timestamp = dynJson.timestamp;
                    string ndc = dynJson.ndc;*/
                    string id = dynJson.id;
                    integrity = dynJson.integrity;

                    redirectURL = redirectURL + id;

                    CompanyInfo.InsertrequestLogTracker("GetAxcessms_URL redirectURL : "+ redirectURL, 0, 0, 0, 0, "Get_InviteDetails", Convert.ToInt32(0), Convert.ToInt32(0), "", _srvTransactionContext);

                   // redirectURL = redirectURL + "|" + integrity + "|" + return_url;

                    string url = "Axcessms_Payment.html?baseURL=" + Uri.EscapeDataString(redirectURL) + "&integrity="+ Uri.EscapeDataString(integrity)+ "&returnURL="+ Uri.EscapeDataString(return_url)+ "&Refno="+ refNumber;

                    return url;
                }
            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("GetAxcessms_URL Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetAxcessms_URL", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            }

            return redirectURL;
        }

        public DataTable getAxcessmsTransactionStatus(Model.Transaction t, string unique_id)//Rushikesh
        {
            CompanyInfo.InsertActivityLogDetails("Request for  getAxcessmsTransactionStatus status get: ", 0, 0, 0, 0, "getAxcessmsTransactionStatus", 0, 0, "Get status", _srvTransactionContext);
            DataTable dt = new DataTable();
            dt.Columns.Add("responsecode", typeof(string));
            dt.Columns.Add("status", typeof(string));
            string paymentType = "";
            string entityId = "";
            string access_tocken = "";
            string integrity = "";
            string redirectURL = "";
            string status = "";
            string id = "";
            t.Record_Insert_DateTime = DateTime.Now.ToString("yyyy-MM-dd");
            try
            {
                MySqlCommand _cmd = new MySqlCommand("Get_PaymentGateway");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                _cmd.Parameters.AddWithValue("_whereclause", " and ID = 9");
                DataTable d = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                if (d.Rows.Count <= 0)
                {
                    d.Rows.Add("");
                }
                else
                {
                    string apiurl = Convert.ToString(d.Rows[0]["API_Url"]);
                    string API_Codes = Convert.ToString(d.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    access_tocken = Convert.ToString(o["access_tocken"]);
                    entityId = Convert.ToString(o["entityId"]);
                    integrity = Convert.ToString(o["integrity"]);
                    paymentType = Convert.ToString(o["paymentType"]);
                    redirectURL = Convert.ToString(o["redirectURL"]);

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var client = new RestClient(apiurl + "v3/query?merchantTransactionId=" + t.TransactionReference + "&entityId=" + entityId);
                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    request.AddHeader("Authorization", "Bearer " + access_tocken);
                    string req = apiurl + "checkouts/" + unique_id + "/payment?entityId=" + entityId;
                    CompanyInfo.InsertActivityLogDetails("getAxcessmsTransactionStatus Request : " + req, t.User_ID, t.Transaction_ID, t.User_ID, 0, "getAxcessmsTransactionStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                    IRestResponse response = client.Execute(request);
                    Console.WriteLine(response.Content);
                    CompanyInfo.InsertActivityLogDetails("getAxcessmsTransactionStatus Response : " + response.Content, t.User_ID, t.Transaction_ID, t.User_ID, 0, "getAxcessmsTransactionStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                    dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                    string resultCode = dynJson.result.code;
                    string resultDescription = dynJson.result.description;
                    string buildNumber = dynJson.buildNumber;
                    string timestamp = dynJson.timestamp;
                    string ndc = dynJson.ndc;
                    foreach (var record in dynJson.records)
                    {
                        id = record.id;
                        paymentType = record.paymentType;
                        string paymentBrand = record.paymentBrand;
                        string amount = record.amount;
                        string currency = record.currency;
                        string descriptor = record.descriptor;
                        string merchantTransactionId = record.merchantTransactionId;
                        resultCode = record.result.code;
                        string recordResultDescription = record.result.description;
                        break;

                    }
                    try
                    {
                        MySqlCommand cmd1 = new MySqlCommand("Insert_bankingpartner_ref");
                        cmd1.CommandType = CommandType.StoredProcedure;
                        cmd1.Parameters.AddWithValue("_ReferenceNo", t.TransactionReference);
                        cmd1.Parameters.AddWithValue("_payinpartnernumber", id);
                        cmd1.Parameters.AddWithValue("_apiid", 9);
                        cmd1.Parameters.AddWithValue("_record_datetime", t.Record_Insert_DateTime);
                        int msg = db_connection.ExecuteNonQueryProcedure(cmd1);
                    }
                    catch (Exception ex)
                    {
                        CompanyInfo.InsertActivityLogDetails("GetAxcessms_URL Error while save ref number: " + ex.ToString() + "  and unique_id : " + id, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetAxcessms_URL", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
                    }

                    if (resultCode == "000.100.110" || resultCode == "000.000.000")
                    {
                        status = "COMPLETED";
                    }
                    else if (resultDescription == "Awaiting authorization")
                    {
                        status = "AWAITING_AUTHORIZATION";
                    }
                    else if (resultDescription == "Pending")
                    {
                        status = "PENDING";
                    }

                    dt.Rows.Add(resultCode, status);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("getAxcessmsTransactionStatus Error : " + ex.ToString(), 0, 0, 0, 0, "getAxcessmsTransactionStatus", 0, 0, "Get status", _srvTransactionContext);
                dt.Rows.Add("", "");
            }
            return dt;
        }

        public Model.Transaction ReviewDetails(Model.Transaction t, HttpContext context)
        {
            MySqlCommand _cmd = new MySqlCommand();
            string token = "";
            string SendMoneyToken = "";
            string RewardToken = "";
            DateTime sendhashexpire = DateTime.Now;
            string SOFdocupload = "";
            DateTime TransactionStartdate = Convert.ToDateTime("0001-01-01");
            try
            {
                try
                {
                    if (context.Request.Headers.ContainsKey("Authorization"))
                    {
                        string authHeader = context.Request.Headers["Authorization"];
                        if (!string.IsNullOrEmpty(authHeader) && authHeader.StartsWith("Bearer "))
                        {
                            token = authHeader.Substring("Bearer ".Length).Trim();
                        }
                    }
                    //token = (context.Request.Headers["Authorization"]).Substring("Bearer ".Length);
                    _cmd = new MySqlCommand("SetTransactionJourney");
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Parameters.AddWithValue("_Token", token);
                    _cmd.Parameters.AddWithValue("_SendMoneyToken", SendMoneyToken);
                    _cmd.Parameters.AddWithValue("_RewardToken", RewardToken);
                    _cmd.Parameters.AddWithValue("_SOFdocupload", SOFdocupload);
                    _cmd.Parameters.AddWithValue("_sendmoneyhashexpire", sendhashexpire);
                    _cmd.Parameters.AddWithValue("_TransactionStartdate", TransactionStartdate);
                    _cmd.Parameters.AddWithValue("_Customer_ID", Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true)));
                    DataTable journerydata = db_connection.ExecuteQueryDataTableProcedure(_cmd);
                    if (journerydata.Rows.Count > 0)
                    {
                        if (journerydata.Rows[0]["SendMoneyToken"] != DBNull.Value)
                        {
                            SendMoneyToken = Convert.ToString(journerydata.Rows[0]["SendMoneyToken"]);
                        }
                        if (journerydata.Rows[0]["RewardToken"] != DBNull.Value)
                        {
                            RewardToken = Convert.ToString(journerydata.Rows[0]["RewardToken"]);
                        }
                        if (journerydata.Rows[0]["SOFdocupload"] != DBNull.Value)
                        {
                            SOFdocupload = Convert.ToString(journerydata.Rows[0]["SOFdocupload"]);
                        }
                        if (journerydata.Rows[0]["sendmoneyhashexpire"] != DBNull.Value)
                        {
                            sendhashexpire = Convert.ToDateTime(journerydata.Rows[0]["sendmoneyhashexpire"]);
                        }
                        if (journerydata.Rows[0]["TransactionStartdate"] != DBNull.Value)
                        {
                            TransactionStartdate = Convert.ToDateTime(journerydata.Rows[0]["TransactionStartdate"]);
                        }

                    }
                }
                catch (Exception ex) { }
                string sendmoneyhash = Convert.ToString(SendMoneyToken);
                string hashdate = Convert.ToString(sendhashexpire);
                if (sendmoneyhash.Contains("sendmoneystep2.5passed") && hashdate != "0001-01-01" && hashdate != null && hashdate != "")
                {
                    if (!sendmoneyhash.Contains("sendmoneystep3passed"))
                        SendMoneyToken = sendmoneyhash + "sendmoneystep3passed";
                    t.CallBackURL = "success.html";
                }
            }
            catch { }
            finally
            {
                _cmd = new MySqlCommand("UpdateTransactionJourney");
                _cmd.CommandType = CommandType.StoredProcedure;
                _cmd.Parameters.AddWithValue("_Token", token);
                _cmd.Parameters.AddWithValue("_SendMoneyToken", SendMoneyToken);
                _cmd.Parameters.AddWithValue("_RewardToken", RewardToken);
                _cmd.Parameters.AddWithValue("_SOFdocupload", SOFdocupload);
                _cmd.Parameters.AddWithValue("_sendmoneyhashexpire", sendhashexpire);
                _cmd.Parameters.AddWithValue("_TransactionStartdate", TransactionStartdate);
                _cmd.Parameters.AddWithValue("_chk_validity", DBNull.Value);
                _cmd.Parameters.AddWithValue("_flag", 1);
                _cmd.Parameters.AddWithValue("_uploadSOF", 1);
                string success = Convert.ToString(db_connection.ExecuteNonQueryProcedure(_cmd));
            }
            return t;
        }

        public DataTable GetPaycellerPaymentLink(Model.Transaction t,HttpContext context)//Rushikesh Payceller
        {
            string refNumber = t.ReferenceNo;
            double sendingAmt = t.AmountInGBP;
            int PType_ID = t.PType_ID;
            CompanyInfo.InsertActivityLogDetails("Request for  GetPaycellerPaymentLink URL generate: ", 0, 0, 0, 0, "GetPaycellerPaymentLink", 0, 0, "Send Money", context);
            DataTable dt = new DataTable();
            dt.Columns.Add("Order", typeof(string));
            dt.Columns.Add("RedirectURL", typeof(string));
            string access_tocken = "";
            string redirectURL = "";
            string paymentReference = "";
            try
            {
                DataTable dtc = CompanyInfo.get(t.Client_ID, context);
                string Record_Insert_DateTime = CompanyInfo.gettime(t.Client_ID, context);
                string returnurl = dtc.Rows[0]["Company_URL_Customer"].ToString();
                MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("_API_ID", 13);//Click Send API ID
                cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                cmd.Parameters.AddWithValue("_status", 0);// API Status
                DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                int api_id = 0; string apiurl = "", apiuser = "", apipass = "", currency = "";

                int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
                CompanyInfo.InsertActivityLogDetails("Payceller pay Start execution ", t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetPaycellerPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);
                if (dtt.Rows.Count > 0)
                {
                    api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                    apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                    apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                    apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                    string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                    Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                    string email = Convert.ToString(o["email"]);
                    string public_key = Convert.ToString(o["public_key"]);
                    string clientid = Convert.ToString(o["clientid"]);
                    string settlementAccount = Convert.ToString(o["settlementAccount"]);

                    #region codeforLatestFiedlds
                    string customer_account_id = "";
                    string customer_first_name = "";
                    string customer_last_name = "";
                    string customer_ip_address = Convert.ToString(o["customer_ip_address"]);
                    string customer_address = "";
                    string recepient_wallet_owner = "";
                    string recepient_wallet_id = "";
                    int benfId = Convert.ToInt32(t.Beneficiary_ID);
                    int custCityId = 0;

                    MySqlCommand _cmd_custdetails = new MySqlCommand("GetWallets");
                    _cmd_custdetails.CommandType = CommandType.StoredProcedure;
                    string whereclause = " and w.Wallet_ID = " + t.Wallet_ID + "  and w.Delete_Status=0  ";
                    _cmd_custdetails.Parameters.AddWithValue("_whereclause", whereclause);
                    DataTable dtwallets = db_connection.ExecuteQueryDataTableProcedure(_cmd_custdetails);
                    if (dtwallets.Rows.Count > 0)
                    {
                        customer_account_id = Convert.ToString(dtwallets.Rows[0]["Cust_Reference"]).Trim();
                        customer_first_name = Convert.ToString(dtwallets.Rows[0]["First_Name"]).Trim();
                        customer_last_name = Convert.ToString(dtwallets.Rows[0]["Last_Name"]).Trim();
                        recepient_wallet_owner = customer_first_name + " " + customer_last_name;
                        recepient_wallet_id = Convert.ToString(dtwallets.Rows[0]["Wallet_Reference"]).Trim();
                        customer_address = Convert.ToString(dtwallets.Rows[0]["Nationality"]).Trim();
                        custCityId = Convert.ToInt32(dtwallets.Rows[0]["City_ID"]);
                    }

                    #endregion codeforLatestFiedlds

                    double transFees = 0.00;
                    try
                    {
                        transFees = Convert.ToDouble(t.Transfer_Fees);
                    }
                    catch { }

                    //string payment_amount = Convert.ToString(sendingAmt);
                    string payment_amount = Convert.ToString((sendingAmt + transFees) * 100);

                    // For wallet code
                    double transfer_cost = t.TotalAmount;
                    if (t.Wallet_Currency_type == 1 && t.Wallet_Perm != null && t.Wallet_Perm != -1)
                    {
                        if (Convert.ToString(t.Wallet_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }
                    if (t.Discount_Perm != null && t.Discount_Perm != -1)
                    {
                        if (Convert.ToString(t.Discount_Perm) == "0")
                        {
                            if (Convert.ToString(t.Transfer_Cost) != "" && Convert.ToString(t.Transfer_Cost) != null)
                            {
                                transfer_cost = t.Transfer_Cost;
                            }
                        }
                    }

                    payment_amount = Convert.ToString(transfer_cost);

                    long nonce = DateTimeOffset.UtcNow.ToUnixTimeSeconds();


                    MySqlCommand cmdd = new MySqlCommand("GetCustDetailsByID");
                    cmdd.CommandType = CommandType.StoredProcedure;
                    cmdd.Parameters.AddWithValue("cust_ID", Customer_ID);
                    DataTable dtcc = db_connection.ExecuteQueryDataTableProcedure(cmdd);

                    string email1 = Convert.ToString(dtcc.Rows[0]["Email_ID"]);
                    string phone = Convert.ToString(dtcc.Rows[0]["Phone_Number"]);
                    string Payer_first_name = Convert.ToString(dtcc.Rows[0]["First_Name"]);
                    string Payer_last_name = Convert.ToString(dtcc.Rows[0]["Last_Name"]);
                    try
                    {

                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        var client = new RestClient(apiurl + "/login/");
                        client.Timeout = -1;
                        var request = new RestRequest(Method.POST);
                        request.AddHeader("X-CLIENTID", clientid);
                        request.AddHeader("Content-Type", "application/json");

                        var body = $@"{{
    ""email"": ""{email}"",
    ""public_key"": ""{public_key}""
}}";

                        CompanyInfo.InsertActivityLogDetails("Payceller Get AccessTocken Request: " + apiurl + "/login/", 0, 0, 0, 0, "GetPaycellerPaymentLink", 0, 0, "Send Money", context);
                        request.AddParameter("application/json", body, ParameterType.RequestBody);
                        IRestResponse response = client.Execute(request);
                        dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                        CompanyInfo.InsertActivityLogDetails("Payceller Get AccessTocken Response: " + response.Content, 0, 0, 0, 0, "GetPaycellerPaymentLink", 0, 0, "Send Money", context);
                        access_tocken = dynJson.access;


                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Create Payceller AccessTocken " + ex.Message.Replace("\'", "\\'"), 0, "GetPaycellerPaymentLink", 0, 0);
                    }


                    currency = t.FromCurrency_Code;

                    string amount = payment_amount;
                    string myRef = refNumber;
                    string description = t.Purpose;
                    if (description == "")
                    {
                        description = "family";
                    }
                    //returnurl = "";
                    string returnUrl = returnurl + "success";//"https://example.com/callback";//return_url + "success.html";






                    string webhookUrl = "https://webhook.site/example";
                    string address = "New York, USA";

                    try
                    {

                        var client = new RestClient(apiurl + "/initiate-payment/");
                        client.Timeout = -1;
                        var request = new RestRequest(Method.POST);
                        request.AddHeader("content-type", "application/json");
                        request.AddHeader("X-CLIENTID", clientid);
                        request.AddHeader("Authorization", "Bearer " + access_tocken);
                        var body = $@"{{
                        ""amount"": {amount},
                        ""currency"": ""{currency}"",
                        ""settlement_account"": ""{settlementAccount}"",
                        ""transaction_ref"": ""{myRef}"",
                        ""narration"": ""{description}"",
                        ""webhook_url"": ""{webhookUrl}"",
                        ""redirect_url"": ""{returnUrl}"",
                        ""payer"": {{
                            ""first_name"": ""{Payer_first_name}"",
                            ""last_name"": ""{Payer_last_name}"",
                            ""email_address"": ""{email1}"",
                            ""address"": ""{address}""
                            }}
                        }}";

                        request.AddParameter("application/json", body, ParameterType.RequestBody);

                        CompanyInfo.InsertActivityLogDetails("Payceller Get Payment Link Request: " + apiurl + "/initiate-payment/" + body, 0, 0, 0, 0, "GetPaycellerPaymentLink", 0, 0, "Send Money", context);

                        var response = client.Execute(request);
                        CompanyInfo.InsertActivityLogDetails("Payceller Get Payment Link Response: " + response.Content, 0, 0, 0, 0, "GetPaycellerPaymentLink", 0, 0, "Send Money", context);
                        dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                        string redirecturl = dynJson.hosted_url;
                        paymentReference = dynJson.reference;
                        redirectURL = redirecturl;
                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Payceller Get Payment Link" + ex.Message.Replace("\'", "\\'"), 0, "GetPaycellerPaymentLink", 0, 0);
                    }

                    try
                    {

                        cmd = new MySqlCommand("Insert_instantbankingpartner_ref");
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("_ReferenceNo", myRef);
                        cmd.Parameters.AddWithValue("_payinpartnernumber", paymentReference);
                        cmd.Parameters.AddWithValue("_apiid", "13");
                        cmd.Parameters.AddWithValue("_record_datetime", Record_Insert_DateTime);
                        dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
                    }
                    catch (Exception ex)
                    {
                        string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Payceller Insert_instantbankingpartner_ref saving SP" + ex.Message.Replace("\'", "\\'"), 0, "GetPaycellerPaymentLink", 0, 0);
                    }

                    dt.Rows.Add("", redirectURL);
                }

            }
            catch (Exception ex)
            {
                CompanyInfo.InsertActivityLogDetails("Payceller PayLink Error : " + ex.ToString(), t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetPaycellerPaymentLink", t.CB_ID, t.Client_ID, "Send Money", context);
            }

            return dt;
        }
        public DataTable GetPaycellerStatus(Model.Transaction t, string Transaction_id) //Rushikesh Payceller
        {
            DataTable dt = new DataTable();
            string status = "";
            dt.Columns.Add("Status", typeof(string));
            string access_tocken = "";
            CompanyInfo.InsertActivityLogDetails("Payceller Checkstatus Inside :" + "Transaction_id :" + Transaction_id, t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetPaycellerStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            string payinpartnernumber = "";

            string Record_Insert_DateTime = CompanyInfo.gettime(t.Client_ID, _srvTransactionContext);

            MySqlCommand cmd = new MySqlCommand("Get_instantBankAPIDetails");
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("_API_ID", 13);//Click Send API ID
            cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            cmd.Parameters.AddWithValue("_status", 0);// API Status
            DataTable dtt = db_connection.ExecuteQueryDataTableProcedure(cmd);
            int api_id = 0; string apiurl = "", apiuser = "", apipass = "";

            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));
            CompanyInfo.InsertActivityLogDetails("Payceller pay Start execution ", t.User_ID, t.Transaction_ID, t.User_ID, 0, "GetMTBSStatus", t.CB_ID, t.Client_ID, "Send Money", _srvTransactionContext);
            if (dtt.Rows.Count > 0)
            {
                api_id = Convert.ToInt32(dtt.Rows[0]["bank_api_id"]);
                apiurl = Convert.ToString(dtt.Rows[0]["API_URL"]);
                apiuser = Convert.ToString(dtt.Rows[0]["UserName"]);
                apipass = Convert.ToString(dtt.Rows[0]["Password"]);
                string API_Codes = Convert.ToString(dtt.Rows[0]["APIUnique_Codes"]);
                Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(API_Codes);
                string email = Convert.ToString(o["email"]);
                string public_key = Convert.ToString(o["public_key"]);
                string clientid = Convert.ToString(o["clientid"]);
                string settlementAccount = Convert.ToString(o["settlementAccount"]);

                try
                {

                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    var client = new RestClient(apiurl + "/login/");
                    client.Timeout = -1;
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("X-CLIENTID", clientid);
                    request.AddHeader("Content-Type", "application/json");

                    var body = $@"{{
    ""email"": ""{email}"",
    ""public_key"": ""{public_key}""
}}";

                    CompanyInfo.InsertActivityLogDetails("Payceller Get AccessTocken Request: " + apiurl + "/login/", 0, 0, 0, 0, "GetPaycellerPaymentLink", 0, 0, "Send Money", _srvTransactionContext);
                    request.AddParameter("application/json", body, ParameterType.RequestBody);
                    IRestResponse response = client.Execute(request);
                    dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                    CompanyInfo.InsertActivityLogDetails("Payceller Get AccessTocken Response: " + response.Content, 0, 0, 0, 0, "GetPaycellerPaymentLink", 0, 0, "Send Money", _srvTransactionContext);
                    access_tocken = dynJson.access;


                }
                catch (Exception ex)
                {
                    string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In Create Payceller AccessTocken " + ex.Message.Replace("\'", "\\'"), 0, "GetPaycellerPaymentLink", 0, 0);
                }

                try
                {

                    var client = new RestClient(apiurl + "/payment/" + t.ReferenceNo + "/");
                    client.Timeout = -1;
                    var request = new RestRequest(Method.GET);
                    request.AddHeader("content-type", "application/json");
                    request.AddHeader("X-CLIENTID", clientid);
                    request.AddHeader("Authorization", "Bearer " + access_tocken);
                    CompanyInfo.InsertActivityLogDetails("Payceller Get Payment Status Request: " + apiurl + "/payment/" + t.ReferenceNo, 0, 0, 0, 0, "GetPaycellerStatus", 0, 0, "Send Money", _srvTransactionContext);

                    var response = client.Execute(request);
                    CompanyInfo.InsertActivityLogDetails("Payceller Get Payment Status Response: " + response.Content, 0, 0, 0, 0, "GetPaycellerStatus", 0, 0, "Send Money", _srvTransactionContext);
                    dynamic dynJson = Newtonsoft.Json.JsonConvert.DeserializeObject(response.Content);
                    status = dynJson.status;


                }
                catch (Exception ex)
                {
                    string stattus = (string)CompanyInfo.InsertErrorLogDetails("Error In CheckStatus For Payceller" + ex.Message.Replace("\'", "\\'"), 0, "GetPaycellerStatus", 0, 0);
                }


                dt.Rows.Add(status);


            }
            return dt;
        }

        public DataTable CheckCustomerPersonalDetails(Model.Transaction t)
        {
            int Customer_ID = Convert.ToInt32(CompanyInfo.Decrypt(t.Customer_ID, true));

            MySqlCommand _cmd = new MySqlCommand("GetPermissions");
            _cmd.CommandType = CommandType.StoredProcedure;
            _cmd.Parameters.AddWithValue("_whereclause", " and PID in (224);");
            _cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
            DataTable dt = db_connection.ExecuteQueryDataTableProcedure(_cmd);

            DataTable ds = new DataTable();
            DataTable config = new DataTable();
            DataTable cust = new DataTable();

            ds.Columns.Add("Status", typeof(int));
            ds.Columns.Add("Errormessage", typeof(string));
            try
            {
                string errorMessage = "";
                int PersonalDetailsCust = 1;
                PersonalDetailsCust = Convert.ToInt32(dt.Rows[0]["Status_ForCustomer"]);

                if (PersonalDetailsCust == 0)
                {
                    using (MySqlCommand _cmd1 = new MySqlCommand("CheckAddressDetailsCustomers"))
                    {
                        _cmd1.CommandType = CommandType.StoredProcedure;
                        _cmd1.Parameters.AddWithValue("_ClientId", t.Client_ID);
                        _cmd1.Parameters.AddWithValue("_Customer_ID", Customer_ID);
                        cust = db_connection.ExecuteQueryDataTableProcedure(_cmd1);
                    }
                    using (MySqlCommand cmd = new MySqlCommand("Registration_Configuration"))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("_Client_ID", t.Client_ID);
                        config = db_connection.ExecuteQueryDataTableProcedure(cmd);
                    }

                    int email_conf = Convert.ToInt32(config.Rows[0]["Customer_email_man"]);

                    int DOB_conf = Convert.ToInt32(config.Rows[0]["Date_of_Birth_man"]);
                    int Mobi_conf = Convert.ToInt32(config.Rows[0]["Customer_Mobile_number_man"]);

                    int PhoneNo_conf = Convert.ToInt32(config.Rows[0]["customer_phone_man"]);

                    if (cust.Rows.Count > 0)
                    {
                        //if (DOB_conf == 0)
                        //{
                        //    string DateOf_Birth = Convert.ToString(cust.Rows[0]["DateOf_Birth"]).Trim();
                        //    if (String.IsNullOrEmpty(DateOf_Birth))
                        //    {
                        //        errorMessage = errorMessage + ", Date Of Birth Information Missing.";
                        //    }
                        //}
                        var cntinfo = 0;
                        if (Mobi_conf == 0)
                        {
                            string Mobile_Number = Convert.ToString(cust.Rows[0]["Mobile_Number"]).Trim();
                            if (String.IsNullOrEmpty(Mobile_Number))
                            {
                                errorMessage = " Mobile number information missing. Please update";
                                cntinfo++;
                            }
                        }
                        if (PhoneNo_conf == 0)
                        {
                            string Phone_Number = Convert.ToString(cust.Rows[0]["Phone_Number"]).Trim();
                            if (String.IsNullOrEmpty(Phone_Number))
                            {
                                errorMessage = " Phone number information missing. Please update";
                                cntinfo++;
                            }

                        }
                        if (cntinfo == 2)
                        {
                            errorMessage = " Contact information missing. Please update";
                        }
                    }
                    if (errorMessage != "")
                    {
                        ds.Rows.Add(0, errorMessage);
                    }
                }


            }
            catch (Exception ex) {
                HttpContext context = null;
                CompanyInfo.InsertrequestLogTracker("CheckCustomerPersonalDetails error: " + ex.ToString(), 0, 0, 0, 0, "CheckCustomerPersonalDetails", Convert.ToInt32(0), Convert.ToInt32(0), "", context);
            }

            return ds;
        }

    }
}
